generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model SalesRep {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  phoneNumber  String        @unique
  password     String
  countryId    Int
  region_id    Int
  region       String
  role         String?       @default("USER")
  status       Int?          @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  photoUrl     String?       @default("")
  journeyPlans JourneyPlan[]
  MyOrder      MyOrder[]
  reports      Report[]
  country      Country       @relation(fields: [countryId], references: [id])
  tokens       Token[]
  leaves       Leave[]
  Manager      Manager?

  @@index([countryId], map: "SalesRep_countryId_fkey")
}

model Manager {
  id         Int              @id @default(autoincrement())
  userId     Int              @unique
  department String?
  checkins   ManagerCheckin[]
  user       SalesRep         @relation(fields: [userId], references: [id])

  @@map("managers")
}

model Token {
  id         Int      @id @default(autoincrement())
  token      String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  salesRepId Int
  user       SalesRep @relation(fields: [salesRepId], references: [id])

  @@index([salesRepId], map: "Token_userId_fkey")
}

model Regions {
  id        Int     @id @default(autoincrement())
  name      String
  status    Int?    @default(0)
  countryId Int
  country   Country @relation(fields: [countryId], references: [id])

  @@unique([name, countryId])
  @@index([countryId], map: "Regions_countryId_fkey")
}

model Country {
  id       Int        @id @default(autoincrement())
  name     String
  status   Int?       @default(0)
  clients  Clients[]
  regions  Regions[]
  salesRep SalesRep[]
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  category        String
  category_id     Int
  createdAt       DateTime          @default(now())
  currentStock    Int?
  description     String?
  updatedAt       DateTime          @updatedAt
  image           String?           @default("")
  clientId        Int?
  orderItems      OrderItem[]
  client          Clients?          @relation(fields: [clientId], references: [id])
  purchase        Purchase[]
  purchaseHistory PurchaseHistory[]
  storeQuantities StoreQuantity[]

  @@index([clientId], map: "Product_clientId_fkey")
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String
  priceOptions PriceOption[]
}

model PriceOption {
  id         Int         @id @default(autoincrement())
  option     String
  value      Int
  categoryId Int
  orderItems OrderItem[]
  category   Category    @relation(fields: [categoryId], references: [id])

  @@index([categoryId], map: "PriceOption_categoryId_fkey")
}

model StoreQuantity {
  id        Int     @id @default(autoincrement())
  quantity  Int
  storeId   Int
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  store     Stores  @relation(fields: [storeId], references: [id])

  @@index([productId], map: "StoreQuantity_productId_fkey")
  @@index([storeId], map: "StoreQuantity_storeId_fkey")
}

model Stores {
  id              Int               @id @default(autoincrement())
  name            String
  purchase        Purchase[]
  purchaseHistory PurchaseHistory[]
  storeQuantities StoreQuantity[]
}

model Purchase {
  id         Int      @id @default(autoincrement())
  productId  Int
  storeId    Int
  quantity   Int
  totalPrice Int
  date       DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  store      Stores   @relation(fields: [storeId], references: [id])

  @@index([productId], map: "Purchase_productId_fkey")
  @@index([storeId], map: "Purchase_storeId_fkey")
}

model PurchaseHistory {
  id               Int      @id @default(autoincrement())
  storeId          Int
  productId        Int
  previousQuantity Int
  purchaseQuantity Int
  newBalance       Int
  createdAt        DateTime @default(now())
  product          Product  @relation(fields: [productId], references: [id])
  store            Stores   @relation(fields: [storeId], references: [id])

  @@index([productId], map: "PurchaseHistory_productId_fkey")
  @@index([storeId], map: "PurchaseHistory_storeId_fkey")
}

model Clients {
  id           Int              @id @default(autoincrement())
  name         String
  region_id    Int
  region       String
  contact      String
  tax_pin      String
  location     String
  status       Int              @default(0)
  countryId    Int
  client_type  Int?
  address      String?
  balance      String?
  email        String?
  latitude     Float?
  longitude    Float?
  country      Country          @relation(fields: [countryId], references: [id])
  journeyPlans JourneyPlan[]
  checkins     ManagerCheckin[]
  MyOrder      MyOrder[]
  products     Product[]
  reports      Report[]

  @@index([countryId], map: "Clients_countryId_fkey")
}

model Riders {
  id            Int     @id @default(autoincrement())
  name          String
  status        Int?
  company       String
  company_id    Int
  contact       String
  id_number     String
  device_id     String?
  device_name   String?
  device_status String?
  password      String?
  token         String?
}

model RidersCompany {
  id     Int    @id @default(autoincrement())
  name   String
  status Int?
}

model ManagerCheckin {
  id         Int       @id @default(autoincrement())
  managerId  Int
  date       DateTime
  checkInAt  DateTime?
  checkOutAt DateTime?
  latitude   Float?
  longitude  Float?
  status     String?
  
  notes      String?
  imageUrl   String?
  clientId   Int
  client     Clients   @relation(fields: [clientId], references: [id])
  manager    Manager   @relation(fields: [managerId], references: [id])

  @@index([managerId])
  @@index([clientId])
}

model MyOrder {
  id                 Int         @id @default(autoincrement())
  totalAmount        Float
  comment            String
  customerId         String
  orderDate          DateTime    @default(now())
  riderId            Int?
  riderName          String?
  status             Int         @default(0)
  approvedTime       String?
  dispatchTime       String?
  deliveryLocation   String?
  customerName       String
  customerType       String
  complete_address   String?
  complete_latitude  String?
  complete_longitude String?
  deliveryTime       String?
  cancel_reason      String?
  pickupTime         String?
  recepient          String?
  clientId           Int
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  userId             Int
  client             Clients     @relation(fields: [clientId], references: [id])
  user               SalesRep    @relation(fields: [userId], references: [id])
  orderItems         OrderItem[]
  reports            Report[]    @relation("MyOrderToReport")

  @@index([userId])
  @@index([clientId])
}

model OrderItem {
  id            Int          @id @default(autoincrement())
  productId     Int
  quantity      Int
  orderId       Int
  priceOptionId Int?
  order         MyOrder      @relation(fields: [orderId], references: [id])
  priceOption   PriceOption? @relation(fields: [priceOptionId], references: [id])
  product       Product      @relation(fields: [productId], references: [id])

  @@unique([orderId, productId, priceOptionId])
  @@index([orderId])
  @@index([priceOptionId])
  @@index([productId], map: "OrderItem_productId_fkey")
}

model JourneyPlan {
  id                Int       @id @default(autoincrement())
  date              DateTime
  time              String
  userId            Int?
  status            Int       @default(0)
  checkInTime       DateTime?
  latitude          Float?
  longitude         Float?
  imageUrl          String?
  notes             String?
  checkoutLatitude  Float?
  checkoutLongitude Float?
  checkoutTime      DateTime?
  clientId          Int
  client            Clients   @relation(fields: [clientId], references: [id])
  user              SalesRep? @relation(fields: [userId], references: [id])
  reports           Report[]

  @@index([clientId])
  @@index([userId])
}

model NoticeBoard {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id               Int               @id @default(autoincrement())
  orderId          Int?
  createdAt        DateTime          @default(now())
  userId           Int
  journeyPlanId    Int?
  type             ReportType
  clientId         Int
  feedbackReport   FeedbackReport?
  productReport    ProductReport?
  client           Clients           @relation(fields: [clientId], references: [id])
  journeyPlan      JourneyPlan?      @relation(fields: [journeyPlanId], references: [id])
  user             SalesRep          @relation(fields: [userId], references: [id])
  visibilityReport VisibilityReport?
  MyOrder          MyOrder[]         @relation("MyOrderToReport")

  @@index([clientId])
  @@index([journeyPlanId], map: "Report_journeyPlanId_fkey")
  @@index([orderId], map: "Report_orderId_fkey")
  @@index([userId], map: "Report_userId_fkey")
}

model FeedbackReport {
  reportId  Int      @id
  comment   String?
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model ProductReport {
  reportId    Int      @id
  productName String?
  quantity    Int?
  comment     String?
  createdAt   DateTime @default(now())
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model VisibilityReport {
  reportId  Int      @id
  comment   String?
  imageUrl  String?
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model Leave {
  id         Int      @id @default(autoincrement())
  userId     Int
  leaveType  String
  startDate  DateTime
  endDate    DateTime
  reason     String
  attachment String?
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       SalesRep @relation(fields: [userId], references: [id])

  @@index([userId], map: "leaves_userId_fkey")
  @@map("leaves")
}

model Outlet {
  id        Int     @id @default(autoincrement())
  name      String
  address   String
  latitude  Float?
  longitude Float?
  balance   String?
  email     String?
  kraPin    String?
  phone     String?
}

enum ReportType {
  PRODUCT_AVAILABILITY
  VISIBILITY_ACTIVITY
  FEEDBACK
}
