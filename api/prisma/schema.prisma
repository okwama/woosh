generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  phoneNumber  String        @unique
  password     String
  role         String        @default("USER")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  journeyPlans JourneyPlan[]
  orders       Order[]
  reports      Report[]
  tokens       Token[]
  leaves       Leave[]

  @@map("users")
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Token_userId_fkey")
}

model Outlet {
  id           Int           @id @default(autoincrement())
  name         String
  address      String
  latitude     Float?
  longitude    Float?
  journeyPlans JourneyPlan[]
  orders       Order[]
  products     Product[]
  reports      Report[]
}

model Order {
  id        Int      @id @default(autoincrement())
  quantity  Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  outletId  Int
  productId Int?
  outlet    Outlet   @relation(fields: [outletId], references: [id])
  product   Product? @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  reports   Report[]

  @@index([userId], map: "Order_userId_fkey")
  @@index([productId], map: "Order_productId_fkey")
  @@index([outletId], map: "Order_outletId_fkey")
}

model JourneyPlan {
  id                Int       @id @default(autoincrement())
  date              DateTime
  time              String
  userId            Int?
  outletId          Int
  status            Int       @default(0)
  checkInTime       DateTime?
  latitude          Float?
  longitude         Float?
  imageUrl          String?
  notes             String?
  checkoutLatitude  Float?
  checkoutLongitude Float?
  checkoutTime      DateTime?
  outlet            Outlet    @relation(fields: [outletId], references: [id])
  user              User?     @relation(fields: [userId], references: [id])
  reports           Report[]

  @@index([outletId], map: "JourneyPlan_outletId_fkey")
  @@index([userId], map: "JourneyPlan_userId_fkey")
}

model NoticeBoard {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id               Int               @id @default(autoincrement())
  orderId          Int?
  outletId         Int
  createdAt        DateTime          @default(now())
  userId           Int
  journeyPlanId    Int?
  type             ReportType
  feedbackReport   FeedbackReport?
  productReport    ProductReport?
  journeyPlan      JourneyPlan?      @relation(fields: [journeyPlanId], references: [id])
  order            Order?            @relation(fields: [orderId], references: [id])
  outlet           Outlet            @relation(fields: [outletId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
  visibilityReport VisibilityReport?

  @@index([userId], map: "Report_userId_fkey")
  @@index([orderId], map: "Report_orderId_fkey")
  @@index([outletId], map: "Report_outletId_fkey")
  @@index([journeyPlanId], map: "Report_journeyPlanId_fkey")
}

model FeedbackReport {
  reportId  Int      @id
  comment   String?
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model ProductReport {
  reportId    Int      @id
  productName String?
  quantity    Int?
  comment     String?
  createdAt   DateTime @default(now())
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model VisibilityReport {
  reportId  Int      @id
  comment   String?
  imageUrl  String?
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  currentStock  Int
  reorderPoint  Int
  orderQuantity Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  outletId      Int
  orders        Order[]
  outlet        Outlet   @relation(fields: [outletId], references: [id])

  @@index([outletId], map: "Product_outletId_fkey")
}

model Leave {
  id         Int      @id @default(autoincrement())
  userId     Int
  leaveType  String
  startDate  DateTime
  endDate    DateTime
  reason     String
  attachment String?
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "leaves_userId_fkey")
  @@map("leaves")
}

enum ReportType {
  PRODUCT_AVAILABILITY
  VISIBILITY_ACTIVITY
  FEEDBACK
}
