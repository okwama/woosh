generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") 
}



model SalesRep {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  phoneNumber  String        @unique
  password     String
  countryId   Int
  country     Country @relation(fields: [countryId], references: [id])
  region_id   Int
  region      String
  role         String?      @default("USER")
  status       Int?         @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  photoUrl     String?       @default("")
  journeyPlans JourneyPlan[]
  reports      Report[]
  tokens       Token[]
  leaves       Leave[]
  Manager      Manager?
  MyOrder MyOrder[]
  
}

model Manager {
  id         Int              @id @default(autoincrement())
  userId     Int              @unique
  department String?
  user       SalesRep         @relation(fields: [userId], references: [id])
  checkins   ManagerCheckin[]

  @@map("managers")
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String
  salesRepId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      SalesRep @relation(fields: [salesRepId], references: [id])

  @@index([salesRepId], map: "Token_userId_fkey")
}

model Regions {
  id        Int     @id @default(autoincrement())
  name      String
  countryId Int
  country   Country @relation(fields: [countryId], references: [id])
  status    Int?    @default(0)

  @@unique([name, countryId])
}

model Country {
  id      Int       @id @default(autoincrement())
  name    String
  regions Regions[]
  clients Clients[]
  salesRep SalesRep[]
  status  Int?      @default(0)
}
model Product {
  id              Int             @id @default(autoincrement())
  name            String
  category_id     Int

  category        String
  description     String?
  currentStock    Int?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  clientId        Int?
  image           String?         @default("")
  client          Clients?        @relation(fields: [clientId], references: [id])
  orderItems      OrderItem[]
  storeQuantities StoreQuantity[]
  purchase        Purchase[]
  purchaseHistory PurchaseHistory[]

  @@index([clientId])
}
model Category {
  id           Int             @id @default(autoincrement())
  name         String
  priceOptions PriceOption[]   // ðŸ‘ˆ Relation
}

model PriceOption {
  id         Int         @id @default(autoincrement())
  option     String
  value      Int
  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId Int
  orderItems OrderItem[]
}
model StoreQuantity {
  id        Int     @id @default(autoincrement())
  quantity  Int
  storeId   Int
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  store     Stores  @relation(fields: [storeId], references: [id])
}

model Stores {
  id              Int             @id @default(autoincrement())
  name            String
  storeQuantities StoreQuantity[]
  purchase        Purchase[]
  purchaseHistory PurchaseHistory[]
  
}

model Purchase {
  id         Int      @id @default(autoincrement())
  productId  Int
  storeId    Int
  quantity   Int
  totalPrice Int
  date       DateTime @default(now())
  product Product @relation(fields: [productId], references: [id])
  store   Stores  @relation(fields: [storeId], references: [id])
}

model PurchaseHistory {
  id                Int      @id @default(autoincrement())
  storeId           Int
  productId         Int
  previousQuantity  Int
  purchaseQuantity  Int
  newBalance        Int
  createdAt         DateTime @default(now())

  store    Stores   @relation(fields: [storeId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])
}

model Clients {
  id          Int     @id @default(autoincrement())
  name        String
  address      String?
  latitude     Float?
  longitude    Float?
  balance      String?
  email        String?
  region_id   Int
  region      String
  contact     String
  tax_pin     String
  location    String
  status      Int     @default(0)
  client_type Int?
  countryId   Int
  country     Country @relation(fields: [countryId], references: [id])
  journeyPlans JourneyPlan[]
  MyOrder MyOrder[]
  products     Product[]
  reports      Report[]
  checkins     ManagerCheckin[]


}
model Riders {
  id            Int     @id @default(autoincrement())
  name          String
  contact       String
  id_number     String
  company_id    Int
  company       String
  status        Int?
  password      String?
  device_id     String?
  device_name   String?
  device_status String?
  token         String?
}

model RidersCompany {
  id     Int    @id @default(autoincrement())
  name   String
  status Int?
}



model ManagerCheckin {
  id         Int       @id @default(autoincrement())
  managerId  Int
  clientId   Int
  date       DateTime
  checkInAt  DateTime?
  checkOutAt DateTime?
  latitude   Float?
  longitude  Float?
  notes      String?
  manager    Manager   @relation(fields: [managerId], references: [id])
  client     Clients   @relation(fields: [clientId], references: [id])

  @@index([managerId])
  @@index([clientId])
}

model MyOrder {
  id            Int       @id @default(autoincrement())
  totalAmount   Float
  comment       String
  customerType    String
  customerId String
  customerName String
  orderDate      DateTime @default(now())
  riderId    Int?  
  riderName  String?
  status      Int      @default(0)
  approvedTime      String?
  dispatchTime      String?
  deliveryLocation      String?
  complete_latitude      String?
  complete_longitude      String?
  complete_address      String?
  pickupTime      String?
  deliveryTime      String?
  cancel_reason      String?
  recepient      String?
  userId     Int
  clientId   Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  client     Clients     @relation(fields: [clientId], references: [id])
  user       SalesRep    @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  reports    Report[]

  @@index([userId])
  @@index([clientId])

}


model OrderItem {
  id           Int         @id @default(autoincrement())
  orderId      Int
  productId    Int
  quantity     Int
  priceOption  PriceOption? @relation(fields: [priceOptionId], references: [id])
  priceOptionId Int?
  order        MyOrder     @relation(fields: [orderId], references: [id])
  product      Product     @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([priceOptionId])
  @@unique([orderId, productId, priceOptionId])
}

model JourneyPlan {
  id                Int       @id @default(autoincrement())
  date              DateTime
  time              String
  userId            Int?
  clientId          Int
  status            Int       @default(0)
  checkInTime       DateTime?
  latitude          Float?
  longitude         Float?
  imageUrl          String?
  notes             String?
  checkoutLatitude  Float?
  checkoutLongitude Float?
  checkoutTime      DateTime?
  client            Clients   @relation(fields: [clientId], references: [id])
  user              SalesRep? @relation(fields: [userId], references: [id])
  reports           Report[]

  @@index([clientId])
  @@index([userId])
}

model NoticeBoard {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id               Int               @id @default(autoincrement())
  orderId          Int?
  clientId         Int
  createdAt        DateTime          @default(now())
  userId           Int
  journeyPlanId    Int?
  type             ReportType
  feedbackReport   FeedbackReport?
  productReport    ProductReport?
  journeyPlan      JourneyPlan?      @relation(fields: [journeyPlanId], references: [id])
  MyOrder          MyOrder[]  
  client           Clients           @relation(fields: [clientId], references: [id])
  user             SalesRep          @relation(fields: [userId], references: [id])
  visibilityReport VisibilityReport?

  @@index([userId])
  @@index([orderId])
  @@index([clientId])
  @@index([journeyPlanId])
  
}

model FeedbackReport {
  reportId  Int      @id
  comment   String?
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model ProductReport {
  reportId    Int      @id
  productName String?
  quantity    Int?
  comment     String?
  createdAt   DateTime @default(now())
  report      Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}

model VisibilityReport {
  reportId  Int      @id
  comment   String?
  imageUrl  String?
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
}





model Leave {
  id         Int      @id @default(autoincrement())
  userId     Int
  leaveType  String
  startDate  DateTime
  endDate    DateTime
  reason     String
  attachment String?
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       SalesRep @relation(fields: [userId], references: [id])

  @@index([userId], map: "leaves_userId_fkey")
  @@map("leaves")
}

enum ReportType {
  PRODUCT_AVAILABILITY
  VISIBILITY_ACTIVITY
  FEEDBACK
}

enum Role {
  ADMIN
  MANAGER
  USER
}