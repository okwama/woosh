
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SalesRepScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  password: 'password',
  countryId: 'countryId',
  region_id: 'region_id',
  region: 'region',
  role: 'role',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  photoUrl: 'photoUrl'
};

exports.Prisma.ManagerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  department: 'department'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  salesRepId: 'salesRepId',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.RegionsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  countryId: 'countryId',
  status: 'status'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  status: 'status'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category_id: 'category_id',
  category: 'category',
  description: 'description',
  currentStock: 'currentStock',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  clientId: 'clientId',
  image: 'image'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.PriceOptionScalarFieldEnum = {
  id: 'id',
  option: 'option',
  value: 'value',
  categoryId: 'categoryId'
};

exports.Prisma.StoreQuantityScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  storeId: 'storeId',
  productId: 'productId'
};

exports.Prisma.StoresScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.PurchaseScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  storeId: 'storeId',
  quantity: 'quantity',
  totalPrice: 'totalPrice',
  date: 'date'
};

exports.Prisma.PurchaseHistoryScalarFieldEnum = {
  id: 'id',
  storeId: 'storeId',
  productId: 'productId',
  previousQuantity: 'previousQuantity',
  purchaseQuantity: 'purchaseQuantity',
  newBalance: 'newBalance',
  createdAt: 'createdAt'
};

exports.Prisma.ClientsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  balance: 'balance',
  email: 'email',
  region_id: 'region_id',
  region: 'region',
  contact: 'contact',
  tax_pin: 'tax_pin',
  location: 'location',
  status: 'status',
  client_type: 'client_type',
  countryId: 'countryId'
};

exports.Prisma.RidersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contact: 'contact',
  id_number: 'id_number',
  company_id: 'company_id',
  company: 'company',
  status: 'status',
  password: 'password',
  device_id: 'device_id',
  device_name: 'device_name',
  device_status: 'device_status',
  token: 'token'
};

exports.Prisma.RidersCompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  status: 'status'
};

exports.Prisma.ManagerCheckinScalarFieldEnum = {
  id: 'id',
  managerId: 'managerId',
  clientId: 'clientId',
  date: 'date',
  checkInAt: 'checkInAt',
  checkOutAt: 'checkOutAt',
  latitude: 'latitude',
  longitude: 'longitude',
  notes: 'notes'
};

exports.Prisma.MyOrderScalarFieldEnum = {
  id: 'id',
  totalAmount: 'totalAmount',
  comment: 'comment',
  customerType: 'customerType',
  customerId: 'customerId',
  customerName: 'customerName',
  orderDate: 'orderDate',
  riderId: 'riderId',
  riderName: 'riderName',
  status: 'status',
  approvedTime: 'approvedTime',
  dispatchTime: 'dispatchTime',
  deliveryLocation: 'deliveryLocation',
  complete_latitude: 'complete_latitude',
  complete_longitude: 'complete_longitude',
  complete_address: 'complete_address',
  pickupTime: 'pickupTime',
  deliveryTime: 'deliveryTime',
  cancel_reason: 'cancel_reason',
  recepient: 'recepient',
  userId: 'userId',
  clientId: 'clientId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  quantity: 'quantity',
  priceOptionId: 'priceOptionId'
};

exports.Prisma.JourneyPlanScalarFieldEnum = {
  id: 'id',
  date: 'date',
  time: 'time',
  userId: 'userId',
  clientId: 'clientId',
  status: 'status',
  checkInTime: 'checkInTime',
  latitude: 'latitude',
  longitude: 'longitude',
  imageUrl: 'imageUrl',
  notes: 'notes',
  checkoutLatitude: 'checkoutLatitude',
  checkoutLongitude: 'checkoutLongitude',
  checkoutTime: 'checkoutTime'
};

exports.Prisma.NoticeBoardScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  clientId: 'clientId',
  createdAt: 'createdAt',
  userId: 'userId',
  journeyPlanId: 'journeyPlanId',
  type: 'type'
};

exports.Prisma.FeedbackReportScalarFieldEnum = {
  reportId: 'reportId',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.ProductReportScalarFieldEnum = {
  reportId: 'reportId',
  productName: 'productName',
  quantity: 'quantity',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.VisibilityReportScalarFieldEnum = {
  reportId: 'reportId',
  comment: 'comment',
  imageUrl: 'imageUrl',
  createdAt: 'createdAt'
};

exports.Prisma.LeaveScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  leaveType: 'leaveType',
  startDate: 'startDate',
  endDate: 'endDate',
  reason: 'reason',
  attachment: 'attachment',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ReportType = exports.$Enums.ReportType = {
  PRODUCT_AVAILABILITY: 'PRODUCT_AVAILABILITY',
  VISIBILITY_ACTIVITY: 'VISIBILITY_ACTIVITY',
  FEEDBACK: 'FEEDBACK'
};

exports.Prisma.ModelName = {
  SalesRep: 'SalesRep',
  Manager: 'Manager',
  Token: 'Token',
  Regions: 'Regions',
  Country: 'Country',
  Product: 'Product',
  Category: 'Category',
  PriceOption: 'PriceOption',
  StoreQuantity: 'StoreQuantity',
  Stores: 'Stores',
  Purchase: 'Purchase',
  PurchaseHistory: 'PurchaseHistory',
  Clients: 'Clients',
  Riders: 'Riders',
  RidersCompany: 'RidersCompany',
  ManagerCheckin: 'ManagerCheckin',
  MyOrder: 'MyOrder',
  OrderItem: 'OrderItem',
  JourneyPlan: 'JourneyPlan',
  NoticeBoard: 'NoticeBoard',
  Report: 'Report',
  FeedbackReport: 'FeedbackReport',
  ProductReport: 'ProductReport',
  VisibilityReport: 'VisibilityReport',
  Leave: 'Leave'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
