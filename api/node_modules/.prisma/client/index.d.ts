
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Manager
 * 
 */
export type Manager = $Result.DefaultSelection<Prisma.$ManagerPayload>
/**
 * Model Token
 * 
 */
export type Token = $Result.DefaultSelection<Prisma.$TokenPayload>
/**
 * Model Outlet
 * 
 */
export type Outlet = $Result.DefaultSelection<Prisma.$OutletPayload>
/**
 * Model ManagerCheckin
 * 
 */
export type ManagerCheckin = $Result.DefaultSelection<Prisma.$ManagerCheckinPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model OrderItem
 * 
 */
export type OrderItem = $Result.DefaultSelection<Prisma.$OrderItemPayload>
/**
 * Model JourneyPlan
 * 
 */
export type JourneyPlan = $Result.DefaultSelection<Prisma.$JourneyPlanPayload>
/**
 * Model NoticeBoard
 * 
 */
export type NoticeBoard = $Result.DefaultSelection<Prisma.$NoticeBoardPayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model FeedbackReport
 * 
 */
export type FeedbackReport = $Result.DefaultSelection<Prisma.$FeedbackReportPayload>
/**
 * Model ProductReport
 * 
 */
export type ProductReport = $Result.DefaultSelection<Prisma.$ProductReportPayload>
/**
 * Model VisibilityReport
 * 
 */
export type VisibilityReport = $Result.DefaultSelection<Prisma.$VisibilityReportPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Leave
 * 
 */
export type Leave = $Result.DefaultSelection<Prisma.$LeavePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ReportType: {
  PRODUCT_AVAILABILITY: 'PRODUCT_AVAILABILITY',
  VISIBILITY_ACTIVITY: 'VISIBILITY_ACTIVITY',
  FEEDBACK: 'FEEDBACK'
};

export type ReportType = (typeof ReportType)[keyof typeof ReportType]

}

export type ReportType = $Enums.ReportType

export const ReportType: typeof $Enums.ReportType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.manager`: Exposes CRUD operations for the **Manager** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Managers
    * const managers = await prisma.manager.findMany()
    * ```
    */
  get manager(): Prisma.ManagerDelegate<ExtArgs>;

  /**
   * `prisma.token`: Exposes CRUD operations for the **Token** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.token.findMany()
    * ```
    */
  get token(): Prisma.TokenDelegate<ExtArgs>;

  /**
   * `prisma.outlet`: Exposes CRUD operations for the **Outlet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Outlets
    * const outlets = await prisma.outlet.findMany()
    * ```
    */
  get outlet(): Prisma.OutletDelegate<ExtArgs>;

  /**
   * `prisma.managerCheckin`: Exposes CRUD operations for the **ManagerCheckin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ManagerCheckins
    * const managerCheckins = await prisma.managerCheckin.findMany()
    * ```
    */
  get managerCheckin(): Prisma.ManagerCheckinDelegate<ExtArgs>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs>;

  /**
   * `prisma.orderItem`: Exposes CRUD operations for the **OrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrderItems
    * const orderItems = await prisma.orderItem.findMany()
    * ```
    */
  get orderItem(): Prisma.OrderItemDelegate<ExtArgs>;

  /**
   * `prisma.journeyPlan`: Exposes CRUD operations for the **JourneyPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JourneyPlans
    * const journeyPlans = await prisma.journeyPlan.findMany()
    * ```
    */
  get journeyPlan(): Prisma.JourneyPlanDelegate<ExtArgs>;

  /**
   * `prisma.noticeBoard`: Exposes CRUD operations for the **NoticeBoard** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NoticeBoards
    * const noticeBoards = await prisma.noticeBoard.findMany()
    * ```
    */
  get noticeBoard(): Prisma.NoticeBoardDelegate<ExtArgs>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs>;

  /**
   * `prisma.feedbackReport`: Exposes CRUD operations for the **FeedbackReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeedbackReports
    * const feedbackReports = await prisma.feedbackReport.findMany()
    * ```
    */
  get feedbackReport(): Prisma.FeedbackReportDelegate<ExtArgs>;

  /**
   * `prisma.productReport`: Exposes CRUD operations for the **ProductReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductReports
    * const productReports = await prisma.productReport.findMany()
    * ```
    */
  get productReport(): Prisma.ProductReportDelegate<ExtArgs>;

  /**
   * `prisma.visibilityReport`: Exposes CRUD operations for the **VisibilityReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VisibilityReports
    * const visibilityReports = await prisma.visibilityReport.findMany()
    * ```
    */
  get visibilityReport(): Prisma.VisibilityReportDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.leave`: Exposes CRUD operations for the **Leave** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leaves
    * const leaves = await prisma.leave.findMany()
    * ```
    */
  get leave(): Prisma.LeaveDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Manager: 'Manager',
    Token: 'Token',
    Outlet: 'Outlet',
    ManagerCheckin: 'ManagerCheckin',
    Order: 'Order',
    OrderItem: 'OrderItem',
    JourneyPlan: 'JourneyPlan',
    NoticeBoard: 'NoticeBoard',
    Report: 'Report',
    FeedbackReport: 'FeedbackReport',
    ProductReport: 'ProductReport',
    VisibilityReport: 'VisibilityReport',
    Product: 'Product',
    Leave: 'Leave'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "manager" | "token" | "outlet" | "managerCheckin" | "order" | "orderItem" | "journeyPlan" | "noticeBoard" | "report" | "feedbackReport" | "productReport" | "visibilityReport" | "product" | "leave"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Manager: {
        payload: Prisma.$ManagerPayload<ExtArgs>
        fields: Prisma.ManagerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ManagerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ManagerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload>
          }
          findFirst: {
            args: Prisma.ManagerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ManagerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload>
          }
          findMany: {
            args: Prisma.ManagerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload>[]
          }
          create: {
            args: Prisma.ManagerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload>
          }
          createMany: {
            args: Prisma.ManagerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ManagerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload>
          }
          update: {
            args: Prisma.ManagerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload>
          }
          deleteMany: {
            args: Prisma.ManagerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ManagerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ManagerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerPayload>
          }
          aggregate: {
            args: Prisma.ManagerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateManager>
          }
          groupBy: {
            args: Prisma.ManagerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ManagerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ManagerCountArgs<ExtArgs>
            result: $Utils.Optional<ManagerCountAggregateOutputType> | number
          }
        }
      }
      Token: {
        payload: Prisma.$TokenPayload<ExtArgs>
        fields: Prisma.TokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findFirst: {
            args: Prisma.TokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findMany: {
            args: Prisma.TokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          create: {
            args: Prisma.TokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          createMany: {
            args: Prisma.TokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.TokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          update: {
            args: Prisma.TokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          deleteMany: {
            args: Prisma.TokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          aggregate: {
            args: Prisma.TokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateToken>
          }
          groupBy: {
            args: Prisma.TokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokenCountArgs<ExtArgs>
            result: $Utils.Optional<TokenCountAggregateOutputType> | number
          }
        }
      }
      Outlet: {
        payload: Prisma.$OutletPayload<ExtArgs>
        fields: Prisma.OutletFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OutletFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OutletFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>
          }
          findFirst: {
            args: Prisma.OutletFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OutletFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>
          }
          findMany: {
            args: Prisma.OutletFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>[]
          }
          create: {
            args: Prisma.OutletCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>
          }
          createMany: {
            args: Prisma.OutletCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OutletDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>
          }
          update: {
            args: Prisma.OutletUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>
          }
          deleteMany: {
            args: Prisma.OutletDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OutletUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OutletUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OutletPayload>
          }
          aggregate: {
            args: Prisma.OutletAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOutlet>
          }
          groupBy: {
            args: Prisma.OutletGroupByArgs<ExtArgs>
            result: $Utils.Optional<OutletGroupByOutputType>[]
          }
          count: {
            args: Prisma.OutletCountArgs<ExtArgs>
            result: $Utils.Optional<OutletCountAggregateOutputType> | number
          }
        }
      }
      ManagerCheckin: {
        payload: Prisma.$ManagerCheckinPayload<ExtArgs>
        fields: Prisma.ManagerCheckinFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ManagerCheckinFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerCheckinPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ManagerCheckinFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerCheckinPayload>
          }
          findFirst: {
            args: Prisma.ManagerCheckinFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerCheckinPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ManagerCheckinFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerCheckinPayload>
          }
          findMany: {
            args: Prisma.ManagerCheckinFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerCheckinPayload>[]
          }
          create: {
            args: Prisma.ManagerCheckinCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerCheckinPayload>
          }
          createMany: {
            args: Prisma.ManagerCheckinCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ManagerCheckinDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerCheckinPayload>
          }
          update: {
            args: Prisma.ManagerCheckinUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerCheckinPayload>
          }
          deleteMany: {
            args: Prisma.ManagerCheckinDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ManagerCheckinUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ManagerCheckinUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ManagerCheckinPayload>
          }
          aggregate: {
            args: Prisma.ManagerCheckinAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateManagerCheckin>
          }
          groupBy: {
            args: Prisma.ManagerCheckinGroupByArgs<ExtArgs>
            result: $Utils.Optional<ManagerCheckinGroupByOutputType>[]
          }
          count: {
            args: Prisma.ManagerCheckinCountArgs<ExtArgs>
            result: $Utils.Optional<ManagerCheckinCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      OrderItem: {
        payload: Prisma.$OrderItemPayload<ExtArgs>
        fields: Prisma.OrderItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findFirst: {
            args: Prisma.OrderItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          findMany: {
            args: Prisma.OrderItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>[]
          }
          create: {
            args: Prisma.OrderItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          createMany: {
            args: Prisma.OrderItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OrderItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          update: {
            args: Prisma.OrderItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          deleteMany: {
            args: Prisma.OrderItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrderItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderItemPayload>
          }
          aggregate: {
            args: Prisma.OrderItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrderItem>
          }
          groupBy: {
            args: Prisma.OrderItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderItemCountArgs<ExtArgs>
            result: $Utils.Optional<OrderItemCountAggregateOutputType> | number
          }
        }
      }
      JourneyPlan: {
        payload: Prisma.$JourneyPlanPayload<ExtArgs>
        fields: Prisma.JourneyPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JourneyPlanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JourneyPlanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPlanPayload>
          }
          findFirst: {
            args: Prisma.JourneyPlanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JourneyPlanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPlanPayload>
          }
          findMany: {
            args: Prisma.JourneyPlanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPlanPayload>[]
          }
          create: {
            args: Prisma.JourneyPlanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPlanPayload>
          }
          createMany: {
            args: Prisma.JourneyPlanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.JourneyPlanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPlanPayload>
          }
          update: {
            args: Prisma.JourneyPlanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPlanPayload>
          }
          deleteMany: {
            args: Prisma.JourneyPlanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JourneyPlanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JourneyPlanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JourneyPlanPayload>
          }
          aggregate: {
            args: Prisma.JourneyPlanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJourneyPlan>
          }
          groupBy: {
            args: Prisma.JourneyPlanGroupByArgs<ExtArgs>
            result: $Utils.Optional<JourneyPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.JourneyPlanCountArgs<ExtArgs>
            result: $Utils.Optional<JourneyPlanCountAggregateOutputType> | number
          }
        }
      }
      NoticeBoard: {
        payload: Prisma.$NoticeBoardPayload<ExtArgs>
        fields: Prisma.NoticeBoardFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoticeBoardFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeBoardPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoticeBoardFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeBoardPayload>
          }
          findFirst: {
            args: Prisma.NoticeBoardFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeBoardPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoticeBoardFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeBoardPayload>
          }
          findMany: {
            args: Prisma.NoticeBoardFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeBoardPayload>[]
          }
          create: {
            args: Prisma.NoticeBoardCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeBoardPayload>
          }
          createMany: {
            args: Prisma.NoticeBoardCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NoticeBoardDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeBoardPayload>
          }
          update: {
            args: Prisma.NoticeBoardUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeBoardPayload>
          }
          deleteMany: {
            args: Prisma.NoticeBoardDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoticeBoardUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NoticeBoardUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NoticeBoardPayload>
          }
          aggregate: {
            args: Prisma.NoticeBoardAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNoticeBoard>
          }
          groupBy: {
            args: Prisma.NoticeBoardGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoticeBoardGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoticeBoardCountArgs<ExtArgs>
            result: $Utils.Optional<NoticeBoardCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      FeedbackReport: {
        payload: Prisma.$FeedbackReportPayload<ExtArgs>
        fields: Prisma.FeedbackReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReportPayload>
          }
          findFirst: {
            args: Prisma.FeedbackReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReportPayload>
          }
          findMany: {
            args: Prisma.FeedbackReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReportPayload>[]
          }
          create: {
            args: Prisma.FeedbackReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReportPayload>
          }
          createMany: {
            args: Prisma.FeedbackReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.FeedbackReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReportPayload>
          }
          update: {
            args: Prisma.FeedbackReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReportPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FeedbackReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackReportPayload>
          }
          aggregate: {
            args: Prisma.FeedbackReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedbackReport>
          }
          groupBy: {
            args: Prisma.FeedbackReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackReportCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackReportCountAggregateOutputType> | number
          }
        }
      }
      ProductReport: {
        payload: Prisma.$ProductReportPayload<ExtArgs>
        fields: Prisma.ProductReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductReportPayload>
          }
          findFirst: {
            args: Prisma.ProductReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductReportPayload>
          }
          findMany: {
            args: Prisma.ProductReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductReportPayload>[]
          }
          create: {
            args: Prisma.ProductReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductReportPayload>
          }
          createMany: {
            args: Prisma.ProductReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductReportPayload>
          }
          update: {
            args: Prisma.ProductReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductReportPayload>
          }
          deleteMany: {
            args: Prisma.ProductReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductReportPayload>
          }
          aggregate: {
            args: Prisma.ProductReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductReport>
          }
          groupBy: {
            args: Prisma.ProductReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductReportCountArgs<ExtArgs>
            result: $Utils.Optional<ProductReportCountAggregateOutputType> | number
          }
        }
      }
      VisibilityReport: {
        payload: Prisma.$VisibilityReportPayload<ExtArgs>
        fields: Prisma.VisibilityReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VisibilityReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisibilityReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VisibilityReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisibilityReportPayload>
          }
          findFirst: {
            args: Prisma.VisibilityReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisibilityReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VisibilityReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisibilityReportPayload>
          }
          findMany: {
            args: Prisma.VisibilityReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisibilityReportPayload>[]
          }
          create: {
            args: Prisma.VisibilityReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisibilityReportPayload>
          }
          createMany: {
            args: Prisma.VisibilityReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VisibilityReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisibilityReportPayload>
          }
          update: {
            args: Prisma.VisibilityReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisibilityReportPayload>
          }
          deleteMany: {
            args: Prisma.VisibilityReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VisibilityReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VisibilityReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VisibilityReportPayload>
          }
          aggregate: {
            args: Prisma.VisibilityReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVisibilityReport>
          }
          groupBy: {
            args: Prisma.VisibilityReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<VisibilityReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.VisibilityReportCountArgs<ExtArgs>
            result: $Utils.Optional<VisibilityReportCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Leave: {
        payload: Prisma.$LeavePayload<ExtArgs>
        fields: Prisma.LeaveFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeaveFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeaveFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          findFirst: {
            args: Prisma.LeaveFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeaveFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          findMany: {
            args: Prisma.LeaveFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>[]
          }
          create: {
            args: Prisma.LeaveCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          createMany: {
            args: Prisma.LeaveCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LeaveDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          update: {
            args: Prisma.LeaveUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          deleteMany: {
            args: Prisma.LeaveDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeaveUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeaveUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeavePayload>
          }
          aggregate: {
            args: Prisma.LeaveAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeave>
          }
          groupBy: {
            args: Prisma.LeaveGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeaveGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeaveCountArgs<ExtArgs>
            result: $Utils.Optional<LeaveCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    journeyPlans: number
    orders: number
    reports: number
    tokens: number
    leaves: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    journeyPlans?: boolean | UserCountOutputTypeCountJourneyPlansArgs
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
    reports?: boolean | UserCountOutputTypeCountReportsArgs
    tokens?: boolean | UserCountOutputTypeCountTokensArgs
    leaves?: boolean | UserCountOutputTypeCountLeavesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountJourneyPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JourneyPlanWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLeavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveWhereInput
  }


  /**
   * Count Type ManagerCountOutputType
   */

  export type ManagerCountOutputType = {
    checkins: number
  }

  export type ManagerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    checkins?: boolean | ManagerCountOutputTypeCountCheckinsArgs
  }

  // Custom InputTypes
  /**
   * ManagerCountOutputType without action
   */
  export type ManagerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManagerCountOutputType
     */
    select?: ManagerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ManagerCountOutputType without action
   */
  export type ManagerCountOutputTypeCountCheckinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManagerCheckinWhereInput
  }


  /**
   * Count Type OutletCountOutputType
   */

  export type OutletCountOutputType = {
    journeyPlans: number
    orders: number
    products: number
    reports: number
    checkins: number
  }

  export type OutletCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    journeyPlans?: boolean | OutletCountOutputTypeCountJourneyPlansArgs
    orders?: boolean | OutletCountOutputTypeCountOrdersArgs
    products?: boolean | OutletCountOutputTypeCountProductsArgs
    reports?: boolean | OutletCountOutputTypeCountReportsArgs
    checkins?: boolean | OutletCountOutputTypeCountCheckinsArgs
  }

  // Custom InputTypes
  /**
   * OutletCountOutputType without action
   */
  export type OutletCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OutletCountOutputType
     */
    select?: OutletCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OutletCountOutputType without action
   */
  export type OutletCountOutputTypeCountJourneyPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JourneyPlanWhereInput
  }

  /**
   * OutletCountOutputType without action
   */
  export type OutletCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * OutletCountOutputType without action
   */
  export type OutletCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * OutletCountOutputType without action
   */
  export type OutletCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * OutletCountOutputType without action
   */
  export type OutletCountOutputTypeCountCheckinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManagerCheckinWhereInput
  }


  /**
   * Count Type OrderCountOutputType
   */

  export type OrderCountOutputType = {
    orderItems: number
    reports: number
  }

  export type OrderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orderItems?: boolean | OrderCountOutputTypeCountOrderItemsArgs
    reports?: boolean | OrderCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderCountOutputType
     */
    select?: OrderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountOrderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }

  /**
   * OrderCountOutputType without action
   */
  export type OrderCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }


  /**
   * Count Type JourneyPlanCountOutputType
   */

  export type JourneyPlanCountOutputType = {
    reports: number
  }

  export type JourneyPlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reports?: boolean | JourneyPlanCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * JourneyPlanCountOutputType without action
   */
  export type JourneyPlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyPlanCountOutputType
     */
    select?: JourneyPlanCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JourneyPlanCountOutputType without action
   */
  export type JourneyPlanCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    OrderItem: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    OrderItem?: boolean | ProductCountOutputTypeCountOrderItemArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountOrderItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phoneNumber: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
    photoUrl: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phoneNumber: string | null
    password: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
    photoUrl: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phoneNumber: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    photoUrl: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phoneNumber?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    photoUrl?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phoneNumber?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    photoUrl?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phoneNumber?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    photoUrl?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    phoneNumber: string
    password: string
    role: string
    createdAt: Date
    updatedAt: Date
    photoUrl: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phoneNumber?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    photoUrl?: boolean
    journeyPlans?: boolean | User$journeyPlansArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    tokens?: boolean | User$tokensArgs<ExtArgs>
    leaves?: boolean | User$leavesArgs<ExtArgs>
    Manager?: boolean | User$ManagerArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phoneNumber?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    photoUrl?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    journeyPlans?: boolean | User$journeyPlansArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    tokens?: boolean | User$tokensArgs<ExtArgs>
    leaves?: boolean | User$leavesArgs<ExtArgs>
    Manager?: boolean | User$ManagerArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      journeyPlans: Prisma.$JourneyPlanPayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
      tokens: Prisma.$TokenPayload<ExtArgs>[]
      leaves: Prisma.$LeavePayload<ExtArgs>[]
      Manager: Prisma.$ManagerPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      phoneNumber: string
      password: string
      role: string
      createdAt: Date
      updatedAt: Date
      photoUrl: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    journeyPlans<T extends User$journeyPlansArgs<ExtArgs> = {}>(args?: Subset<T, User$journeyPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JourneyPlanPayload<ExtArgs>, T, "findMany"> | Null>
    orders<T extends User$ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany"> | Null>
    reports<T extends User$reportsArgs<ExtArgs> = {}>(args?: Subset<T, User$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany"> | Null>
    tokens<T extends User$tokensArgs<ExtArgs> = {}>(args?: Subset<T, User$tokensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findMany"> | Null>
    leaves<T extends User$leavesArgs<ExtArgs> = {}>(args?: Subset<T, User$leavesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findMany"> | Null>
    Manager<T extends User$ManagerArgs<ExtArgs> = {}>(args?: Subset<T, User$ManagerArgs<ExtArgs>>): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly photoUrl: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.journeyPlans
   */
  export type User$journeyPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyPlan
     */
    select?: JourneyPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyPlanInclude<ExtArgs> | null
    where?: JourneyPlanWhereInput
    orderBy?: JourneyPlanOrderByWithRelationInput | JourneyPlanOrderByWithRelationInput[]
    cursor?: JourneyPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JourneyPlanScalarFieldEnum | JourneyPlanScalarFieldEnum[]
  }

  /**
   * User.orders
   */
  export type User$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User.reports
   */
  export type User$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * User.tokens
   */
  export type User$tokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    cursor?: TokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * User.leaves
   */
  export type User$leavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    where?: LeaveWhereInput
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    cursor?: LeaveWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeaveScalarFieldEnum | LeaveScalarFieldEnum[]
  }

  /**
   * User.Manager
   */
  export type User$ManagerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerInclude<ExtArgs> | null
    where?: ManagerWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Manager
   */

  export type AggregateManager = {
    _count: ManagerCountAggregateOutputType | null
    _avg: ManagerAvgAggregateOutputType | null
    _sum: ManagerSumAggregateOutputType | null
    _min: ManagerMinAggregateOutputType | null
    _max: ManagerMaxAggregateOutputType | null
  }

  export type ManagerAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ManagerSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ManagerMinAggregateOutputType = {
    id: number | null
    userId: number | null
    department: string | null
  }

  export type ManagerMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    department: string | null
  }

  export type ManagerCountAggregateOutputType = {
    id: number
    userId: number
    department: number
    _all: number
  }


  export type ManagerAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ManagerSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ManagerMinAggregateInputType = {
    id?: true
    userId?: true
    department?: true
  }

  export type ManagerMaxAggregateInputType = {
    id?: true
    userId?: true
    department?: true
  }

  export type ManagerCountAggregateInputType = {
    id?: true
    userId?: true
    department?: true
    _all?: true
  }

  export type ManagerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Manager to aggregate.
     */
    where?: ManagerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Managers to fetch.
     */
    orderBy?: ManagerOrderByWithRelationInput | ManagerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ManagerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Managers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Managers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Managers
    **/
    _count?: true | ManagerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ManagerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ManagerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ManagerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ManagerMaxAggregateInputType
  }

  export type GetManagerAggregateType<T extends ManagerAggregateArgs> = {
        [P in keyof T & keyof AggregateManager]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateManager[P]>
      : GetScalarType<T[P], AggregateManager[P]>
  }




  export type ManagerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManagerWhereInput
    orderBy?: ManagerOrderByWithAggregationInput | ManagerOrderByWithAggregationInput[]
    by: ManagerScalarFieldEnum[] | ManagerScalarFieldEnum
    having?: ManagerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ManagerCountAggregateInputType | true
    _avg?: ManagerAvgAggregateInputType
    _sum?: ManagerSumAggregateInputType
    _min?: ManagerMinAggregateInputType
    _max?: ManagerMaxAggregateInputType
  }

  export type ManagerGroupByOutputType = {
    id: number
    userId: number
    department: string | null
    _count: ManagerCountAggregateOutputType | null
    _avg: ManagerAvgAggregateOutputType | null
    _sum: ManagerSumAggregateOutputType | null
    _min: ManagerMinAggregateOutputType | null
    _max: ManagerMaxAggregateOutputType | null
  }

  type GetManagerGroupByPayload<T extends ManagerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ManagerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ManagerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ManagerGroupByOutputType[P]>
            : GetScalarType<T[P], ManagerGroupByOutputType[P]>
        }
      >
    >


  export type ManagerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    department?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    checkins?: boolean | Manager$checkinsArgs<ExtArgs>
    _count?: boolean | ManagerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["manager"]>


  export type ManagerSelectScalar = {
    id?: boolean
    userId?: boolean
    department?: boolean
  }

  export type ManagerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    checkins?: boolean | Manager$checkinsArgs<ExtArgs>
    _count?: boolean | ManagerCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ManagerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Manager"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      checkins: Prisma.$ManagerCheckinPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      department: string | null
    }, ExtArgs["result"]["manager"]>
    composites: {}
  }

  type ManagerGetPayload<S extends boolean | null | undefined | ManagerDefaultArgs> = $Result.GetResult<Prisma.$ManagerPayload, S>

  type ManagerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ManagerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ManagerCountAggregateInputType | true
    }

  export interface ManagerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Manager'], meta: { name: 'Manager' } }
    /**
     * Find zero or one Manager that matches the filter.
     * @param {ManagerFindUniqueArgs} args - Arguments to find a Manager
     * @example
     * // Get one Manager
     * const manager = await prisma.manager.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ManagerFindUniqueArgs>(args: SelectSubset<T, ManagerFindUniqueArgs<ExtArgs>>): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Manager that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ManagerFindUniqueOrThrowArgs} args - Arguments to find a Manager
     * @example
     * // Get one Manager
     * const manager = await prisma.manager.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ManagerFindUniqueOrThrowArgs>(args: SelectSubset<T, ManagerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Manager that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerFindFirstArgs} args - Arguments to find a Manager
     * @example
     * // Get one Manager
     * const manager = await prisma.manager.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ManagerFindFirstArgs>(args?: SelectSubset<T, ManagerFindFirstArgs<ExtArgs>>): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Manager that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerFindFirstOrThrowArgs} args - Arguments to find a Manager
     * @example
     * // Get one Manager
     * const manager = await prisma.manager.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ManagerFindFirstOrThrowArgs>(args?: SelectSubset<T, ManagerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Managers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Managers
     * const managers = await prisma.manager.findMany()
     * 
     * // Get first 10 Managers
     * const managers = await prisma.manager.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const managerWithIdOnly = await prisma.manager.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ManagerFindManyArgs>(args?: SelectSubset<T, ManagerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Manager.
     * @param {ManagerCreateArgs} args - Arguments to create a Manager.
     * @example
     * // Create one Manager
     * const Manager = await prisma.manager.create({
     *   data: {
     *     // ... data to create a Manager
     *   }
     * })
     * 
     */
    create<T extends ManagerCreateArgs>(args: SelectSubset<T, ManagerCreateArgs<ExtArgs>>): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Managers.
     * @param {ManagerCreateManyArgs} args - Arguments to create many Managers.
     * @example
     * // Create many Managers
     * const manager = await prisma.manager.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ManagerCreateManyArgs>(args?: SelectSubset<T, ManagerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Manager.
     * @param {ManagerDeleteArgs} args - Arguments to delete one Manager.
     * @example
     * // Delete one Manager
     * const Manager = await prisma.manager.delete({
     *   where: {
     *     // ... filter to delete one Manager
     *   }
     * })
     * 
     */
    delete<T extends ManagerDeleteArgs>(args: SelectSubset<T, ManagerDeleteArgs<ExtArgs>>): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Manager.
     * @param {ManagerUpdateArgs} args - Arguments to update one Manager.
     * @example
     * // Update one Manager
     * const manager = await prisma.manager.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ManagerUpdateArgs>(args: SelectSubset<T, ManagerUpdateArgs<ExtArgs>>): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Managers.
     * @param {ManagerDeleteManyArgs} args - Arguments to filter Managers to delete.
     * @example
     * // Delete a few Managers
     * const { count } = await prisma.manager.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ManagerDeleteManyArgs>(args?: SelectSubset<T, ManagerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Managers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Managers
     * const manager = await prisma.manager.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ManagerUpdateManyArgs>(args: SelectSubset<T, ManagerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Manager.
     * @param {ManagerUpsertArgs} args - Arguments to update or create a Manager.
     * @example
     * // Update or create a Manager
     * const manager = await prisma.manager.upsert({
     *   create: {
     *     // ... data to create a Manager
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Manager we want to update
     *   }
     * })
     */
    upsert<T extends ManagerUpsertArgs>(args: SelectSubset<T, ManagerUpsertArgs<ExtArgs>>): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Managers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerCountArgs} args - Arguments to filter Managers to count.
     * @example
     * // Count the number of Managers
     * const count = await prisma.manager.count({
     *   where: {
     *     // ... the filter for the Managers we want to count
     *   }
     * })
    **/
    count<T extends ManagerCountArgs>(
      args?: Subset<T, ManagerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ManagerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Manager.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ManagerAggregateArgs>(args: Subset<T, ManagerAggregateArgs>): Prisma.PrismaPromise<GetManagerAggregateType<T>>

    /**
     * Group by Manager.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ManagerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ManagerGroupByArgs['orderBy'] }
        : { orderBy?: ManagerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ManagerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManagerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Manager model
   */
  readonly fields: ManagerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Manager.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ManagerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    checkins<T extends Manager$checkinsArgs<ExtArgs> = {}>(args?: Subset<T, Manager$checkinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManagerCheckinPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Manager model
   */ 
  interface ManagerFieldRefs {
    readonly id: FieldRef<"Manager", 'Int'>
    readonly userId: FieldRef<"Manager", 'Int'>
    readonly department: FieldRef<"Manager", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Manager findUnique
   */
  export type ManagerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerInclude<ExtArgs> | null
    /**
     * Filter, which Manager to fetch.
     */
    where: ManagerWhereUniqueInput
  }

  /**
   * Manager findUniqueOrThrow
   */
  export type ManagerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerInclude<ExtArgs> | null
    /**
     * Filter, which Manager to fetch.
     */
    where: ManagerWhereUniqueInput
  }

  /**
   * Manager findFirst
   */
  export type ManagerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerInclude<ExtArgs> | null
    /**
     * Filter, which Manager to fetch.
     */
    where?: ManagerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Managers to fetch.
     */
    orderBy?: ManagerOrderByWithRelationInput | ManagerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Managers.
     */
    cursor?: ManagerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Managers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Managers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Managers.
     */
    distinct?: ManagerScalarFieldEnum | ManagerScalarFieldEnum[]
  }

  /**
   * Manager findFirstOrThrow
   */
  export type ManagerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerInclude<ExtArgs> | null
    /**
     * Filter, which Manager to fetch.
     */
    where?: ManagerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Managers to fetch.
     */
    orderBy?: ManagerOrderByWithRelationInput | ManagerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Managers.
     */
    cursor?: ManagerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Managers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Managers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Managers.
     */
    distinct?: ManagerScalarFieldEnum | ManagerScalarFieldEnum[]
  }

  /**
   * Manager findMany
   */
  export type ManagerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerInclude<ExtArgs> | null
    /**
     * Filter, which Managers to fetch.
     */
    where?: ManagerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Managers to fetch.
     */
    orderBy?: ManagerOrderByWithRelationInput | ManagerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Managers.
     */
    cursor?: ManagerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Managers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Managers.
     */
    skip?: number
    distinct?: ManagerScalarFieldEnum | ManagerScalarFieldEnum[]
  }

  /**
   * Manager create
   */
  export type ManagerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerInclude<ExtArgs> | null
    /**
     * The data needed to create a Manager.
     */
    data: XOR<ManagerCreateInput, ManagerUncheckedCreateInput>
  }

  /**
   * Manager createMany
   */
  export type ManagerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Managers.
     */
    data: ManagerCreateManyInput | ManagerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Manager update
   */
  export type ManagerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerInclude<ExtArgs> | null
    /**
     * The data needed to update a Manager.
     */
    data: XOR<ManagerUpdateInput, ManagerUncheckedUpdateInput>
    /**
     * Choose, which Manager to update.
     */
    where: ManagerWhereUniqueInput
  }

  /**
   * Manager updateMany
   */
  export type ManagerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Managers.
     */
    data: XOR<ManagerUpdateManyMutationInput, ManagerUncheckedUpdateManyInput>
    /**
     * Filter which Managers to update
     */
    where?: ManagerWhereInput
  }

  /**
   * Manager upsert
   */
  export type ManagerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerInclude<ExtArgs> | null
    /**
     * The filter to search for the Manager to update in case it exists.
     */
    where: ManagerWhereUniqueInput
    /**
     * In case the Manager found by the `where` argument doesn't exist, create a new Manager with this data.
     */
    create: XOR<ManagerCreateInput, ManagerUncheckedCreateInput>
    /**
     * In case the Manager was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ManagerUpdateInput, ManagerUncheckedUpdateInput>
  }

  /**
   * Manager delete
   */
  export type ManagerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerInclude<ExtArgs> | null
    /**
     * Filter which Manager to delete.
     */
    where: ManagerWhereUniqueInput
  }

  /**
   * Manager deleteMany
   */
  export type ManagerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Managers to delete
     */
    where?: ManagerWhereInput
  }

  /**
   * Manager.checkins
   */
  export type Manager$checkinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManagerCheckin
     */
    select?: ManagerCheckinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerCheckinInclude<ExtArgs> | null
    where?: ManagerCheckinWhereInput
    orderBy?: ManagerCheckinOrderByWithRelationInput | ManagerCheckinOrderByWithRelationInput[]
    cursor?: ManagerCheckinWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ManagerCheckinScalarFieldEnum | ManagerCheckinScalarFieldEnum[]
  }

  /**
   * Manager without action
   */
  export type ManagerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Manager
     */
    select?: ManagerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerInclude<ExtArgs> | null
  }


  /**
   * Model Token
   */

  export type AggregateToken = {
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  export type TokenAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type TokenSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type TokenMinAggregateOutputType = {
    id: number | null
    token: string | null
    userId: number | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type TokenMaxAggregateOutputType = {
    id: number | null
    token: string | null
    userId: number | null
    createdAt: Date | null
    expiresAt: Date | null
  }

  export type TokenCountAggregateOutputType = {
    id: number
    token: number
    userId: number
    createdAt: number
    expiresAt: number
    _all: number
  }


  export type TokenAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TokenSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TokenMinAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    createdAt?: true
    expiresAt?: true
  }

  export type TokenMaxAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    createdAt?: true
    expiresAt?: true
  }

  export type TokenCountAggregateInputType = {
    id?: true
    token?: true
    userId?: true
    createdAt?: true
    expiresAt?: true
    _all?: true
  }

  export type TokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Token to aggregate.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenMaxAggregateInputType
  }

  export type GetTokenAggregateType<T extends TokenAggregateArgs> = {
        [P in keyof T & keyof AggregateToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToken[P]>
      : GetScalarType<T[P], AggregateToken[P]>
  }




  export type TokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithAggregationInput | TokenOrderByWithAggregationInput[]
    by: TokenScalarFieldEnum[] | TokenScalarFieldEnum
    having?: TokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenCountAggregateInputType | true
    _avg?: TokenAvgAggregateInputType
    _sum?: TokenSumAggregateInputType
    _min?: TokenMinAggregateInputType
    _max?: TokenMaxAggregateInputType
  }

  export type TokenGroupByOutputType = {
    id: number
    token: string
    userId: number
    createdAt: Date
    expiresAt: Date
    _count: TokenCountAggregateOutputType | null
    _avg: TokenAvgAggregateOutputType | null
    _sum: TokenSumAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  type GetTokenGroupByPayload<T extends TokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokenGroupByOutputType[P]>
            : GetScalarType<T[P], TokenGroupByOutputType[P]>
        }
      >
    >


  export type TokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    userId?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["token"]>


  export type TokenSelectScalar = {
    id?: boolean
    token?: boolean
    userId?: boolean
    createdAt?: boolean
    expiresAt?: boolean
  }

  export type TokenInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Token"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      token: string
      userId: number
      createdAt: Date
      expiresAt: Date
    }, ExtArgs["result"]["token"]>
    composites: {}
  }

  type TokenGetPayload<S extends boolean | null | undefined | TokenDefaultArgs> = $Result.GetResult<Prisma.$TokenPayload, S>

  type TokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TokenCountAggregateInputType | true
    }

  export interface TokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Token'], meta: { name: 'Token' } }
    /**
     * Find zero or one Token that matches the filter.
     * @param {TokenFindUniqueArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TokenFindUniqueArgs>(args: SelectSubset<T, TokenFindUniqueArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Token that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TokenFindUniqueOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TokenFindUniqueOrThrowArgs>(args: SelectSubset<T, TokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Token that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TokenFindFirstArgs>(args?: SelectSubset<T, TokenFindFirstArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Token that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TokenFindFirstOrThrowArgs>(args?: SelectSubset<T, TokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.token.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.token.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokenWithIdOnly = await prisma.token.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TokenFindManyArgs>(args?: SelectSubset<T, TokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Token.
     * @param {TokenCreateArgs} args - Arguments to create a Token.
     * @example
     * // Create one Token
     * const Token = await prisma.token.create({
     *   data: {
     *     // ... data to create a Token
     *   }
     * })
     * 
     */
    create<T extends TokenCreateArgs>(args: SelectSubset<T, TokenCreateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tokens.
     * @param {TokenCreateManyArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TokenCreateManyArgs>(args?: SelectSubset<T, TokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Token.
     * @param {TokenDeleteArgs} args - Arguments to delete one Token.
     * @example
     * // Delete one Token
     * const Token = await prisma.token.delete({
     *   where: {
     *     // ... filter to delete one Token
     *   }
     * })
     * 
     */
    delete<T extends TokenDeleteArgs>(args: SelectSubset<T, TokenDeleteArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Token.
     * @param {TokenUpdateArgs} args - Arguments to update one Token.
     * @example
     * // Update one Token
     * const token = await prisma.token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TokenUpdateArgs>(args: SelectSubset<T, TokenUpdateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tokens.
     * @param {TokenDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TokenDeleteManyArgs>(args?: SelectSubset<T, TokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TokenUpdateManyArgs>(args: SelectSubset<T, TokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Token.
     * @param {TokenUpsertArgs} args - Arguments to update or create a Token.
     * @example
     * // Update or create a Token
     * const token = await prisma.token.upsert({
     *   create: {
     *     // ... data to create a Token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Token we want to update
     *   }
     * })
     */
    upsert<T extends TokenUpsertArgs>(args: SelectSubset<T, TokenUpsertArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.token.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokenCountArgs>(
      args?: Subset<T, TokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenAggregateArgs>(args: Subset<T, TokenAggregateArgs>): Prisma.PrismaPromise<GetTokenAggregateType<T>>

    /**
     * Group by Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenGroupByArgs['orderBy'] }
        : { orderBy?: TokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Token model
   */
  readonly fields: TokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Token model
   */ 
  interface TokenFieldRefs {
    readonly id: FieldRef<"Token", 'Int'>
    readonly token: FieldRef<"Token", 'String'>
    readonly userId: FieldRef<"Token", 'Int'>
    readonly createdAt: FieldRef<"Token", 'DateTime'>
    readonly expiresAt: FieldRef<"Token", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Token findUnique
   */
  export type TokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findUniqueOrThrow
   */
  export type TokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findFirst
   */
  export type TokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findFirstOrThrow
   */
  export type TokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findMany
   */
  export type TokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token create
   */
  export type TokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The data needed to create a Token.
     */
    data: XOR<TokenCreateInput, TokenUncheckedCreateInput>
  }

  /**
   * Token createMany
   */
  export type TokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Token update
   */
  export type TokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The data needed to update a Token.
     */
    data: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
    /**
     * Choose, which Token to update.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token updateMany
   */
  export type TokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokenWhereInput
  }

  /**
   * Token upsert
   */
  export type TokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * The filter to search for the Token to update in case it exists.
     */
    where: TokenWhereUniqueInput
    /**
     * In case the Token found by the `where` argument doesn't exist, create a new Token with this data.
     */
    create: XOR<TokenCreateInput, TokenUncheckedCreateInput>
    /**
     * In case the Token was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
  }

  /**
   * Token delete
   */
  export type TokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
    /**
     * Filter which Token to delete.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token deleteMany
   */
  export type TokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to delete
     */
    where?: TokenWhereInput
  }

  /**
   * Token without action
   */
  export type TokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TokenInclude<ExtArgs> | null
  }


  /**
   * Model Outlet
   */

  export type AggregateOutlet = {
    _count: OutletCountAggregateOutputType | null
    _avg: OutletAvgAggregateOutputType | null
    _sum: OutletSumAggregateOutputType | null
    _min: OutletMinAggregateOutputType | null
    _max: OutletMaxAggregateOutputType | null
  }

  export type OutletAvgAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
  }

  export type OutletSumAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
  }

  export type OutletMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    latitude: number | null
    longitude: number | null
    balance: string | null
    email: string | null
    kraPin: string | null
    phone: string | null
  }

  export type OutletMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    latitude: number | null
    longitude: number | null
    balance: string | null
    email: string | null
    kraPin: string | null
    phone: string | null
  }

  export type OutletCountAggregateOutputType = {
    id: number
    name: number
    address: number
    latitude: number
    longitude: number
    balance: number
    email: number
    kraPin: number
    phone: number
    _all: number
  }


  export type OutletAvgAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
  }

  export type OutletSumAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
  }

  export type OutletMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    latitude?: true
    longitude?: true
    balance?: true
    email?: true
    kraPin?: true
    phone?: true
  }

  export type OutletMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    latitude?: true
    longitude?: true
    balance?: true
    email?: true
    kraPin?: true
    phone?: true
  }

  export type OutletCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    latitude?: true
    longitude?: true
    balance?: true
    email?: true
    kraPin?: true
    phone?: true
    _all?: true
  }

  export type OutletAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Outlet to aggregate.
     */
    where?: OutletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Outlets to fetch.
     */
    orderBy?: OutletOrderByWithRelationInput | OutletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OutletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Outlets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Outlets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Outlets
    **/
    _count?: true | OutletCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OutletAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OutletSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OutletMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OutletMaxAggregateInputType
  }

  export type GetOutletAggregateType<T extends OutletAggregateArgs> = {
        [P in keyof T & keyof AggregateOutlet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOutlet[P]>
      : GetScalarType<T[P], AggregateOutlet[P]>
  }




  export type OutletGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OutletWhereInput
    orderBy?: OutletOrderByWithAggregationInput | OutletOrderByWithAggregationInput[]
    by: OutletScalarFieldEnum[] | OutletScalarFieldEnum
    having?: OutletScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OutletCountAggregateInputType | true
    _avg?: OutletAvgAggregateInputType
    _sum?: OutletSumAggregateInputType
    _min?: OutletMinAggregateInputType
    _max?: OutletMaxAggregateInputType
  }

  export type OutletGroupByOutputType = {
    id: number
    name: string
    address: string
    latitude: number | null
    longitude: number | null
    balance: string | null
    email: string | null
    kraPin: string | null
    phone: string | null
    _count: OutletCountAggregateOutputType | null
    _avg: OutletAvgAggregateOutputType | null
    _sum: OutletSumAggregateOutputType | null
    _min: OutletMinAggregateOutputType | null
    _max: OutletMaxAggregateOutputType | null
  }

  type GetOutletGroupByPayload<T extends OutletGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OutletGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OutletGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OutletGroupByOutputType[P]>
            : GetScalarType<T[P], OutletGroupByOutputType[P]>
        }
      >
    >


  export type OutletSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    balance?: boolean
    email?: boolean
    kraPin?: boolean
    phone?: boolean
    journeyPlans?: boolean | Outlet$journeyPlansArgs<ExtArgs>
    orders?: boolean | Outlet$ordersArgs<ExtArgs>
    products?: boolean | Outlet$productsArgs<ExtArgs>
    reports?: boolean | Outlet$reportsArgs<ExtArgs>
    checkins?: boolean | Outlet$checkinsArgs<ExtArgs>
    _count?: boolean | OutletCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["outlet"]>


  export type OutletSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    balance?: boolean
    email?: boolean
    kraPin?: boolean
    phone?: boolean
  }

  export type OutletInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    journeyPlans?: boolean | Outlet$journeyPlansArgs<ExtArgs>
    orders?: boolean | Outlet$ordersArgs<ExtArgs>
    products?: boolean | Outlet$productsArgs<ExtArgs>
    reports?: boolean | Outlet$reportsArgs<ExtArgs>
    checkins?: boolean | Outlet$checkinsArgs<ExtArgs>
    _count?: boolean | OutletCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OutletPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Outlet"
    objects: {
      journeyPlans: Prisma.$JourneyPlanPayload<ExtArgs>[]
      orders: Prisma.$OrderPayload<ExtArgs>[]
      products: Prisma.$ProductPayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
      checkins: Prisma.$ManagerCheckinPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      address: string
      latitude: number | null
      longitude: number | null
      balance: string | null
      email: string | null
      kraPin: string | null
      phone: string | null
    }, ExtArgs["result"]["outlet"]>
    composites: {}
  }

  type OutletGetPayload<S extends boolean | null | undefined | OutletDefaultArgs> = $Result.GetResult<Prisma.$OutletPayload, S>

  type OutletCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OutletFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OutletCountAggregateInputType | true
    }

  export interface OutletDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Outlet'], meta: { name: 'Outlet' } }
    /**
     * Find zero or one Outlet that matches the filter.
     * @param {OutletFindUniqueArgs} args - Arguments to find a Outlet
     * @example
     * // Get one Outlet
     * const outlet = await prisma.outlet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OutletFindUniqueArgs>(args: SelectSubset<T, OutletFindUniqueArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Outlet that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OutletFindUniqueOrThrowArgs} args - Arguments to find a Outlet
     * @example
     * // Get one Outlet
     * const outlet = await prisma.outlet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OutletFindUniqueOrThrowArgs>(args: SelectSubset<T, OutletFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Outlet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutletFindFirstArgs} args - Arguments to find a Outlet
     * @example
     * // Get one Outlet
     * const outlet = await prisma.outlet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OutletFindFirstArgs>(args?: SelectSubset<T, OutletFindFirstArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Outlet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutletFindFirstOrThrowArgs} args - Arguments to find a Outlet
     * @example
     * // Get one Outlet
     * const outlet = await prisma.outlet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OutletFindFirstOrThrowArgs>(args?: SelectSubset<T, OutletFindFirstOrThrowArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Outlets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutletFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Outlets
     * const outlets = await prisma.outlet.findMany()
     * 
     * // Get first 10 Outlets
     * const outlets = await prisma.outlet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const outletWithIdOnly = await prisma.outlet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OutletFindManyArgs>(args?: SelectSubset<T, OutletFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Outlet.
     * @param {OutletCreateArgs} args - Arguments to create a Outlet.
     * @example
     * // Create one Outlet
     * const Outlet = await prisma.outlet.create({
     *   data: {
     *     // ... data to create a Outlet
     *   }
     * })
     * 
     */
    create<T extends OutletCreateArgs>(args: SelectSubset<T, OutletCreateArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Outlets.
     * @param {OutletCreateManyArgs} args - Arguments to create many Outlets.
     * @example
     * // Create many Outlets
     * const outlet = await prisma.outlet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OutletCreateManyArgs>(args?: SelectSubset<T, OutletCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Outlet.
     * @param {OutletDeleteArgs} args - Arguments to delete one Outlet.
     * @example
     * // Delete one Outlet
     * const Outlet = await prisma.outlet.delete({
     *   where: {
     *     // ... filter to delete one Outlet
     *   }
     * })
     * 
     */
    delete<T extends OutletDeleteArgs>(args: SelectSubset<T, OutletDeleteArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Outlet.
     * @param {OutletUpdateArgs} args - Arguments to update one Outlet.
     * @example
     * // Update one Outlet
     * const outlet = await prisma.outlet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OutletUpdateArgs>(args: SelectSubset<T, OutletUpdateArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Outlets.
     * @param {OutletDeleteManyArgs} args - Arguments to filter Outlets to delete.
     * @example
     * // Delete a few Outlets
     * const { count } = await prisma.outlet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OutletDeleteManyArgs>(args?: SelectSubset<T, OutletDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Outlets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutletUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Outlets
     * const outlet = await prisma.outlet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OutletUpdateManyArgs>(args: SelectSubset<T, OutletUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Outlet.
     * @param {OutletUpsertArgs} args - Arguments to update or create a Outlet.
     * @example
     * // Update or create a Outlet
     * const outlet = await prisma.outlet.upsert({
     *   create: {
     *     // ... data to create a Outlet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Outlet we want to update
     *   }
     * })
     */
    upsert<T extends OutletUpsertArgs>(args: SelectSubset<T, OutletUpsertArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Outlets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutletCountArgs} args - Arguments to filter Outlets to count.
     * @example
     * // Count the number of Outlets
     * const count = await prisma.outlet.count({
     *   where: {
     *     // ... the filter for the Outlets we want to count
     *   }
     * })
    **/
    count<T extends OutletCountArgs>(
      args?: Subset<T, OutletCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OutletCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Outlet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OutletAggregateArgs>(args: Subset<T, OutletAggregateArgs>): Prisma.PrismaPromise<GetOutletAggregateType<T>>

    /**
     * Group by Outlet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OutletGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OutletGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OutletGroupByArgs['orderBy'] }
        : { orderBy?: OutletGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OutletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOutletGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Outlet model
   */
  readonly fields: OutletFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Outlet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OutletClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    journeyPlans<T extends Outlet$journeyPlansArgs<ExtArgs> = {}>(args?: Subset<T, Outlet$journeyPlansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JourneyPlanPayload<ExtArgs>, T, "findMany"> | Null>
    orders<T extends Outlet$ordersArgs<ExtArgs> = {}>(args?: Subset<T, Outlet$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany"> | Null>
    products<T extends Outlet$productsArgs<ExtArgs> = {}>(args?: Subset<T, Outlet$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany"> | Null>
    reports<T extends Outlet$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Outlet$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany"> | Null>
    checkins<T extends Outlet$checkinsArgs<ExtArgs> = {}>(args?: Subset<T, Outlet$checkinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManagerCheckinPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Outlet model
   */ 
  interface OutletFieldRefs {
    readonly id: FieldRef<"Outlet", 'Int'>
    readonly name: FieldRef<"Outlet", 'String'>
    readonly address: FieldRef<"Outlet", 'String'>
    readonly latitude: FieldRef<"Outlet", 'Float'>
    readonly longitude: FieldRef<"Outlet", 'Float'>
    readonly balance: FieldRef<"Outlet", 'String'>
    readonly email: FieldRef<"Outlet", 'String'>
    readonly kraPin: FieldRef<"Outlet", 'String'>
    readonly phone: FieldRef<"Outlet", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Outlet findUnique
   */
  export type OutletFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * Filter, which Outlet to fetch.
     */
    where: OutletWhereUniqueInput
  }

  /**
   * Outlet findUniqueOrThrow
   */
  export type OutletFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * Filter, which Outlet to fetch.
     */
    where: OutletWhereUniqueInput
  }

  /**
   * Outlet findFirst
   */
  export type OutletFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * Filter, which Outlet to fetch.
     */
    where?: OutletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Outlets to fetch.
     */
    orderBy?: OutletOrderByWithRelationInput | OutletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Outlets.
     */
    cursor?: OutletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Outlets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Outlets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Outlets.
     */
    distinct?: OutletScalarFieldEnum | OutletScalarFieldEnum[]
  }

  /**
   * Outlet findFirstOrThrow
   */
  export type OutletFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * Filter, which Outlet to fetch.
     */
    where?: OutletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Outlets to fetch.
     */
    orderBy?: OutletOrderByWithRelationInput | OutletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Outlets.
     */
    cursor?: OutletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Outlets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Outlets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Outlets.
     */
    distinct?: OutletScalarFieldEnum | OutletScalarFieldEnum[]
  }

  /**
   * Outlet findMany
   */
  export type OutletFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * Filter, which Outlets to fetch.
     */
    where?: OutletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Outlets to fetch.
     */
    orderBy?: OutletOrderByWithRelationInput | OutletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Outlets.
     */
    cursor?: OutletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Outlets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Outlets.
     */
    skip?: number
    distinct?: OutletScalarFieldEnum | OutletScalarFieldEnum[]
  }

  /**
   * Outlet create
   */
  export type OutletCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * The data needed to create a Outlet.
     */
    data: XOR<OutletCreateInput, OutletUncheckedCreateInput>
  }

  /**
   * Outlet createMany
   */
  export type OutletCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Outlets.
     */
    data: OutletCreateManyInput | OutletCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Outlet update
   */
  export type OutletUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * The data needed to update a Outlet.
     */
    data: XOR<OutletUpdateInput, OutletUncheckedUpdateInput>
    /**
     * Choose, which Outlet to update.
     */
    where: OutletWhereUniqueInput
  }

  /**
   * Outlet updateMany
   */
  export type OutletUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Outlets.
     */
    data: XOR<OutletUpdateManyMutationInput, OutletUncheckedUpdateManyInput>
    /**
     * Filter which Outlets to update
     */
    where?: OutletWhereInput
  }

  /**
   * Outlet upsert
   */
  export type OutletUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * The filter to search for the Outlet to update in case it exists.
     */
    where: OutletWhereUniqueInput
    /**
     * In case the Outlet found by the `where` argument doesn't exist, create a new Outlet with this data.
     */
    create: XOR<OutletCreateInput, OutletUncheckedCreateInput>
    /**
     * In case the Outlet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OutletUpdateInput, OutletUncheckedUpdateInput>
  }

  /**
   * Outlet delete
   */
  export type OutletDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
    /**
     * Filter which Outlet to delete.
     */
    where: OutletWhereUniqueInput
  }

  /**
   * Outlet deleteMany
   */
  export type OutletDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Outlets to delete
     */
    where?: OutletWhereInput
  }

  /**
   * Outlet.journeyPlans
   */
  export type Outlet$journeyPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyPlan
     */
    select?: JourneyPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyPlanInclude<ExtArgs> | null
    where?: JourneyPlanWhereInput
    orderBy?: JourneyPlanOrderByWithRelationInput | JourneyPlanOrderByWithRelationInput[]
    cursor?: JourneyPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JourneyPlanScalarFieldEnum | JourneyPlanScalarFieldEnum[]
  }

  /**
   * Outlet.orders
   */
  export type Outlet$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Outlet.products
   */
  export type Outlet$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Outlet.reports
   */
  export type Outlet$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Outlet.checkins
   */
  export type Outlet$checkinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManagerCheckin
     */
    select?: ManagerCheckinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerCheckinInclude<ExtArgs> | null
    where?: ManagerCheckinWhereInput
    orderBy?: ManagerCheckinOrderByWithRelationInput | ManagerCheckinOrderByWithRelationInput[]
    cursor?: ManagerCheckinWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ManagerCheckinScalarFieldEnum | ManagerCheckinScalarFieldEnum[]
  }

  /**
   * Outlet without action
   */
  export type OutletDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Outlet
     */
    select?: OutletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OutletInclude<ExtArgs> | null
  }


  /**
   * Model ManagerCheckin
   */

  export type AggregateManagerCheckin = {
    _count: ManagerCheckinCountAggregateOutputType | null
    _avg: ManagerCheckinAvgAggregateOutputType | null
    _sum: ManagerCheckinSumAggregateOutputType | null
    _min: ManagerCheckinMinAggregateOutputType | null
    _max: ManagerCheckinMaxAggregateOutputType | null
  }

  export type ManagerCheckinAvgAggregateOutputType = {
    id: number | null
    managerId: number | null
    outletId: number | null
    latitude: number | null
    longitude: number | null
  }

  export type ManagerCheckinSumAggregateOutputType = {
    id: number | null
    managerId: number | null
    outletId: number | null
    latitude: number | null
    longitude: number | null
  }

  export type ManagerCheckinMinAggregateOutputType = {
    id: number | null
    managerId: number | null
    outletId: number | null
    date: Date | null
    checkInAt: Date | null
    checkOutAt: Date | null
    latitude: number | null
    longitude: number | null
    notes: string | null
  }

  export type ManagerCheckinMaxAggregateOutputType = {
    id: number | null
    managerId: number | null
    outletId: number | null
    date: Date | null
    checkInAt: Date | null
    checkOutAt: Date | null
    latitude: number | null
    longitude: number | null
    notes: string | null
  }

  export type ManagerCheckinCountAggregateOutputType = {
    id: number
    managerId: number
    outletId: number
    date: number
    checkInAt: number
    checkOutAt: number
    latitude: number
    longitude: number
    notes: number
    _all: number
  }


  export type ManagerCheckinAvgAggregateInputType = {
    id?: true
    managerId?: true
    outletId?: true
    latitude?: true
    longitude?: true
  }

  export type ManagerCheckinSumAggregateInputType = {
    id?: true
    managerId?: true
    outletId?: true
    latitude?: true
    longitude?: true
  }

  export type ManagerCheckinMinAggregateInputType = {
    id?: true
    managerId?: true
    outletId?: true
    date?: true
    checkInAt?: true
    checkOutAt?: true
    latitude?: true
    longitude?: true
    notes?: true
  }

  export type ManagerCheckinMaxAggregateInputType = {
    id?: true
    managerId?: true
    outletId?: true
    date?: true
    checkInAt?: true
    checkOutAt?: true
    latitude?: true
    longitude?: true
    notes?: true
  }

  export type ManagerCheckinCountAggregateInputType = {
    id?: true
    managerId?: true
    outletId?: true
    date?: true
    checkInAt?: true
    checkOutAt?: true
    latitude?: true
    longitude?: true
    notes?: true
    _all?: true
  }

  export type ManagerCheckinAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ManagerCheckin to aggregate.
     */
    where?: ManagerCheckinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManagerCheckins to fetch.
     */
    orderBy?: ManagerCheckinOrderByWithRelationInput | ManagerCheckinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ManagerCheckinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManagerCheckins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManagerCheckins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ManagerCheckins
    **/
    _count?: true | ManagerCheckinCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ManagerCheckinAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ManagerCheckinSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ManagerCheckinMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ManagerCheckinMaxAggregateInputType
  }

  export type GetManagerCheckinAggregateType<T extends ManagerCheckinAggregateArgs> = {
        [P in keyof T & keyof AggregateManagerCheckin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateManagerCheckin[P]>
      : GetScalarType<T[P], AggregateManagerCheckin[P]>
  }




  export type ManagerCheckinGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ManagerCheckinWhereInput
    orderBy?: ManagerCheckinOrderByWithAggregationInput | ManagerCheckinOrderByWithAggregationInput[]
    by: ManagerCheckinScalarFieldEnum[] | ManagerCheckinScalarFieldEnum
    having?: ManagerCheckinScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ManagerCheckinCountAggregateInputType | true
    _avg?: ManagerCheckinAvgAggregateInputType
    _sum?: ManagerCheckinSumAggregateInputType
    _min?: ManagerCheckinMinAggregateInputType
    _max?: ManagerCheckinMaxAggregateInputType
  }

  export type ManagerCheckinGroupByOutputType = {
    id: number
    managerId: number
    outletId: number
    date: Date
    checkInAt: Date | null
    checkOutAt: Date | null
    latitude: number | null
    longitude: number | null
    notes: string | null
    _count: ManagerCheckinCountAggregateOutputType | null
    _avg: ManagerCheckinAvgAggregateOutputType | null
    _sum: ManagerCheckinSumAggregateOutputType | null
    _min: ManagerCheckinMinAggregateOutputType | null
    _max: ManagerCheckinMaxAggregateOutputType | null
  }

  type GetManagerCheckinGroupByPayload<T extends ManagerCheckinGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ManagerCheckinGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ManagerCheckinGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ManagerCheckinGroupByOutputType[P]>
            : GetScalarType<T[P], ManagerCheckinGroupByOutputType[P]>
        }
      >
    >


  export type ManagerCheckinSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    managerId?: boolean
    outletId?: boolean
    date?: boolean
    checkInAt?: boolean
    checkOutAt?: boolean
    latitude?: boolean
    longitude?: boolean
    notes?: boolean
    manager?: boolean | ManagerDefaultArgs<ExtArgs>
    outlet?: boolean | OutletDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["managerCheckin"]>


  export type ManagerCheckinSelectScalar = {
    id?: boolean
    managerId?: boolean
    outletId?: boolean
    date?: boolean
    checkInAt?: boolean
    checkOutAt?: boolean
    latitude?: boolean
    longitude?: boolean
    notes?: boolean
  }

  export type ManagerCheckinInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    manager?: boolean | ManagerDefaultArgs<ExtArgs>
    outlet?: boolean | OutletDefaultArgs<ExtArgs>
  }

  export type $ManagerCheckinPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ManagerCheckin"
    objects: {
      manager: Prisma.$ManagerPayload<ExtArgs>
      outlet: Prisma.$OutletPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      managerId: number
      outletId: number
      date: Date
      checkInAt: Date | null
      checkOutAt: Date | null
      latitude: number | null
      longitude: number | null
      notes: string | null
    }, ExtArgs["result"]["managerCheckin"]>
    composites: {}
  }

  type ManagerCheckinGetPayload<S extends boolean | null | undefined | ManagerCheckinDefaultArgs> = $Result.GetResult<Prisma.$ManagerCheckinPayload, S>

  type ManagerCheckinCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ManagerCheckinFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ManagerCheckinCountAggregateInputType | true
    }

  export interface ManagerCheckinDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ManagerCheckin'], meta: { name: 'ManagerCheckin' } }
    /**
     * Find zero or one ManagerCheckin that matches the filter.
     * @param {ManagerCheckinFindUniqueArgs} args - Arguments to find a ManagerCheckin
     * @example
     * // Get one ManagerCheckin
     * const managerCheckin = await prisma.managerCheckin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ManagerCheckinFindUniqueArgs>(args: SelectSubset<T, ManagerCheckinFindUniqueArgs<ExtArgs>>): Prisma__ManagerCheckinClient<$Result.GetResult<Prisma.$ManagerCheckinPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ManagerCheckin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ManagerCheckinFindUniqueOrThrowArgs} args - Arguments to find a ManagerCheckin
     * @example
     * // Get one ManagerCheckin
     * const managerCheckin = await prisma.managerCheckin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ManagerCheckinFindUniqueOrThrowArgs>(args: SelectSubset<T, ManagerCheckinFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ManagerCheckinClient<$Result.GetResult<Prisma.$ManagerCheckinPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ManagerCheckin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerCheckinFindFirstArgs} args - Arguments to find a ManagerCheckin
     * @example
     * // Get one ManagerCheckin
     * const managerCheckin = await prisma.managerCheckin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ManagerCheckinFindFirstArgs>(args?: SelectSubset<T, ManagerCheckinFindFirstArgs<ExtArgs>>): Prisma__ManagerCheckinClient<$Result.GetResult<Prisma.$ManagerCheckinPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ManagerCheckin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerCheckinFindFirstOrThrowArgs} args - Arguments to find a ManagerCheckin
     * @example
     * // Get one ManagerCheckin
     * const managerCheckin = await prisma.managerCheckin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ManagerCheckinFindFirstOrThrowArgs>(args?: SelectSubset<T, ManagerCheckinFindFirstOrThrowArgs<ExtArgs>>): Prisma__ManagerCheckinClient<$Result.GetResult<Prisma.$ManagerCheckinPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ManagerCheckins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerCheckinFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ManagerCheckins
     * const managerCheckins = await prisma.managerCheckin.findMany()
     * 
     * // Get first 10 ManagerCheckins
     * const managerCheckins = await prisma.managerCheckin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const managerCheckinWithIdOnly = await prisma.managerCheckin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ManagerCheckinFindManyArgs>(args?: SelectSubset<T, ManagerCheckinFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ManagerCheckinPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ManagerCheckin.
     * @param {ManagerCheckinCreateArgs} args - Arguments to create a ManagerCheckin.
     * @example
     * // Create one ManagerCheckin
     * const ManagerCheckin = await prisma.managerCheckin.create({
     *   data: {
     *     // ... data to create a ManagerCheckin
     *   }
     * })
     * 
     */
    create<T extends ManagerCheckinCreateArgs>(args: SelectSubset<T, ManagerCheckinCreateArgs<ExtArgs>>): Prisma__ManagerCheckinClient<$Result.GetResult<Prisma.$ManagerCheckinPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ManagerCheckins.
     * @param {ManagerCheckinCreateManyArgs} args - Arguments to create many ManagerCheckins.
     * @example
     * // Create many ManagerCheckins
     * const managerCheckin = await prisma.managerCheckin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ManagerCheckinCreateManyArgs>(args?: SelectSubset<T, ManagerCheckinCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ManagerCheckin.
     * @param {ManagerCheckinDeleteArgs} args - Arguments to delete one ManagerCheckin.
     * @example
     * // Delete one ManagerCheckin
     * const ManagerCheckin = await prisma.managerCheckin.delete({
     *   where: {
     *     // ... filter to delete one ManagerCheckin
     *   }
     * })
     * 
     */
    delete<T extends ManagerCheckinDeleteArgs>(args: SelectSubset<T, ManagerCheckinDeleteArgs<ExtArgs>>): Prisma__ManagerCheckinClient<$Result.GetResult<Prisma.$ManagerCheckinPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ManagerCheckin.
     * @param {ManagerCheckinUpdateArgs} args - Arguments to update one ManagerCheckin.
     * @example
     * // Update one ManagerCheckin
     * const managerCheckin = await prisma.managerCheckin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ManagerCheckinUpdateArgs>(args: SelectSubset<T, ManagerCheckinUpdateArgs<ExtArgs>>): Prisma__ManagerCheckinClient<$Result.GetResult<Prisma.$ManagerCheckinPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ManagerCheckins.
     * @param {ManagerCheckinDeleteManyArgs} args - Arguments to filter ManagerCheckins to delete.
     * @example
     * // Delete a few ManagerCheckins
     * const { count } = await prisma.managerCheckin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ManagerCheckinDeleteManyArgs>(args?: SelectSubset<T, ManagerCheckinDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ManagerCheckins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerCheckinUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ManagerCheckins
     * const managerCheckin = await prisma.managerCheckin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ManagerCheckinUpdateManyArgs>(args: SelectSubset<T, ManagerCheckinUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ManagerCheckin.
     * @param {ManagerCheckinUpsertArgs} args - Arguments to update or create a ManagerCheckin.
     * @example
     * // Update or create a ManagerCheckin
     * const managerCheckin = await prisma.managerCheckin.upsert({
     *   create: {
     *     // ... data to create a ManagerCheckin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ManagerCheckin we want to update
     *   }
     * })
     */
    upsert<T extends ManagerCheckinUpsertArgs>(args: SelectSubset<T, ManagerCheckinUpsertArgs<ExtArgs>>): Prisma__ManagerCheckinClient<$Result.GetResult<Prisma.$ManagerCheckinPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ManagerCheckins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerCheckinCountArgs} args - Arguments to filter ManagerCheckins to count.
     * @example
     * // Count the number of ManagerCheckins
     * const count = await prisma.managerCheckin.count({
     *   where: {
     *     // ... the filter for the ManagerCheckins we want to count
     *   }
     * })
    **/
    count<T extends ManagerCheckinCountArgs>(
      args?: Subset<T, ManagerCheckinCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ManagerCheckinCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ManagerCheckin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerCheckinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ManagerCheckinAggregateArgs>(args: Subset<T, ManagerCheckinAggregateArgs>): Prisma.PrismaPromise<GetManagerCheckinAggregateType<T>>

    /**
     * Group by ManagerCheckin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ManagerCheckinGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ManagerCheckinGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ManagerCheckinGroupByArgs['orderBy'] }
        : { orderBy?: ManagerCheckinGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ManagerCheckinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetManagerCheckinGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ManagerCheckin model
   */
  readonly fields: ManagerCheckinFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ManagerCheckin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ManagerCheckinClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    manager<T extends ManagerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ManagerDefaultArgs<ExtArgs>>): Prisma__ManagerClient<$Result.GetResult<Prisma.$ManagerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    outlet<T extends OutletDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OutletDefaultArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ManagerCheckin model
   */ 
  interface ManagerCheckinFieldRefs {
    readonly id: FieldRef<"ManagerCheckin", 'Int'>
    readonly managerId: FieldRef<"ManagerCheckin", 'Int'>
    readonly outletId: FieldRef<"ManagerCheckin", 'Int'>
    readonly date: FieldRef<"ManagerCheckin", 'DateTime'>
    readonly checkInAt: FieldRef<"ManagerCheckin", 'DateTime'>
    readonly checkOutAt: FieldRef<"ManagerCheckin", 'DateTime'>
    readonly latitude: FieldRef<"ManagerCheckin", 'Float'>
    readonly longitude: FieldRef<"ManagerCheckin", 'Float'>
    readonly notes: FieldRef<"ManagerCheckin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ManagerCheckin findUnique
   */
  export type ManagerCheckinFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManagerCheckin
     */
    select?: ManagerCheckinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerCheckinInclude<ExtArgs> | null
    /**
     * Filter, which ManagerCheckin to fetch.
     */
    where: ManagerCheckinWhereUniqueInput
  }

  /**
   * ManagerCheckin findUniqueOrThrow
   */
  export type ManagerCheckinFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManagerCheckin
     */
    select?: ManagerCheckinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerCheckinInclude<ExtArgs> | null
    /**
     * Filter, which ManagerCheckin to fetch.
     */
    where: ManagerCheckinWhereUniqueInput
  }

  /**
   * ManagerCheckin findFirst
   */
  export type ManagerCheckinFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManagerCheckin
     */
    select?: ManagerCheckinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerCheckinInclude<ExtArgs> | null
    /**
     * Filter, which ManagerCheckin to fetch.
     */
    where?: ManagerCheckinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManagerCheckins to fetch.
     */
    orderBy?: ManagerCheckinOrderByWithRelationInput | ManagerCheckinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ManagerCheckins.
     */
    cursor?: ManagerCheckinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManagerCheckins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManagerCheckins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ManagerCheckins.
     */
    distinct?: ManagerCheckinScalarFieldEnum | ManagerCheckinScalarFieldEnum[]
  }

  /**
   * ManagerCheckin findFirstOrThrow
   */
  export type ManagerCheckinFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManagerCheckin
     */
    select?: ManagerCheckinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerCheckinInclude<ExtArgs> | null
    /**
     * Filter, which ManagerCheckin to fetch.
     */
    where?: ManagerCheckinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManagerCheckins to fetch.
     */
    orderBy?: ManagerCheckinOrderByWithRelationInput | ManagerCheckinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ManagerCheckins.
     */
    cursor?: ManagerCheckinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManagerCheckins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManagerCheckins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ManagerCheckins.
     */
    distinct?: ManagerCheckinScalarFieldEnum | ManagerCheckinScalarFieldEnum[]
  }

  /**
   * ManagerCheckin findMany
   */
  export type ManagerCheckinFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManagerCheckin
     */
    select?: ManagerCheckinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerCheckinInclude<ExtArgs> | null
    /**
     * Filter, which ManagerCheckins to fetch.
     */
    where?: ManagerCheckinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ManagerCheckins to fetch.
     */
    orderBy?: ManagerCheckinOrderByWithRelationInput | ManagerCheckinOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ManagerCheckins.
     */
    cursor?: ManagerCheckinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ManagerCheckins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ManagerCheckins.
     */
    skip?: number
    distinct?: ManagerCheckinScalarFieldEnum | ManagerCheckinScalarFieldEnum[]
  }

  /**
   * ManagerCheckin create
   */
  export type ManagerCheckinCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManagerCheckin
     */
    select?: ManagerCheckinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerCheckinInclude<ExtArgs> | null
    /**
     * The data needed to create a ManagerCheckin.
     */
    data: XOR<ManagerCheckinCreateInput, ManagerCheckinUncheckedCreateInput>
  }

  /**
   * ManagerCheckin createMany
   */
  export type ManagerCheckinCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ManagerCheckins.
     */
    data: ManagerCheckinCreateManyInput | ManagerCheckinCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ManagerCheckin update
   */
  export type ManagerCheckinUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManagerCheckin
     */
    select?: ManagerCheckinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerCheckinInclude<ExtArgs> | null
    /**
     * The data needed to update a ManagerCheckin.
     */
    data: XOR<ManagerCheckinUpdateInput, ManagerCheckinUncheckedUpdateInput>
    /**
     * Choose, which ManagerCheckin to update.
     */
    where: ManagerCheckinWhereUniqueInput
  }

  /**
   * ManagerCheckin updateMany
   */
  export type ManagerCheckinUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ManagerCheckins.
     */
    data: XOR<ManagerCheckinUpdateManyMutationInput, ManagerCheckinUncheckedUpdateManyInput>
    /**
     * Filter which ManagerCheckins to update
     */
    where?: ManagerCheckinWhereInput
  }

  /**
   * ManagerCheckin upsert
   */
  export type ManagerCheckinUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManagerCheckin
     */
    select?: ManagerCheckinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerCheckinInclude<ExtArgs> | null
    /**
     * The filter to search for the ManagerCheckin to update in case it exists.
     */
    where: ManagerCheckinWhereUniqueInput
    /**
     * In case the ManagerCheckin found by the `where` argument doesn't exist, create a new ManagerCheckin with this data.
     */
    create: XOR<ManagerCheckinCreateInput, ManagerCheckinUncheckedCreateInput>
    /**
     * In case the ManagerCheckin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ManagerCheckinUpdateInput, ManagerCheckinUncheckedUpdateInput>
  }

  /**
   * ManagerCheckin delete
   */
  export type ManagerCheckinDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManagerCheckin
     */
    select?: ManagerCheckinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerCheckinInclude<ExtArgs> | null
    /**
     * Filter which ManagerCheckin to delete.
     */
    where: ManagerCheckinWhereUniqueInput
  }

  /**
   * ManagerCheckin deleteMany
   */
  export type ManagerCheckinDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ManagerCheckins to delete
     */
    where?: ManagerCheckinWhereInput
  }

  /**
   * ManagerCheckin without action
   */
  export type ManagerCheckinDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ManagerCheckin
     */
    select?: ManagerCheckinSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ManagerCheckinInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    outletId: number | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    userId: number | null
    outletId: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    outletId: number | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    outletId: number | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    userId: number
    createdAt: number
    updatedAt: number
    outletId: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    userId?: true
    outletId?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    userId?: true
    outletId?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    outletId?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    outletId?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    outletId?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: number
    userId: number
    createdAt: Date
    updatedAt: Date
    outletId: number
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    outletId?: boolean
    outlet?: boolean | OutletDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    orderItems?: boolean | Order$orderItemsArgs<ExtArgs>
    reports?: boolean | Order$reportsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>


  export type OrderSelectScalar = {
    id?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    outletId?: boolean
  }

  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outlet?: boolean | OutletDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    orderItems?: boolean | Order$orderItemsArgs<ExtArgs>
    reports?: boolean | Order$reportsArgs<ExtArgs>
    _count?: boolean | OrderCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      outlet: Prisma.$OutletPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      orderItems: Prisma.$OrderItemPayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      createdAt: Date
      updatedAt: Date
      outletId: number
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    outlet<T extends OutletDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OutletDefaultArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    orderItems<T extends Order$orderItemsArgs<ExtArgs> = {}>(args?: Subset<T, Order$orderItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany"> | Null>
    reports<T extends Order$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Order$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */ 
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'Int'>
    readonly userId: FieldRef<"Order", 'Int'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
    readonly outletId: FieldRef<"Order", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
  }

  /**
   * Order.orderItems
   */
  export type Order$orderItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Order.reports
   */
  export type Order$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model OrderItem
   */

  export type AggregateOrderItem = {
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  export type OrderItemAvgAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    quantity: number | null
  }

  export type OrderItemSumAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    quantity: number | null
  }

  export type OrderItemMinAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    quantity: number | null
  }

  export type OrderItemMaxAggregateOutputType = {
    id: number | null
    orderId: number | null
    productId: number | null
    quantity: number | null
  }

  export type OrderItemCountAggregateOutputType = {
    id: number
    orderId: number
    productId: number
    quantity: number
    _all: number
  }


  export type OrderItemAvgAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    quantity?: true
  }

  export type OrderItemSumAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    quantity?: true
  }

  export type OrderItemMinAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    quantity?: true
  }

  export type OrderItemMaxAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    quantity?: true
  }

  export type OrderItemCountAggregateInputType = {
    id?: true
    orderId?: true
    productId?: true
    quantity?: true
    _all?: true
  }

  export type OrderItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItem to aggregate.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrderItems
    **/
    _count?: true | OrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderItemMaxAggregateInputType
  }

  export type GetOrderItemAggregateType<T extends OrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrderItem[P]>
      : GetScalarType<T[P], AggregateOrderItem[P]>
  }




  export type OrderItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithAggregationInput | OrderItemOrderByWithAggregationInput[]
    by: OrderItemScalarFieldEnum[] | OrderItemScalarFieldEnum
    having?: OrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderItemCountAggregateInputType | true
    _avg?: OrderItemAvgAggregateInputType
    _sum?: OrderItemSumAggregateInputType
    _min?: OrderItemMinAggregateInputType
    _max?: OrderItemMaxAggregateInputType
  }

  export type OrderItemGroupByOutputType = {
    id: number
    orderId: number
    productId: number
    quantity: number
    _count: OrderItemCountAggregateOutputType | null
    _avg: OrderItemAvgAggregateOutputType | null
    _sum: OrderItemSumAggregateOutputType | null
    _min: OrderItemMinAggregateOutputType | null
    _max: OrderItemMaxAggregateOutputType | null
  }

  type GetOrderItemGroupByPayload<T extends OrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], OrderItemGroupByOutputType[P]>
        }
      >
    >


  export type OrderItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    productId?: boolean
    quantity?: boolean
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orderItem"]>


  export type OrderItemSelectScalar = {
    id?: boolean
    orderId?: boolean
    productId?: boolean
    quantity?: boolean
  }

  export type OrderItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    order?: boolean | OrderDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $OrderItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrderItem"
    objects: {
      order: Prisma.$OrderPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderId: number
      productId: number
      quantity: number
    }, ExtArgs["result"]["orderItem"]>
    composites: {}
  }

  type OrderItemGetPayload<S extends boolean | null | undefined | OrderItemDefaultArgs> = $Result.GetResult<Prisma.$OrderItemPayload, S>

  type OrderItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrderItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrderItemCountAggregateInputType | true
    }

  export interface OrderItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderItem'], meta: { name: 'OrderItem' } }
    /**
     * Find zero or one OrderItem that matches the filter.
     * @param {OrderItemFindUniqueArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderItemFindUniqueArgs>(args: SelectSubset<T, OrderItemFindUniqueArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OrderItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrderItemFindUniqueOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderItemFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderItemFindFirstArgs>(args?: SelectSubset<T, OrderItemFindFirstArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OrderItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindFirstOrThrowArgs} args - Arguments to find a OrderItem
     * @example
     * // Get one OrderItem
     * const orderItem = await prisma.orderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderItemFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrderItems
     * const orderItems = await prisma.orderItem.findMany()
     * 
     * // Get first 10 OrderItems
     * const orderItems = await prisma.orderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderItemWithIdOnly = await prisma.orderItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderItemFindManyArgs>(args?: SelectSubset<T, OrderItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OrderItem.
     * @param {OrderItemCreateArgs} args - Arguments to create a OrderItem.
     * @example
     * // Create one OrderItem
     * const OrderItem = await prisma.orderItem.create({
     *   data: {
     *     // ... data to create a OrderItem
     *   }
     * })
     * 
     */
    create<T extends OrderItemCreateArgs>(args: SelectSubset<T, OrderItemCreateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OrderItems.
     * @param {OrderItemCreateManyArgs} args - Arguments to create many OrderItems.
     * @example
     * // Create many OrderItems
     * const orderItem = await prisma.orderItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderItemCreateManyArgs>(args?: SelectSubset<T, OrderItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OrderItem.
     * @param {OrderItemDeleteArgs} args - Arguments to delete one OrderItem.
     * @example
     * // Delete one OrderItem
     * const OrderItem = await prisma.orderItem.delete({
     *   where: {
     *     // ... filter to delete one OrderItem
     *   }
     * })
     * 
     */
    delete<T extends OrderItemDeleteArgs>(args: SelectSubset<T, OrderItemDeleteArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OrderItem.
     * @param {OrderItemUpdateArgs} args - Arguments to update one OrderItem.
     * @example
     * // Update one OrderItem
     * const orderItem = await prisma.orderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderItemUpdateArgs>(args: SelectSubset<T, OrderItemUpdateArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OrderItems.
     * @param {OrderItemDeleteManyArgs} args - Arguments to filter OrderItems to delete.
     * @example
     * // Delete a few OrderItems
     * const { count } = await prisma.orderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderItemDeleteManyArgs>(args?: SelectSubset<T, OrderItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrderItems
     * const orderItem = await prisma.orderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderItemUpdateManyArgs>(args: SelectSubset<T, OrderItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrderItem.
     * @param {OrderItemUpsertArgs} args - Arguments to update or create a OrderItem.
     * @example
     * // Update or create a OrderItem
     * const orderItem = await prisma.orderItem.upsert({
     *   create: {
     *     // ... data to create a OrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrderItem we want to update
     *   }
     * })
     */
    upsert<T extends OrderItemUpsertArgs>(args: SelectSubset<T, OrderItemUpsertArgs<ExtArgs>>): Prisma__OrderItemClient<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemCountArgs} args - Arguments to filter OrderItems to count.
     * @example
     * // Count the number of OrderItems
     * const count = await prisma.orderItem.count({
     *   where: {
     *     // ... the filter for the OrderItems we want to count
     *   }
     * })
    **/
    count<T extends OrderItemCountArgs>(
      args?: Subset<T, OrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderItemAggregateArgs>(args: Subset<T, OrderItemAggregateArgs>): Prisma.PrismaPromise<GetOrderItemAggregateType<T>>

    /**
     * Group by OrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderItemGroupByArgs['orderBy'] }
        : { orderBy?: OrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrderItem model
   */
  readonly fields: OrderItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    order<T extends OrderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrderDefaultArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrderItem model
   */ 
  interface OrderItemFieldRefs {
    readonly id: FieldRef<"OrderItem", 'Int'>
    readonly orderId: FieldRef<"OrderItem", 'Int'>
    readonly productId: FieldRef<"OrderItem", 'Int'>
    readonly quantity: FieldRef<"OrderItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * OrderItem findUnique
   */
  export type OrderItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findUniqueOrThrow
   */
  export type OrderItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem findFirst
   */
  export type OrderItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findFirstOrThrow
   */
  export type OrderItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItem to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrderItems.
     */
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem findMany
   */
  export type OrderItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter, which OrderItems to fetch.
     */
    where?: OrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrderItems to fetch.
     */
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrderItems.
     */
    cursor?: OrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrderItems.
     */
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * OrderItem create
   */
  export type OrderItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to create a OrderItem.
     */
    data: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
  }

  /**
   * OrderItem createMany
   */
  export type OrderItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrderItems.
     */
    data: OrderItemCreateManyInput | OrderItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrderItem update
   */
  export type OrderItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The data needed to update a OrderItem.
     */
    data: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
    /**
     * Choose, which OrderItem to update.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem updateMany
   */
  export type OrderItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrderItems.
     */
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyInput>
    /**
     * Filter which OrderItems to update
     */
    where?: OrderItemWhereInput
  }

  /**
   * OrderItem upsert
   */
  export type OrderItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * The filter to search for the OrderItem to update in case it exists.
     */
    where: OrderItemWhereUniqueInput
    /**
     * In case the OrderItem found by the `where` argument doesn't exist, create a new OrderItem with this data.
     */
    create: XOR<OrderItemCreateInput, OrderItemUncheckedCreateInput>
    /**
     * In case the OrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderItemUpdateInput, OrderItemUncheckedUpdateInput>
  }

  /**
   * OrderItem delete
   */
  export type OrderItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    /**
     * Filter which OrderItem to delete.
     */
    where: OrderItemWhereUniqueInput
  }

  /**
   * OrderItem deleteMany
   */
  export type OrderItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrderItems to delete
     */
    where?: OrderItemWhereInput
  }

  /**
   * OrderItem without action
   */
  export type OrderItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
  }


  /**
   * Model JourneyPlan
   */

  export type AggregateJourneyPlan = {
    _count: JourneyPlanCountAggregateOutputType | null
    _avg: JourneyPlanAvgAggregateOutputType | null
    _sum: JourneyPlanSumAggregateOutputType | null
    _min: JourneyPlanMinAggregateOutputType | null
    _max: JourneyPlanMaxAggregateOutputType | null
  }

  export type JourneyPlanAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    outletId: number | null
    status: number | null
    latitude: number | null
    longitude: number | null
    checkoutLatitude: number | null
    checkoutLongitude: number | null
  }

  export type JourneyPlanSumAggregateOutputType = {
    id: number | null
    userId: number | null
    outletId: number | null
    status: number | null
    latitude: number | null
    longitude: number | null
    checkoutLatitude: number | null
    checkoutLongitude: number | null
  }

  export type JourneyPlanMinAggregateOutputType = {
    id: number | null
    date: Date | null
    time: string | null
    userId: number | null
    outletId: number | null
    status: number | null
    checkInTime: Date | null
    latitude: number | null
    longitude: number | null
    imageUrl: string | null
    notes: string | null
    checkoutLatitude: number | null
    checkoutLongitude: number | null
    checkoutTime: Date | null
  }

  export type JourneyPlanMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    time: string | null
    userId: number | null
    outletId: number | null
    status: number | null
    checkInTime: Date | null
    latitude: number | null
    longitude: number | null
    imageUrl: string | null
    notes: string | null
    checkoutLatitude: number | null
    checkoutLongitude: number | null
    checkoutTime: Date | null
  }

  export type JourneyPlanCountAggregateOutputType = {
    id: number
    date: number
    time: number
    userId: number
    outletId: number
    status: number
    checkInTime: number
    latitude: number
    longitude: number
    imageUrl: number
    notes: number
    checkoutLatitude: number
    checkoutLongitude: number
    checkoutTime: number
    _all: number
  }


  export type JourneyPlanAvgAggregateInputType = {
    id?: true
    userId?: true
    outletId?: true
    status?: true
    latitude?: true
    longitude?: true
    checkoutLatitude?: true
    checkoutLongitude?: true
  }

  export type JourneyPlanSumAggregateInputType = {
    id?: true
    userId?: true
    outletId?: true
    status?: true
    latitude?: true
    longitude?: true
    checkoutLatitude?: true
    checkoutLongitude?: true
  }

  export type JourneyPlanMinAggregateInputType = {
    id?: true
    date?: true
    time?: true
    userId?: true
    outletId?: true
    status?: true
    checkInTime?: true
    latitude?: true
    longitude?: true
    imageUrl?: true
    notes?: true
    checkoutLatitude?: true
    checkoutLongitude?: true
    checkoutTime?: true
  }

  export type JourneyPlanMaxAggregateInputType = {
    id?: true
    date?: true
    time?: true
    userId?: true
    outletId?: true
    status?: true
    checkInTime?: true
    latitude?: true
    longitude?: true
    imageUrl?: true
    notes?: true
    checkoutLatitude?: true
    checkoutLongitude?: true
    checkoutTime?: true
  }

  export type JourneyPlanCountAggregateInputType = {
    id?: true
    date?: true
    time?: true
    userId?: true
    outletId?: true
    status?: true
    checkInTime?: true
    latitude?: true
    longitude?: true
    imageUrl?: true
    notes?: true
    checkoutLatitude?: true
    checkoutLongitude?: true
    checkoutTime?: true
    _all?: true
  }

  export type JourneyPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JourneyPlan to aggregate.
     */
    where?: JourneyPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JourneyPlans to fetch.
     */
    orderBy?: JourneyPlanOrderByWithRelationInput | JourneyPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JourneyPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JourneyPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JourneyPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JourneyPlans
    **/
    _count?: true | JourneyPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JourneyPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JourneyPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JourneyPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JourneyPlanMaxAggregateInputType
  }

  export type GetJourneyPlanAggregateType<T extends JourneyPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateJourneyPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJourneyPlan[P]>
      : GetScalarType<T[P], AggregateJourneyPlan[P]>
  }




  export type JourneyPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JourneyPlanWhereInput
    orderBy?: JourneyPlanOrderByWithAggregationInput | JourneyPlanOrderByWithAggregationInput[]
    by: JourneyPlanScalarFieldEnum[] | JourneyPlanScalarFieldEnum
    having?: JourneyPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JourneyPlanCountAggregateInputType | true
    _avg?: JourneyPlanAvgAggregateInputType
    _sum?: JourneyPlanSumAggregateInputType
    _min?: JourneyPlanMinAggregateInputType
    _max?: JourneyPlanMaxAggregateInputType
  }

  export type JourneyPlanGroupByOutputType = {
    id: number
    date: Date
    time: string
    userId: number | null
    outletId: number
    status: number
    checkInTime: Date | null
    latitude: number | null
    longitude: number | null
    imageUrl: string | null
    notes: string | null
    checkoutLatitude: number | null
    checkoutLongitude: number | null
    checkoutTime: Date | null
    _count: JourneyPlanCountAggregateOutputType | null
    _avg: JourneyPlanAvgAggregateOutputType | null
    _sum: JourneyPlanSumAggregateOutputType | null
    _min: JourneyPlanMinAggregateOutputType | null
    _max: JourneyPlanMaxAggregateOutputType | null
  }

  type GetJourneyPlanGroupByPayload<T extends JourneyPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JourneyPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JourneyPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JourneyPlanGroupByOutputType[P]>
            : GetScalarType<T[P], JourneyPlanGroupByOutputType[P]>
        }
      >
    >


  export type JourneyPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    time?: boolean
    userId?: boolean
    outletId?: boolean
    status?: boolean
    checkInTime?: boolean
    latitude?: boolean
    longitude?: boolean
    imageUrl?: boolean
    notes?: boolean
    checkoutLatitude?: boolean
    checkoutLongitude?: boolean
    checkoutTime?: boolean
    outlet?: boolean | OutletDefaultArgs<ExtArgs>
    user?: boolean | JourneyPlan$userArgs<ExtArgs>
    reports?: boolean | JourneyPlan$reportsArgs<ExtArgs>
    _count?: boolean | JourneyPlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journeyPlan"]>


  export type JourneyPlanSelectScalar = {
    id?: boolean
    date?: boolean
    time?: boolean
    userId?: boolean
    outletId?: boolean
    status?: boolean
    checkInTime?: boolean
    latitude?: boolean
    longitude?: boolean
    imageUrl?: boolean
    notes?: boolean
    checkoutLatitude?: boolean
    checkoutLongitude?: boolean
    checkoutTime?: boolean
  }

  export type JourneyPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    outlet?: boolean | OutletDefaultArgs<ExtArgs>
    user?: boolean | JourneyPlan$userArgs<ExtArgs>
    reports?: boolean | JourneyPlan$reportsArgs<ExtArgs>
    _count?: boolean | JourneyPlanCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $JourneyPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JourneyPlan"
    objects: {
      outlet: Prisma.$OutletPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
      reports: Prisma.$ReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      time: string
      userId: number | null
      outletId: number
      status: number
      checkInTime: Date | null
      latitude: number | null
      longitude: number | null
      imageUrl: string | null
      notes: string | null
      checkoutLatitude: number | null
      checkoutLongitude: number | null
      checkoutTime: Date | null
    }, ExtArgs["result"]["journeyPlan"]>
    composites: {}
  }

  type JourneyPlanGetPayload<S extends boolean | null | undefined | JourneyPlanDefaultArgs> = $Result.GetResult<Prisma.$JourneyPlanPayload, S>

  type JourneyPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JourneyPlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JourneyPlanCountAggregateInputType | true
    }

  export interface JourneyPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JourneyPlan'], meta: { name: 'JourneyPlan' } }
    /**
     * Find zero or one JourneyPlan that matches the filter.
     * @param {JourneyPlanFindUniqueArgs} args - Arguments to find a JourneyPlan
     * @example
     * // Get one JourneyPlan
     * const journeyPlan = await prisma.journeyPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JourneyPlanFindUniqueArgs>(args: SelectSubset<T, JourneyPlanFindUniqueArgs<ExtArgs>>): Prisma__JourneyPlanClient<$Result.GetResult<Prisma.$JourneyPlanPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one JourneyPlan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JourneyPlanFindUniqueOrThrowArgs} args - Arguments to find a JourneyPlan
     * @example
     * // Get one JourneyPlan
     * const journeyPlan = await prisma.journeyPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JourneyPlanFindUniqueOrThrowArgs>(args: SelectSubset<T, JourneyPlanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JourneyPlanClient<$Result.GetResult<Prisma.$JourneyPlanPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first JourneyPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyPlanFindFirstArgs} args - Arguments to find a JourneyPlan
     * @example
     * // Get one JourneyPlan
     * const journeyPlan = await prisma.journeyPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JourneyPlanFindFirstArgs>(args?: SelectSubset<T, JourneyPlanFindFirstArgs<ExtArgs>>): Prisma__JourneyPlanClient<$Result.GetResult<Prisma.$JourneyPlanPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first JourneyPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyPlanFindFirstOrThrowArgs} args - Arguments to find a JourneyPlan
     * @example
     * // Get one JourneyPlan
     * const journeyPlan = await prisma.journeyPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JourneyPlanFindFirstOrThrowArgs>(args?: SelectSubset<T, JourneyPlanFindFirstOrThrowArgs<ExtArgs>>): Prisma__JourneyPlanClient<$Result.GetResult<Prisma.$JourneyPlanPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more JourneyPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JourneyPlans
     * const journeyPlans = await prisma.journeyPlan.findMany()
     * 
     * // Get first 10 JourneyPlans
     * const journeyPlans = await prisma.journeyPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const journeyPlanWithIdOnly = await prisma.journeyPlan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JourneyPlanFindManyArgs>(args?: SelectSubset<T, JourneyPlanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JourneyPlanPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a JourneyPlan.
     * @param {JourneyPlanCreateArgs} args - Arguments to create a JourneyPlan.
     * @example
     * // Create one JourneyPlan
     * const JourneyPlan = await prisma.journeyPlan.create({
     *   data: {
     *     // ... data to create a JourneyPlan
     *   }
     * })
     * 
     */
    create<T extends JourneyPlanCreateArgs>(args: SelectSubset<T, JourneyPlanCreateArgs<ExtArgs>>): Prisma__JourneyPlanClient<$Result.GetResult<Prisma.$JourneyPlanPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many JourneyPlans.
     * @param {JourneyPlanCreateManyArgs} args - Arguments to create many JourneyPlans.
     * @example
     * // Create many JourneyPlans
     * const journeyPlan = await prisma.journeyPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JourneyPlanCreateManyArgs>(args?: SelectSubset<T, JourneyPlanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a JourneyPlan.
     * @param {JourneyPlanDeleteArgs} args - Arguments to delete one JourneyPlan.
     * @example
     * // Delete one JourneyPlan
     * const JourneyPlan = await prisma.journeyPlan.delete({
     *   where: {
     *     // ... filter to delete one JourneyPlan
     *   }
     * })
     * 
     */
    delete<T extends JourneyPlanDeleteArgs>(args: SelectSubset<T, JourneyPlanDeleteArgs<ExtArgs>>): Prisma__JourneyPlanClient<$Result.GetResult<Prisma.$JourneyPlanPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one JourneyPlan.
     * @param {JourneyPlanUpdateArgs} args - Arguments to update one JourneyPlan.
     * @example
     * // Update one JourneyPlan
     * const journeyPlan = await prisma.journeyPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JourneyPlanUpdateArgs>(args: SelectSubset<T, JourneyPlanUpdateArgs<ExtArgs>>): Prisma__JourneyPlanClient<$Result.GetResult<Prisma.$JourneyPlanPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more JourneyPlans.
     * @param {JourneyPlanDeleteManyArgs} args - Arguments to filter JourneyPlans to delete.
     * @example
     * // Delete a few JourneyPlans
     * const { count } = await prisma.journeyPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JourneyPlanDeleteManyArgs>(args?: SelectSubset<T, JourneyPlanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JourneyPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JourneyPlans
     * const journeyPlan = await prisma.journeyPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JourneyPlanUpdateManyArgs>(args: SelectSubset<T, JourneyPlanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JourneyPlan.
     * @param {JourneyPlanUpsertArgs} args - Arguments to update or create a JourneyPlan.
     * @example
     * // Update or create a JourneyPlan
     * const journeyPlan = await prisma.journeyPlan.upsert({
     *   create: {
     *     // ... data to create a JourneyPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JourneyPlan we want to update
     *   }
     * })
     */
    upsert<T extends JourneyPlanUpsertArgs>(args: SelectSubset<T, JourneyPlanUpsertArgs<ExtArgs>>): Prisma__JourneyPlanClient<$Result.GetResult<Prisma.$JourneyPlanPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of JourneyPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyPlanCountArgs} args - Arguments to filter JourneyPlans to count.
     * @example
     * // Count the number of JourneyPlans
     * const count = await prisma.journeyPlan.count({
     *   where: {
     *     // ... the filter for the JourneyPlans we want to count
     *   }
     * })
    **/
    count<T extends JourneyPlanCountArgs>(
      args?: Subset<T, JourneyPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JourneyPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JourneyPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JourneyPlanAggregateArgs>(args: Subset<T, JourneyPlanAggregateArgs>): Prisma.PrismaPromise<GetJourneyPlanAggregateType<T>>

    /**
     * Group by JourneyPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JourneyPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JourneyPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JourneyPlanGroupByArgs['orderBy'] }
        : { orderBy?: JourneyPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JourneyPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJourneyPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JourneyPlan model
   */
  readonly fields: JourneyPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JourneyPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JourneyPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    outlet<T extends OutletDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OutletDefaultArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends JourneyPlan$userArgs<ExtArgs> = {}>(args?: Subset<T, JourneyPlan$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    reports<T extends JourneyPlan$reportsArgs<ExtArgs> = {}>(args?: Subset<T, JourneyPlan$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JourneyPlan model
   */ 
  interface JourneyPlanFieldRefs {
    readonly id: FieldRef<"JourneyPlan", 'Int'>
    readonly date: FieldRef<"JourneyPlan", 'DateTime'>
    readonly time: FieldRef<"JourneyPlan", 'String'>
    readonly userId: FieldRef<"JourneyPlan", 'Int'>
    readonly outletId: FieldRef<"JourneyPlan", 'Int'>
    readonly status: FieldRef<"JourneyPlan", 'Int'>
    readonly checkInTime: FieldRef<"JourneyPlan", 'DateTime'>
    readonly latitude: FieldRef<"JourneyPlan", 'Float'>
    readonly longitude: FieldRef<"JourneyPlan", 'Float'>
    readonly imageUrl: FieldRef<"JourneyPlan", 'String'>
    readonly notes: FieldRef<"JourneyPlan", 'String'>
    readonly checkoutLatitude: FieldRef<"JourneyPlan", 'Float'>
    readonly checkoutLongitude: FieldRef<"JourneyPlan", 'Float'>
    readonly checkoutTime: FieldRef<"JourneyPlan", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JourneyPlan findUnique
   */
  export type JourneyPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyPlan
     */
    select?: JourneyPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyPlanInclude<ExtArgs> | null
    /**
     * Filter, which JourneyPlan to fetch.
     */
    where: JourneyPlanWhereUniqueInput
  }

  /**
   * JourneyPlan findUniqueOrThrow
   */
  export type JourneyPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyPlan
     */
    select?: JourneyPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyPlanInclude<ExtArgs> | null
    /**
     * Filter, which JourneyPlan to fetch.
     */
    where: JourneyPlanWhereUniqueInput
  }

  /**
   * JourneyPlan findFirst
   */
  export type JourneyPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyPlan
     */
    select?: JourneyPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyPlanInclude<ExtArgs> | null
    /**
     * Filter, which JourneyPlan to fetch.
     */
    where?: JourneyPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JourneyPlans to fetch.
     */
    orderBy?: JourneyPlanOrderByWithRelationInput | JourneyPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JourneyPlans.
     */
    cursor?: JourneyPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JourneyPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JourneyPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JourneyPlans.
     */
    distinct?: JourneyPlanScalarFieldEnum | JourneyPlanScalarFieldEnum[]
  }

  /**
   * JourneyPlan findFirstOrThrow
   */
  export type JourneyPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyPlan
     */
    select?: JourneyPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyPlanInclude<ExtArgs> | null
    /**
     * Filter, which JourneyPlan to fetch.
     */
    where?: JourneyPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JourneyPlans to fetch.
     */
    orderBy?: JourneyPlanOrderByWithRelationInput | JourneyPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JourneyPlans.
     */
    cursor?: JourneyPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JourneyPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JourneyPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JourneyPlans.
     */
    distinct?: JourneyPlanScalarFieldEnum | JourneyPlanScalarFieldEnum[]
  }

  /**
   * JourneyPlan findMany
   */
  export type JourneyPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyPlan
     */
    select?: JourneyPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyPlanInclude<ExtArgs> | null
    /**
     * Filter, which JourneyPlans to fetch.
     */
    where?: JourneyPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JourneyPlans to fetch.
     */
    orderBy?: JourneyPlanOrderByWithRelationInput | JourneyPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JourneyPlans.
     */
    cursor?: JourneyPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JourneyPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JourneyPlans.
     */
    skip?: number
    distinct?: JourneyPlanScalarFieldEnum | JourneyPlanScalarFieldEnum[]
  }

  /**
   * JourneyPlan create
   */
  export type JourneyPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyPlan
     */
    select?: JourneyPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a JourneyPlan.
     */
    data: XOR<JourneyPlanCreateInput, JourneyPlanUncheckedCreateInput>
  }

  /**
   * JourneyPlan createMany
   */
  export type JourneyPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JourneyPlans.
     */
    data: JourneyPlanCreateManyInput | JourneyPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JourneyPlan update
   */
  export type JourneyPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyPlan
     */
    select?: JourneyPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a JourneyPlan.
     */
    data: XOR<JourneyPlanUpdateInput, JourneyPlanUncheckedUpdateInput>
    /**
     * Choose, which JourneyPlan to update.
     */
    where: JourneyPlanWhereUniqueInput
  }

  /**
   * JourneyPlan updateMany
   */
  export type JourneyPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JourneyPlans.
     */
    data: XOR<JourneyPlanUpdateManyMutationInput, JourneyPlanUncheckedUpdateManyInput>
    /**
     * Filter which JourneyPlans to update
     */
    where?: JourneyPlanWhereInput
  }

  /**
   * JourneyPlan upsert
   */
  export type JourneyPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyPlan
     */
    select?: JourneyPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the JourneyPlan to update in case it exists.
     */
    where: JourneyPlanWhereUniqueInput
    /**
     * In case the JourneyPlan found by the `where` argument doesn't exist, create a new JourneyPlan with this data.
     */
    create: XOR<JourneyPlanCreateInput, JourneyPlanUncheckedCreateInput>
    /**
     * In case the JourneyPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JourneyPlanUpdateInput, JourneyPlanUncheckedUpdateInput>
  }

  /**
   * JourneyPlan delete
   */
  export type JourneyPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyPlan
     */
    select?: JourneyPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyPlanInclude<ExtArgs> | null
    /**
     * Filter which JourneyPlan to delete.
     */
    where: JourneyPlanWhereUniqueInput
  }

  /**
   * JourneyPlan deleteMany
   */
  export type JourneyPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JourneyPlans to delete
     */
    where?: JourneyPlanWhereInput
  }

  /**
   * JourneyPlan.user
   */
  export type JourneyPlan$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * JourneyPlan.reports
   */
  export type JourneyPlan$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * JourneyPlan without action
   */
  export type JourneyPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyPlan
     */
    select?: JourneyPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyPlanInclude<ExtArgs> | null
  }


  /**
   * Model NoticeBoard
   */

  export type AggregateNoticeBoard = {
    _count: NoticeBoardCountAggregateOutputType | null
    _avg: NoticeBoardAvgAggregateOutputType | null
    _sum: NoticeBoardSumAggregateOutputType | null
    _min: NoticeBoardMinAggregateOutputType | null
    _max: NoticeBoardMaxAggregateOutputType | null
  }

  export type NoticeBoardAvgAggregateOutputType = {
    id: number | null
  }

  export type NoticeBoardSumAggregateOutputType = {
    id: number | null
  }

  export type NoticeBoardMinAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NoticeBoardMaxAggregateOutputType = {
    id: number | null
    title: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NoticeBoardCountAggregateOutputType = {
    id: number
    title: number
    content: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NoticeBoardAvgAggregateInputType = {
    id?: true
  }

  export type NoticeBoardSumAggregateInputType = {
    id?: true
  }

  export type NoticeBoardMinAggregateInputType = {
    id?: true
    title?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NoticeBoardMaxAggregateInputType = {
    id?: true
    title?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NoticeBoardCountAggregateInputType = {
    id?: true
    title?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NoticeBoardAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NoticeBoard to aggregate.
     */
    where?: NoticeBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeBoards to fetch.
     */
    orderBy?: NoticeBoardOrderByWithRelationInput | NoticeBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoticeBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NoticeBoards
    **/
    _count?: true | NoticeBoardCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NoticeBoardAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NoticeBoardSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoticeBoardMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoticeBoardMaxAggregateInputType
  }

  export type GetNoticeBoardAggregateType<T extends NoticeBoardAggregateArgs> = {
        [P in keyof T & keyof AggregateNoticeBoard]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNoticeBoard[P]>
      : GetScalarType<T[P], AggregateNoticeBoard[P]>
  }




  export type NoticeBoardGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoticeBoardWhereInput
    orderBy?: NoticeBoardOrderByWithAggregationInput | NoticeBoardOrderByWithAggregationInput[]
    by: NoticeBoardScalarFieldEnum[] | NoticeBoardScalarFieldEnum
    having?: NoticeBoardScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoticeBoardCountAggregateInputType | true
    _avg?: NoticeBoardAvgAggregateInputType
    _sum?: NoticeBoardSumAggregateInputType
    _min?: NoticeBoardMinAggregateInputType
    _max?: NoticeBoardMaxAggregateInputType
  }

  export type NoticeBoardGroupByOutputType = {
    id: number
    title: string
    content: string
    createdAt: Date
    updatedAt: Date
    _count: NoticeBoardCountAggregateOutputType | null
    _avg: NoticeBoardAvgAggregateOutputType | null
    _sum: NoticeBoardSumAggregateOutputType | null
    _min: NoticeBoardMinAggregateOutputType | null
    _max: NoticeBoardMaxAggregateOutputType | null
  }

  type GetNoticeBoardGroupByPayload<T extends NoticeBoardGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoticeBoardGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoticeBoardGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoticeBoardGroupByOutputType[P]>
            : GetScalarType<T[P], NoticeBoardGroupByOutputType[P]>
        }
      >
    >


  export type NoticeBoardSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["noticeBoard"]>


  export type NoticeBoardSelectScalar = {
    id?: boolean
    title?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $NoticeBoardPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NoticeBoard"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      content: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["noticeBoard"]>
    composites: {}
  }

  type NoticeBoardGetPayload<S extends boolean | null | undefined | NoticeBoardDefaultArgs> = $Result.GetResult<Prisma.$NoticeBoardPayload, S>

  type NoticeBoardCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NoticeBoardFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NoticeBoardCountAggregateInputType | true
    }

  export interface NoticeBoardDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NoticeBoard'], meta: { name: 'NoticeBoard' } }
    /**
     * Find zero or one NoticeBoard that matches the filter.
     * @param {NoticeBoardFindUniqueArgs} args - Arguments to find a NoticeBoard
     * @example
     * // Get one NoticeBoard
     * const noticeBoard = await prisma.noticeBoard.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoticeBoardFindUniqueArgs>(args: SelectSubset<T, NoticeBoardFindUniqueArgs<ExtArgs>>): Prisma__NoticeBoardClient<$Result.GetResult<Prisma.$NoticeBoardPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one NoticeBoard that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NoticeBoardFindUniqueOrThrowArgs} args - Arguments to find a NoticeBoard
     * @example
     * // Get one NoticeBoard
     * const noticeBoard = await prisma.noticeBoard.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoticeBoardFindUniqueOrThrowArgs>(args: SelectSubset<T, NoticeBoardFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoticeBoardClient<$Result.GetResult<Prisma.$NoticeBoardPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first NoticeBoard that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeBoardFindFirstArgs} args - Arguments to find a NoticeBoard
     * @example
     * // Get one NoticeBoard
     * const noticeBoard = await prisma.noticeBoard.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoticeBoardFindFirstArgs>(args?: SelectSubset<T, NoticeBoardFindFirstArgs<ExtArgs>>): Prisma__NoticeBoardClient<$Result.GetResult<Prisma.$NoticeBoardPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first NoticeBoard that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeBoardFindFirstOrThrowArgs} args - Arguments to find a NoticeBoard
     * @example
     * // Get one NoticeBoard
     * const noticeBoard = await prisma.noticeBoard.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoticeBoardFindFirstOrThrowArgs>(args?: SelectSubset<T, NoticeBoardFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoticeBoardClient<$Result.GetResult<Prisma.$NoticeBoardPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more NoticeBoards that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeBoardFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NoticeBoards
     * const noticeBoards = await prisma.noticeBoard.findMany()
     * 
     * // Get first 10 NoticeBoards
     * const noticeBoards = await prisma.noticeBoard.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noticeBoardWithIdOnly = await prisma.noticeBoard.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NoticeBoardFindManyArgs>(args?: SelectSubset<T, NoticeBoardFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NoticeBoardPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a NoticeBoard.
     * @param {NoticeBoardCreateArgs} args - Arguments to create a NoticeBoard.
     * @example
     * // Create one NoticeBoard
     * const NoticeBoard = await prisma.noticeBoard.create({
     *   data: {
     *     // ... data to create a NoticeBoard
     *   }
     * })
     * 
     */
    create<T extends NoticeBoardCreateArgs>(args: SelectSubset<T, NoticeBoardCreateArgs<ExtArgs>>): Prisma__NoticeBoardClient<$Result.GetResult<Prisma.$NoticeBoardPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many NoticeBoards.
     * @param {NoticeBoardCreateManyArgs} args - Arguments to create many NoticeBoards.
     * @example
     * // Create many NoticeBoards
     * const noticeBoard = await prisma.noticeBoard.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoticeBoardCreateManyArgs>(args?: SelectSubset<T, NoticeBoardCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NoticeBoard.
     * @param {NoticeBoardDeleteArgs} args - Arguments to delete one NoticeBoard.
     * @example
     * // Delete one NoticeBoard
     * const NoticeBoard = await prisma.noticeBoard.delete({
     *   where: {
     *     // ... filter to delete one NoticeBoard
     *   }
     * })
     * 
     */
    delete<T extends NoticeBoardDeleteArgs>(args: SelectSubset<T, NoticeBoardDeleteArgs<ExtArgs>>): Prisma__NoticeBoardClient<$Result.GetResult<Prisma.$NoticeBoardPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one NoticeBoard.
     * @param {NoticeBoardUpdateArgs} args - Arguments to update one NoticeBoard.
     * @example
     * // Update one NoticeBoard
     * const noticeBoard = await prisma.noticeBoard.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoticeBoardUpdateArgs>(args: SelectSubset<T, NoticeBoardUpdateArgs<ExtArgs>>): Prisma__NoticeBoardClient<$Result.GetResult<Prisma.$NoticeBoardPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more NoticeBoards.
     * @param {NoticeBoardDeleteManyArgs} args - Arguments to filter NoticeBoards to delete.
     * @example
     * // Delete a few NoticeBoards
     * const { count } = await prisma.noticeBoard.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoticeBoardDeleteManyArgs>(args?: SelectSubset<T, NoticeBoardDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NoticeBoards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeBoardUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NoticeBoards
     * const noticeBoard = await prisma.noticeBoard.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoticeBoardUpdateManyArgs>(args: SelectSubset<T, NoticeBoardUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NoticeBoard.
     * @param {NoticeBoardUpsertArgs} args - Arguments to update or create a NoticeBoard.
     * @example
     * // Update or create a NoticeBoard
     * const noticeBoard = await prisma.noticeBoard.upsert({
     *   create: {
     *     // ... data to create a NoticeBoard
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NoticeBoard we want to update
     *   }
     * })
     */
    upsert<T extends NoticeBoardUpsertArgs>(args: SelectSubset<T, NoticeBoardUpsertArgs<ExtArgs>>): Prisma__NoticeBoardClient<$Result.GetResult<Prisma.$NoticeBoardPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of NoticeBoards.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeBoardCountArgs} args - Arguments to filter NoticeBoards to count.
     * @example
     * // Count the number of NoticeBoards
     * const count = await prisma.noticeBoard.count({
     *   where: {
     *     // ... the filter for the NoticeBoards we want to count
     *   }
     * })
    **/
    count<T extends NoticeBoardCountArgs>(
      args?: Subset<T, NoticeBoardCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoticeBoardCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NoticeBoard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeBoardAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoticeBoardAggregateArgs>(args: Subset<T, NoticeBoardAggregateArgs>): Prisma.PrismaPromise<GetNoticeBoardAggregateType<T>>

    /**
     * Group by NoticeBoard.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticeBoardGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoticeBoardGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoticeBoardGroupByArgs['orderBy'] }
        : { orderBy?: NoticeBoardGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoticeBoardGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoticeBoardGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NoticeBoard model
   */
  readonly fields: NoticeBoardFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NoticeBoard.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoticeBoardClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NoticeBoard model
   */ 
  interface NoticeBoardFieldRefs {
    readonly id: FieldRef<"NoticeBoard", 'Int'>
    readonly title: FieldRef<"NoticeBoard", 'String'>
    readonly content: FieldRef<"NoticeBoard", 'String'>
    readonly createdAt: FieldRef<"NoticeBoard", 'DateTime'>
    readonly updatedAt: FieldRef<"NoticeBoard", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NoticeBoard findUnique
   */
  export type NoticeBoardFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBoard
     */
    select?: NoticeBoardSelect<ExtArgs> | null
    /**
     * Filter, which NoticeBoard to fetch.
     */
    where: NoticeBoardWhereUniqueInput
  }

  /**
   * NoticeBoard findUniqueOrThrow
   */
  export type NoticeBoardFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBoard
     */
    select?: NoticeBoardSelect<ExtArgs> | null
    /**
     * Filter, which NoticeBoard to fetch.
     */
    where: NoticeBoardWhereUniqueInput
  }

  /**
   * NoticeBoard findFirst
   */
  export type NoticeBoardFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBoard
     */
    select?: NoticeBoardSelect<ExtArgs> | null
    /**
     * Filter, which NoticeBoard to fetch.
     */
    where?: NoticeBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeBoards to fetch.
     */
    orderBy?: NoticeBoardOrderByWithRelationInput | NoticeBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NoticeBoards.
     */
    cursor?: NoticeBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NoticeBoards.
     */
    distinct?: NoticeBoardScalarFieldEnum | NoticeBoardScalarFieldEnum[]
  }

  /**
   * NoticeBoard findFirstOrThrow
   */
  export type NoticeBoardFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBoard
     */
    select?: NoticeBoardSelect<ExtArgs> | null
    /**
     * Filter, which NoticeBoard to fetch.
     */
    where?: NoticeBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeBoards to fetch.
     */
    orderBy?: NoticeBoardOrderByWithRelationInput | NoticeBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NoticeBoards.
     */
    cursor?: NoticeBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeBoards.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NoticeBoards.
     */
    distinct?: NoticeBoardScalarFieldEnum | NoticeBoardScalarFieldEnum[]
  }

  /**
   * NoticeBoard findMany
   */
  export type NoticeBoardFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBoard
     */
    select?: NoticeBoardSelect<ExtArgs> | null
    /**
     * Filter, which NoticeBoards to fetch.
     */
    where?: NoticeBoardWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NoticeBoards to fetch.
     */
    orderBy?: NoticeBoardOrderByWithRelationInput | NoticeBoardOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NoticeBoards.
     */
    cursor?: NoticeBoardWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NoticeBoards from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NoticeBoards.
     */
    skip?: number
    distinct?: NoticeBoardScalarFieldEnum | NoticeBoardScalarFieldEnum[]
  }

  /**
   * NoticeBoard create
   */
  export type NoticeBoardCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBoard
     */
    select?: NoticeBoardSelect<ExtArgs> | null
    /**
     * The data needed to create a NoticeBoard.
     */
    data: XOR<NoticeBoardCreateInput, NoticeBoardUncheckedCreateInput>
  }

  /**
   * NoticeBoard createMany
   */
  export type NoticeBoardCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NoticeBoards.
     */
    data: NoticeBoardCreateManyInput | NoticeBoardCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NoticeBoard update
   */
  export type NoticeBoardUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBoard
     */
    select?: NoticeBoardSelect<ExtArgs> | null
    /**
     * The data needed to update a NoticeBoard.
     */
    data: XOR<NoticeBoardUpdateInput, NoticeBoardUncheckedUpdateInput>
    /**
     * Choose, which NoticeBoard to update.
     */
    where: NoticeBoardWhereUniqueInput
  }

  /**
   * NoticeBoard updateMany
   */
  export type NoticeBoardUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NoticeBoards.
     */
    data: XOR<NoticeBoardUpdateManyMutationInput, NoticeBoardUncheckedUpdateManyInput>
    /**
     * Filter which NoticeBoards to update
     */
    where?: NoticeBoardWhereInput
  }

  /**
   * NoticeBoard upsert
   */
  export type NoticeBoardUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBoard
     */
    select?: NoticeBoardSelect<ExtArgs> | null
    /**
     * The filter to search for the NoticeBoard to update in case it exists.
     */
    where: NoticeBoardWhereUniqueInput
    /**
     * In case the NoticeBoard found by the `where` argument doesn't exist, create a new NoticeBoard with this data.
     */
    create: XOR<NoticeBoardCreateInput, NoticeBoardUncheckedCreateInput>
    /**
     * In case the NoticeBoard was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoticeBoardUpdateInput, NoticeBoardUncheckedUpdateInput>
  }

  /**
   * NoticeBoard delete
   */
  export type NoticeBoardDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBoard
     */
    select?: NoticeBoardSelect<ExtArgs> | null
    /**
     * Filter which NoticeBoard to delete.
     */
    where: NoticeBoardWhereUniqueInput
  }

  /**
   * NoticeBoard deleteMany
   */
  export type NoticeBoardDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NoticeBoards to delete
     */
    where?: NoticeBoardWhereInput
  }

  /**
   * NoticeBoard without action
   */
  export type NoticeBoardDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NoticeBoard
     */
    select?: NoticeBoardSelect<ExtArgs> | null
  }


  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportAvgAggregateOutputType = {
    id: number | null
    orderId: number | null
    outletId: number | null
    userId: number | null
    journeyPlanId: number | null
  }

  export type ReportSumAggregateOutputType = {
    id: number | null
    orderId: number | null
    outletId: number | null
    userId: number | null
    journeyPlanId: number | null
  }

  export type ReportMinAggregateOutputType = {
    id: number | null
    orderId: number | null
    outletId: number | null
    createdAt: Date | null
    userId: number | null
    journeyPlanId: number | null
    type: $Enums.ReportType | null
  }

  export type ReportMaxAggregateOutputType = {
    id: number | null
    orderId: number | null
    outletId: number | null
    createdAt: Date | null
    userId: number | null
    journeyPlanId: number | null
    type: $Enums.ReportType | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    orderId: number
    outletId: number
    createdAt: number
    userId: number
    journeyPlanId: number
    type: number
    _all: number
  }


  export type ReportAvgAggregateInputType = {
    id?: true
    orderId?: true
    outletId?: true
    userId?: true
    journeyPlanId?: true
  }

  export type ReportSumAggregateInputType = {
    id?: true
    orderId?: true
    outletId?: true
    userId?: true
    journeyPlanId?: true
  }

  export type ReportMinAggregateInputType = {
    id?: true
    orderId?: true
    outletId?: true
    createdAt?: true
    userId?: true
    journeyPlanId?: true
    type?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    orderId?: true
    outletId?: true
    createdAt?: true
    userId?: true
    journeyPlanId?: true
    type?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    orderId?: true
    outletId?: true
    createdAt?: true
    userId?: true
    journeyPlanId?: true
    type?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _avg?: ReportAvgAggregateInputType
    _sum?: ReportSumAggregateInputType
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    id: number
    orderId: number | null
    outletId: number
    createdAt: Date
    userId: number
    journeyPlanId: number | null
    type: $Enums.ReportType
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    orderId?: boolean
    outletId?: boolean
    createdAt?: boolean
    userId?: boolean
    journeyPlanId?: boolean
    type?: boolean
    feedbackReport?: boolean | Report$feedbackReportArgs<ExtArgs>
    productReport?: boolean | Report$productReportArgs<ExtArgs>
    journeyPlan?: boolean | Report$journeyPlanArgs<ExtArgs>
    order?: boolean | Report$orderArgs<ExtArgs>
    outlet?: boolean | OutletDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    visibilityReport?: boolean | Report$visibilityReportArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>


  export type ReportSelectScalar = {
    id?: boolean
    orderId?: boolean
    outletId?: boolean
    createdAt?: boolean
    userId?: boolean
    journeyPlanId?: boolean
    type?: boolean
  }

  export type ReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedbackReport?: boolean | Report$feedbackReportArgs<ExtArgs>
    productReport?: boolean | Report$productReportArgs<ExtArgs>
    journeyPlan?: boolean | Report$journeyPlanArgs<ExtArgs>
    order?: boolean | Report$orderArgs<ExtArgs>
    outlet?: boolean | OutletDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    visibilityReport?: boolean | Report$visibilityReportArgs<ExtArgs>
  }

  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {
      feedbackReport: Prisma.$FeedbackReportPayload<ExtArgs> | null
      productReport: Prisma.$ProductReportPayload<ExtArgs> | null
      journeyPlan: Prisma.$JourneyPlanPayload<ExtArgs> | null
      order: Prisma.$OrderPayload<ExtArgs> | null
      outlet: Prisma.$OutletPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      visibilityReport: Prisma.$VisibilityReportPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      orderId: number | null
      outletId: number
      createdAt: Date
      userId: number
      journeyPlanId: number | null
      type: $Enums.ReportType
    }, ExtArgs["result"]["report"]>
    composites: {}
  }

  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFindUniqueArgs>(args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Report that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFindFirstArgs>(args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportFindManyArgs>(args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
     */
    create<T extends ReportCreateArgs>(args: SelectSubset<T, ReportCreateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reports.
     * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCreateManyArgs>(args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
     */
    delete<T extends ReportDeleteArgs>(args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportUpdateArgs>(args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDeleteManyArgs>(args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportUpdateManyArgs>(args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
     */
    upsert<T extends ReportUpsertArgs>(args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    feedbackReport<T extends Report$feedbackReportArgs<ExtArgs> = {}>(args?: Subset<T, Report$feedbackReportArgs<ExtArgs>>): Prisma__FeedbackReportClient<$Result.GetResult<Prisma.$FeedbackReportPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    productReport<T extends Report$productReportArgs<ExtArgs> = {}>(args?: Subset<T, Report$productReportArgs<ExtArgs>>): Prisma__ProductReportClient<$Result.GetResult<Prisma.$ProductReportPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    journeyPlan<T extends Report$journeyPlanArgs<ExtArgs> = {}>(args?: Subset<T, Report$journeyPlanArgs<ExtArgs>>): Prisma__JourneyPlanClient<$Result.GetResult<Prisma.$JourneyPlanPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    order<T extends Report$orderArgs<ExtArgs> = {}>(args?: Subset<T, Report$orderArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    outlet<T extends OutletDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OutletDefaultArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    visibilityReport<T extends Report$visibilityReportArgs<ExtArgs> = {}>(args?: Subset<T, Report$visibilityReportArgs<ExtArgs>>): Prisma__VisibilityReportClient<$Result.GetResult<Prisma.$VisibilityReportPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Report model
   */ 
  interface ReportFieldRefs {
    readonly id: FieldRef<"Report", 'Int'>
    readonly orderId: FieldRef<"Report", 'Int'>
    readonly outletId: FieldRef<"Report", 'Int'>
    readonly createdAt: FieldRef<"Report", 'DateTime'>
    readonly userId: FieldRef<"Report", 'Int'>
    readonly journeyPlanId: FieldRef<"Report", 'Int'>
    readonly type: FieldRef<"Report", 'ReportType'>
  }
    

  // Custom InputTypes
  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }

  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
  }

  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }

  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
  }

  /**
   * Report.feedbackReport
   */
  export type Report$feedbackReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReport
     */
    select?: FeedbackReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReportInclude<ExtArgs> | null
    where?: FeedbackReportWhereInput
  }

  /**
   * Report.productReport
   */
  export type Report$productReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReport
     */
    select?: ProductReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductReportInclude<ExtArgs> | null
    where?: ProductReportWhereInput
  }

  /**
   * Report.journeyPlan
   */
  export type Report$journeyPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JourneyPlan
     */
    select?: JourneyPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JourneyPlanInclude<ExtArgs> | null
    where?: JourneyPlanWhereInput
  }

  /**
   * Report.order
   */
  export type Report$orderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
  }

  /**
   * Report.visibilityReport
   */
  export type Report$visibilityReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisibilityReport
     */
    select?: VisibilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisibilityReportInclude<ExtArgs> | null
    where?: VisibilityReportWhereInput
  }

  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
  }


  /**
   * Model FeedbackReport
   */

  export type AggregateFeedbackReport = {
    _count: FeedbackReportCountAggregateOutputType | null
    _avg: FeedbackReportAvgAggregateOutputType | null
    _sum: FeedbackReportSumAggregateOutputType | null
    _min: FeedbackReportMinAggregateOutputType | null
    _max: FeedbackReportMaxAggregateOutputType | null
  }

  export type FeedbackReportAvgAggregateOutputType = {
    reportId: number | null
  }

  export type FeedbackReportSumAggregateOutputType = {
    reportId: number | null
  }

  export type FeedbackReportMinAggregateOutputType = {
    reportId: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type FeedbackReportMaxAggregateOutputType = {
    reportId: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type FeedbackReportCountAggregateOutputType = {
    reportId: number
    comment: number
    createdAt: number
    _all: number
  }


  export type FeedbackReportAvgAggregateInputType = {
    reportId?: true
  }

  export type FeedbackReportSumAggregateInputType = {
    reportId?: true
  }

  export type FeedbackReportMinAggregateInputType = {
    reportId?: true
    comment?: true
    createdAt?: true
  }

  export type FeedbackReportMaxAggregateInputType = {
    reportId?: true
    comment?: true
    createdAt?: true
  }

  export type FeedbackReportCountAggregateInputType = {
    reportId?: true
    comment?: true
    createdAt?: true
    _all?: true
  }

  export type FeedbackReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedbackReport to aggregate.
     */
    where?: FeedbackReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackReports to fetch.
     */
    orderBy?: FeedbackReportOrderByWithRelationInput | FeedbackReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeedbackReports
    **/
    _count?: true | FeedbackReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackReportMaxAggregateInputType
  }

  export type GetFeedbackReportAggregateType<T extends FeedbackReportAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedbackReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedbackReport[P]>
      : GetScalarType<T[P], AggregateFeedbackReport[P]>
  }




  export type FeedbackReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackReportWhereInput
    orderBy?: FeedbackReportOrderByWithAggregationInput | FeedbackReportOrderByWithAggregationInput[]
    by: FeedbackReportScalarFieldEnum[] | FeedbackReportScalarFieldEnum
    having?: FeedbackReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackReportCountAggregateInputType | true
    _avg?: FeedbackReportAvgAggregateInputType
    _sum?: FeedbackReportSumAggregateInputType
    _min?: FeedbackReportMinAggregateInputType
    _max?: FeedbackReportMaxAggregateInputType
  }

  export type FeedbackReportGroupByOutputType = {
    reportId: number
    comment: string | null
    createdAt: Date
    _count: FeedbackReportCountAggregateOutputType | null
    _avg: FeedbackReportAvgAggregateOutputType | null
    _sum: FeedbackReportSumAggregateOutputType | null
    _min: FeedbackReportMinAggregateOutputType | null
    _max: FeedbackReportMaxAggregateOutputType | null
  }

  type GetFeedbackReportGroupByPayload<T extends FeedbackReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackReportGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackReportGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    reportId?: boolean
    comment?: boolean
    createdAt?: boolean
    report?: boolean | ReportDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedbackReport"]>


  export type FeedbackReportSelectScalar = {
    reportId?: boolean
    comment?: boolean
    createdAt?: boolean
  }

  export type FeedbackReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | ReportDefaultArgs<ExtArgs>
  }

  export type $FeedbackReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeedbackReport"
    objects: {
      report: Prisma.$ReportPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      reportId: number
      comment: string | null
      createdAt: Date
    }, ExtArgs["result"]["feedbackReport"]>
    composites: {}
  }

  type FeedbackReportGetPayload<S extends boolean | null | undefined | FeedbackReportDefaultArgs> = $Result.GetResult<Prisma.$FeedbackReportPayload, S>

  type FeedbackReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeedbackReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeedbackReportCountAggregateInputType | true
    }

  export interface FeedbackReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeedbackReport'], meta: { name: 'FeedbackReport' } }
    /**
     * Find zero or one FeedbackReport that matches the filter.
     * @param {FeedbackReportFindUniqueArgs} args - Arguments to find a FeedbackReport
     * @example
     * // Get one FeedbackReport
     * const feedbackReport = await prisma.feedbackReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackReportFindUniqueArgs>(args: SelectSubset<T, FeedbackReportFindUniqueArgs<ExtArgs>>): Prisma__FeedbackReportClient<$Result.GetResult<Prisma.$FeedbackReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FeedbackReport that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FeedbackReportFindUniqueOrThrowArgs} args - Arguments to find a FeedbackReport
     * @example
     * // Get one FeedbackReport
     * const feedbackReport = await prisma.feedbackReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackReportFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackReportClient<$Result.GetResult<Prisma.$FeedbackReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FeedbackReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackReportFindFirstArgs} args - Arguments to find a FeedbackReport
     * @example
     * // Get one FeedbackReport
     * const feedbackReport = await prisma.feedbackReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackReportFindFirstArgs>(args?: SelectSubset<T, FeedbackReportFindFirstArgs<ExtArgs>>): Prisma__FeedbackReportClient<$Result.GetResult<Prisma.$FeedbackReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FeedbackReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackReportFindFirstOrThrowArgs} args - Arguments to find a FeedbackReport
     * @example
     * // Get one FeedbackReport
     * const feedbackReport = await prisma.feedbackReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackReportFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackReportClient<$Result.GetResult<Prisma.$FeedbackReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FeedbackReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeedbackReports
     * const feedbackReports = await prisma.feedbackReport.findMany()
     * 
     * // Get first 10 FeedbackReports
     * const feedbackReports = await prisma.feedbackReport.findMany({ take: 10 })
     * 
     * // Only select the `reportId`
     * const feedbackReportWithReportIdOnly = await prisma.feedbackReport.findMany({ select: { reportId: true } })
     * 
     */
    findMany<T extends FeedbackReportFindManyArgs>(args?: SelectSubset<T, FeedbackReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FeedbackReport.
     * @param {FeedbackReportCreateArgs} args - Arguments to create a FeedbackReport.
     * @example
     * // Create one FeedbackReport
     * const FeedbackReport = await prisma.feedbackReport.create({
     *   data: {
     *     // ... data to create a FeedbackReport
     *   }
     * })
     * 
     */
    create<T extends FeedbackReportCreateArgs>(args: SelectSubset<T, FeedbackReportCreateArgs<ExtArgs>>): Prisma__FeedbackReportClient<$Result.GetResult<Prisma.$FeedbackReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FeedbackReports.
     * @param {FeedbackReportCreateManyArgs} args - Arguments to create many FeedbackReports.
     * @example
     * // Create many FeedbackReports
     * const feedbackReport = await prisma.feedbackReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackReportCreateManyArgs>(args?: SelectSubset<T, FeedbackReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FeedbackReport.
     * @param {FeedbackReportDeleteArgs} args - Arguments to delete one FeedbackReport.
     * @example
     * // Delete one FeedbackReport
     * const FeedbackReport = await prisma.feedbackReport.delete({
     *   where: {
     *     // ... filter to delete one FeedbackReport
     *   }
     * })
     * 
     */
    delete<T extends FeedbackReportDeleteArgs>(args: SelectSubset<T, FeedbackReportDeleteArgs<ExtArgs>>): Prisma__FeedbackReportClient<$Result.GetResult<Prisma.$FeedbackReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FeedbackReport.
     * @param {FeedbackReportUpdateArgs} args - Arguments to update one FeedbackReport.
     * @example
     * // Update one FeedbackReport
     * const feedbackReport = await prisma.feedbackReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackReportUpdateArgs>(args: SelectSubset<T, FeedbackReportUpdateArgs<ExtArgs>>): Prisma__FeedbackReportClient<$Result.GetResult<Prisma.$FeedbackReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FeedbackReports.
     * @param {FeedbackReportDeleteManyArgs} args - Arguments to filter FeedbackReports to delete.
     * @example
     * // Delete a few FeedbackReports
     * const { count } = await prisma.feedbackReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackReportDeleteManyArgs>(args?: SelectSubset<T, FeedbackReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedbackReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeedbackReports
     * const feedbackReport = await prisma.feedbackReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackReportUpdateManyArgs>(args: SelectSubset<T, FeedbackReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FeedbackReport.
     * @param {FeedbackReportUpsertArgs} args - Arguments to update or create a FeedbackReport.
     * @example
     * // Update or create a FeedbackReport
     * const feedbackReport = await prisma.feedbackReport.upsert({
     *   create: {
     *     // ... data to create a FeedbackReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeedbackReport we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackReportUpsertArgs>(args: SelectSubset<T, FeedbackReportUpsertArgs<ExtArgs>>): Prisma__FeedbackReportClient<$Result.GetResult<Prisma.$FeedbackReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FeedbackReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackReportCountArgs} args - Arguments to filter FeedbackReports to count.
     * @example
     * // Count the number of FeedbackReports
     * const count = await prisma.feedbackReport.count({
     *   where: {
     *     // ... the filter for the FeedbackReports we want to count
     *   }
     * })
    **/
    count<T extends FeedbackReportCountArgs>(
      args?: Subset<T, FeedbackReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeedbackReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackReportAggregateArgs>(args: Subset<T, FeedbackReportAggregateArgs>): Prisma.PrismaPromise<GetFeedbackReportAggregateType<T>>

    /**
     * Group by FeedbackReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackReportGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeedbackReport model
   */
  readonly fields: FeedbackReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeedbackReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    report<T extends ReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReportDefaultArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeedbackReport model
   */ 
  interface FeedbackReportFieldRefs {
    readonly reportId: FieldRef<"FeedbackReport", 'Int'>
    readonly comment: FieldRef<"FeedbackReport", 'String'>
    readonly createdAt: FieldRef<"FeedbackReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FeedbackReport findUnique
   */
  export type FeedbackReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReport
     */
    select?: FeedbackReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReportInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackReport to fetch.
     */
    where: FeedbackReportWhereUniqueInput
  }

  /**
   * FeedbackReport findUniqueOrThrow
   */
  export type FeedbackReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReport
     */
    select?: FeedbackReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReportInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackReport to fetch.
     */
    where: FeedbackReportWhereUniqueInput
  }

  /**
   * FeedbackReport findFirst
   */
  export type FeedbackReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReport
     */
    select?: FeedbackReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReportInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackReport to fetch.
     */
    where?: FeedbackReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackReports to fetch.
     */
    orderBy?: FeedbackReportOrderByWithRelationInput | FeedbackReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedbackReports.
     */
    cursor?: FeedbackReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedbackReports.
     */
    distinct?: FeedbackReportScalarFieldEnum | FeedbackReportScalarFieldEnum[]
  }

  /**
   * FeedbackReport findFirstOrThrow
   */
  export type FeedbackReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReport
     */
    select?: FeedbackReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReportInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackReport to fetch.
     */
    where?: FeedbackReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackReports to fetch.
     */
    orderBy?: FeedbackReportOrderByWithRelationInput | FeedbackReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedbackReports.
     */
    cursor?: FeedbackReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedbackReports.
     */
    distinct?: FeedbackReportScalarFieldEnum | FeedbackReportScalarFieldEnum[]
  }

  /**
   * FeedbackReport findMany
   */
  export type FeedbackReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReport
     */
    select?: FeedbackReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReportInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackReports to fetch.
     */
    where?: FeedbackReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackReports to fetch.
     */
    orderBy?: FeedbackReportOrderByWithRelationInput | FeedbackReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeedbackReports.
     */
    cursor?: FeedbackReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackReports.
     */
    skip?: number
    distinct?: FeedbackReportScalarFieldEnum | FeedbackReportScalarFieldEnum[]
  }

  /**
   * FeedbackReport create
   */
  export type FeedbackReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReport
     */
    select?: FeedbackReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReportInclude<ExtArgs> | null
    /**
     * The data needed to create a FeedbackReport.
     */
    data: XOR<FeedbackReportCreateInput, FeedbackReportUncheckedCreateInput>
  }

  /**
   * FeedbackReport createMany
   */
  export type FeedbackReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeedbackReports.
     */
    data: FeedbackReportCreateManyInput | FeedbackReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeedbackReport update
   */
  export type FeedbackReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReport
     */
    select?: FeedbackReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReportInclude<ExtArgs> | null
    /**
     * The data needed to update a FeedbackReport.
     */
    data: XOR<FeedbackReportUpdateInput, FeedbackReportUncheckedUpdateInput>
    /**
     * Choose, which FeedbackReport to update.
     */
    where: FeedbackReportWhereUniqueInput
  }

  /**
   * FeedbackReport updateMany
   */
  export type FeedbackReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeedbackReports.
     */
    data: XOR<FeedbackReportUpdateManyMutationInput, FeedbackReportUncheckedUpdateManyInput>
    /**
     * Filter which FeedbackReports to update
     */
    where?: FeedbackReportWhereInput
  }

  /**
   * FeedbackReport upsert
   */
  export type FeedbackReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReport
     */
    select?: FeedbackReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReportInclude<ExtArgs> | null
    /**
     * The filter to search for the FeedbackReport to update in case it exists.
     */
    where: FeedbackReportWhereUniqueInput
    /**
     * In case the FeedbackReport found by the `where` argument doesn't exist, create a new FeedbackReport with this data.
     */
    create: XOR<FeedbackReportCreateInput, FeedbackReportUncheckedCreateInput>
    /**
     * In case the FeedbackReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackReportUpdateInput, FeedbackReportUncheckedUpdateInput>
  }

  /**
   * FeedbackReport delete
   */
  export type FeedbackReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReport
     */
    select?: FeedbackReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReportInclude<ExtArgs> | null
    /**
     * Filter which FeedbackReport to delete.
     */
    where: FeedbackReportWhereUniqueInput
  }

  /**
   * FeedbackReport deleteMany
   */
  export type FeedbackReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedbackReports to delete
     */
    where?: FeedbackReportWhereInput
  }

  /**
   * FeedbackReport without action
   */
  export type FeedbackReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackReport
     */
    select?: FeedbackReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackReportInclude<ExtArgs> | null
  }


  /**
   * Model ProductReport
   */

  export type AggregateProductReport = {
    _count: ProductReportCountAggregateOutputType | null
    _avg: ProductReportAvgAggregateOutputType | null
    _sum: ProductReportSumAggregateOutputType | null
    _min: ProductReportMinAggregateOutputType | null
    _max: ProductReportMaxAggregateOutputType | null
  }

  export type ProductReportAvgAggregateOutputType = {
    reportId: number | null
    quantity: number | null
  }

  export type ProductReportSumAggregateOutputType = {
    reportId: number | null
    quantity: number | null
  }

  export type ProductReportMinAggregateOutputType = {
    reportId: number | null
    productName: string | null
    quantity: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type ProductReportMaxAggregateOutputType = {
    reportId: number | null
    productName: string | null
    quantity: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type ProductReportCountAggregateOutputType = {
    reportId: number
    productName: number
    quantity: number
    comment: number
    createdAt: number
    _all: number
  }


  export type ProductReportAvgAggregateInputType = {
    reportId?: true
    quantity?: true
  }

  export type ProductReportSumAggregateInputType = {
    reportId?: true
    quantity?: true
  }

  export type ProductReportMinAggregateInputType = {
    reportId?: true
    productName?: true
    quantity?: true
    comment?: true
    createdAt?: true
  }

  export type ProductReportMaxAggregateInputType = {
    reportId?: true
    productName?: true
    quantity?: true
    comment?: true
    createdAt?: true
  }

  export type ProductReportCountAggregateInputType = {
    reportId?: true
    productName?: true
    quantity?: true
    comment?: true
    createdAt?: true
    _all?: true
  }

  export type ProductReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductReport to aggregate.
     */
    where?: ProductReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductReports to fetch.
     */
    orderBy?: ProductReportOrderByWithRelationInput | ProductReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductReports
    **/
    _count?: true | ProductReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductReportMaxAggregateInputType
  }

  export type GetProductReportAggregateType<T extends ProductReportAggregateArgs> = {
        [P in keyof T & keyof AggregateProductReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductReport[P]>
      : GetScalarType<T[P], AggregateProductReport[P]>
  }




  export type ProductReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductReportWhereInput
    orderBy?: ProductReportOrderByWithAggregationInput | ProductReportOrderByWithAggregationInput[]
    by: ProductReportScalarFieldEnum[] | ProductReportScalarFieldEnum
    having?: ProductReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductReportCountAggregateInputType | true
    _avg?: ProductReportAvgAggregateInputType
    _sum?: ProductReportSumAggregateInputType
    _min?: ProductReportMinAggregateInputType
    _max?: ProductReportMaxAggregateInputType
  }

  export type ProductReportGroupByOutputType = {
    reportId: number
    productName: string | null
    quantity: number | null
    comment: string | null
    createdAt: Date
    _count: ProductReportCountAggregateOutputType | null
    _avg: ProductReportAvgAggregateOutputType | null
    _sum: ProductReportSumAggregateOutputType | null
    _min: ProductReportMinAggregateOutputType | null
    _max: ProductReportMaxAggregateOutputType | null
  }

  type GetProductReportGroupByPayload<T extends ProductReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductReportGroupByOutputType[P]>
            : GetScalarType<T[P], ProductReportGroupByOutputType[P]>
        }
      >
    >


  export type ProductReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    reportId?: boolean
    productName?: boolean
    quantity?: boolean
    comment?: boolean
    createdAt?: boolean
    report?: boolean | ReportDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productReport"]>


  export type ProductReportSelectScalar = {
    reportId?: boolean
    productName?: boolean
    quantity?: boolean
    comment?: boolean
    createdAt?: boolean
  }

  export type ProductReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | ReportDefaultArgs<ExtArgs>
  }

  export type $ProductReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductReport"
    objects: {
      report: Prisma.$ReportPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      reportId: number
      productName: string | null
      quantity: number | null
      comment: string | null
      createdAt: Date
    }, ExtArgs["result"]["productReport"]>
    composites: {}
  }

  type ProductReportGetPayload<S extends boolean | null | undefined | ProductReportDefaultArgs> = $Result.GetResult<Prisma.$ProductReportPayload, S>

  type ProductReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductReportCountAggregateInputType | true
    }

  export interface ProductReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductReport'], meta: { name: 'ProductReport' } }
    /**
     * Find zero or one ProductReport that matches the filter.
     * @param {ProductReportFindUniqueArgs} args - Arguments to find a ProductReport
     * @example
     * // Get one ProductReport
     * const productReport = await prisma.productReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductReportFindUniqueArgs>(args: SelectSubset<T, ProductReportFindUniqueArgs<ExtArgs>>): Prisma__ProductReportClient<$Result.GetResult<Prisma.$ProductReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProductReport that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductReportFindUniqueOrThrowArgs} args - Arguments to find a ProductReport
     * @example
     * // Get one ProductReport
     * const productReport = await prisma.productReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductReportClient<$Result.GetResult<Prisma.$ProductReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProductReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductReportFindFirstArgs} args - Arguments to find a ProductReport
     * @example
     * // Get one ProductReport
     * const productReport = await prisma.productReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductReportFindFirstArgs>(args?: SelectSubset<T, ProductReportFindFirstArgs<ExtArgs>>): Prisma__ProductReportClient<$Result.GetResult<Prisma.$ProductReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProductReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductReportFindFirstOrThrowArgs} args - Arguments to find a ProductReport
     * @example
     * // Get one ProductReport
     * const productReport = await prisma.productReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductReportClient<$Result.GetResult<Prisma.$ProductReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProductReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductReports
     * const productReports = await prisma.productReport.findMany()
     * 
     * // Get first 10 ProductReports
     * const productReports = await prisma.productReport.findMany({ take: 10 })
     * 
     * // Only select the `reportId`
     * const productReportWithReportIdOnly = await prisma.productReport.findMany({ select: { reportId: true } })
     * 
     */
    findMany<T extends ProductReportFindManyArgs>(args?: SelectSubset<T, ProductReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProductReport.
     * @param {ProductReportCreateArgs} args - Arguments to create a ProductReport.
     * @example
     * // Create one ProductReport
     * const ProductReport = await prisma.productReport.create({
     *   data: {
     *     // ... data to create a ProductReport
     *   }
     * })
     * 
     */
    create<T extends ProductReportCreateArgs>(args: SelectSubset<T, ProductReportCreateArgs<ExtArgs>>): Prisma__ProductReportClient<$Result.GetResult<Prisma.$ProductReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProductReports.
     * @param {ProductReportCreateManyArgs} args - Arguments to create many ProductReports.
     * @example
     * // Create many ProductReports
     * const productReport = await prisma.productReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductReportCreateManyArgs>(args?: SelectSubset<T, ProductReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductReport.
     * @param {ProductReportDeleteArgs} args - Arguments to delete one ProductReport.
     * @example
     * // Delete one ProductReport
     * const ProductReport = await prisma.productReport.delete({
     *   where: {
     *     // ... filter to delete one ProductReport
     *   }
     * })
     * 
     */
    delete<T extends ProductReportDeleteArgs>(args: SelectSubset<T, ProductReportDeleteArgs<ExtArgs>>): Prisma__ProductReportClient<$Result.GetResult<Prisma.$ProductReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProductReport.
     * @param {ProductReportUpdateArgs} args - Arguments to update one ProductReport.
     * @example
     * // Update one ProductReport
     * const productReport = await prisma.productReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductReportUpdateArgs>(args: SelectSubset<T, ProductReportUpdateArgs<ExtArgs>>): Prisma__ProductReportClient<$Result.GetResult<Prisma.$ProductReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProductReports.
     * @param {ProductReportDeleteManyArgs} args - Arguments to filter ProductReports to delete.
     * @example
     * // Delete a few ProductReports
     * const { count } = await prisma.productReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductReportDeleteManyArgs>(args?: SelectSubset<T, ProductReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductReports
     * const productReport = await prisma.productReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductReportUpdateManyArgs>(args: SelectSubset<T, ProductReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductReport.
     * @param {ProductReportUpsertArgs} args - Arguments to update or create a ProductReport.
     * @example
     * // Update or create a ProductReport
     * const productReport = await prisma.productReport.upsert({
     *   create: {
     *     // ... data to create a ProductReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductReport we want to update
     *   }
     * })
     */
    upsert<T extends ProductReportUpsertArgs>(args: SelectSubset<T, ProductReportUpsertArgs<ExtArgs>>): Prisma__ProductReportClient<$Result.GetResult<Prisma.$ProductReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProductReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductReportCountArgs} args - Arguments to filter ProductReports to count.
     * @example
     * // Count the number of ProductReports
     * const count = await prisma.productReport.count({
     *   where: {
     *     // ... the filter for the ProductReports we want to count
     *   }
     * })
    **/
    count<T extends ProductReportCountArgs>(
      args?: Subset<T, ProductReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductReportAggregateArgs>(args: Subset<T, ProductReportAggregateArgs>): Prisma.PrismaPromise<GetProductReportAggregateType<T>>

    /**
     * Group by ProductReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductReportGroupByArgs['orderBy'] }
        : { orderBy?: ProductReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductReport model
   */
  readonly fields: ProductReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    report<T extends ReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReportDefaultArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductReport model
   */ 
  interface ProductReportFieldRefs {
    readonly reportId: FieldRef<"ProductReport", 'Int'>
    readonly productName: FieldRef<"ProductReport", 'String'>
    readonly quantity: FieldRef<"ProductReport", 'Int'>
    readonly comment: FieldRef<"ProductReport", 'String'>
    readonly createdAt: FieldRef<"ProductReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProductReport findUnique
   */
  export type ProductReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReport
     */
    select?: ProductReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductReportInclude<ExtArgs> | null
    /**
     * Filter, which ProductReport to fetch.
     */
    where: ProductReportWhereUniqueInput
  }

  /**
   * ProductReport findUniqueOrThrow
   */
  export type ProductReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReport
     */
    select?: ProductReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductReportInclude<ExtArgs> | null
    /**
     * Filter, which ProductReport to fetch.
     */
    where: ProductReportWhereUniqueInput
  }

  /**
   * ProductReport findFirst
   */
  export type ProductReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReport
     */
    select?: ProductReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductReportInclude<ExtArgs> | null
    /**
     * Filter, which ProductReport to fetch.
     */
    where?: ProductReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductReports to fetch.
     */
    orderBy?: ProductReportOrderByWithRelationInput | ProductReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductReports.
     */
    cursor?: ProductReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductReports.
     */
    distinct?: ProductReportScalarFieldEnum | ProductReportScalarFieldEnum[]
  }

  /**
   * ProductReport findFirstOrThrow
   */
  export type ProductReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReport
     */
    select?: ProductReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductReportInclude<ExtArgs> | null
    /**
     * Filter, which ProductReport to fetch.
     */
    where?: ProductReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductReports to fetch.
     */
    orderBy?: ProductReportOrderByWithRelationInput | ProductReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductReports.
     */
    cursor?: ProductReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductReports.
     */
    distinct?: ProductReportScalarFieldEnum | ProductReportScalarFieldEnum[]
  }

  /**
   * ProductReport findMany
   */
  export type ProductReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReport
     */
    select?: ProductReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductReportInclude<ExtArgs> | null
    /**
     * Filter, which ProductReports to fetch.
     */
    where?: ProductReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductReports to fetch.
     */
    orderBy?: ProductReportOrderByWithRelationInput | ProductReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductReports.
     */
    cursor?: ProductReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductReports.
     */
    skip?: number
    distinct?: ProductReportScalarFieldEnum | ProductReportScalarFieldEnum[]
  }

  /**
   * ProductReport create
   */
  export type ProductReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReport
     */
    select?: ProductReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductReportInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductReport.
     */
    data: XOR<ProductReportCreateInput, ProductReportUncheckedCreateInput>
  }

  /**
   * ProductReport createMany
   */
  export type ProductReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductReports.
     */
    data: ProductReportCreateManyInput | ProductReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductReport update
   */
  export type ProductReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReport
     */
    select?: ProductReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductReportInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductReport.
     */
    data: XOR<ProductReportUpdateInput, ProductReportUncheckedUpdateInput>
    /**
     * Choose, which ProductReport to update.
     */
    where: ProductReportWhereUniqueInput
  }

  /**
   * ProductReport updateMany
   */
  export type ProductReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductReports.
     */
    data: XOR<ProductReportUpdateManyMutationInput, ProductReportUncheckedUpdateManyInput>
    /**
     * Filter which ProductReports to update
     */
    where?: ProductReportWhereInput
  }

  /**
   * ProductReport upsert
   */
  export type ProductReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReport
     */
    select?: ProductReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductReportInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductReport to update in case it exists.
     */
    where: ProductReportWhereUniqueInput
    /**
     * In case the ProductReport found by the `where` argument doesn't exist, create a new ProductReport with this data.
     */
    create: XOR<ProductReportCreateInput, ProductReportUncheckedCreateInput>
    /**
     * In case the ProductReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductReportUpdateInput, ProductReportUncheckedUpdateInput>
  }

  /**
   * ProductReport delete
   */
  export type ProductReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReport
     */
    select?: ProductReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductReportInclude<ExtArgs> | null
    /**
     * Filter which ProductReport to delete.
     */
    where: ProductReportWhereUniqueInput
  }

  /**
   * ProductReport deleteMany
   */
  export type ProductReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductReports to delete
     */
    where?: ProductReportWhereInput
  }

  /**
   * ProductReport without action
   */
  export type ProductReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductReport
     */
    select?: ProductReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductReportInclude<ExtArgs> | null
  }


  /**
   * Model VisibilityReport
   */

  export type AggregateVisibilityReport = {
    _count: VisibilityReportCountAggregateOutputType | null
    _avg: VisibilityReportAvgAggregateOutputType | null
    _sum: VisibilityReportSumAggregateOutputType | null
    _min: VisibilityReportMinAggregateOutputType | null
    _max: VisibilityReportMaxAggregateOutputType | null
  }

  export type VisibilityReportAvgAggregateOutputType = {
    reportId: number | null
  }

  export type VisibilityReportSumAggregateOutputType = {
    reportId: number | null
  }

  export type VisibilityReportMinAggregateOutputType = {
    reportId: number | null
    comment: string | null
    imageUrl: string | null
    createdAt: Date | null
  }

  export type VisibilityReportMaxAggregateOutputType = {
    reportId: number | null
    comment: string | null
    imageUrl: string | null
    createdAt: Date | null
  }

  export type VisibilityReportCountAggregateOutputType = {
    reportId: number
    comment: number
    imageUrl: number
    createdAt: number
    _all: number
  }


  export type VisibilityReportAvgAggregateInputType = {
    reportId?: true
  }

  export type VisibilityReportSumAggregateInputType = {
    reportId?: true
  }

  export type VisibilityReportMinAggregateInputType = {
    reportId?: true
    comment?: true
    imageUrl?: true
    createdAt?: true
  }

  export type VisibilityReportMaxAggregateInputType = {
    reportId?: true
    comment?: true
    imageUrl?: true
    createdAt?: true
  }

  export type VisibilityReportCountAggregateInputType = {
    reportId?: true
    comment?: true
    imageUrl?: true
    createdAt?: true
    _all?: true
  }

  export type VisibilityReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VisibilityReport to aggregate.
     */
    where?: VisibilityReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisibilityReports to fetch.
     */
    orderBy?: VisibilityReportOrderByWithRelationInput | VisibilityReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VisibilityReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisibilityReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisibilityReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VisibilityReports
    **/
    _count?: true | VisibilityReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VisibilityReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VisibilityReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VisibilityReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VisibilityReportMaxAggregateInputType
  }

  export type GetVisibilityReportAggregateType<T extends VisibilityReportAggregateArgs> = {
        [P in keyof T & keyof AggregateVisibilityReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVisibilityReport[P]>
      : GetScalarType<T[P], AggregateVisibilityReport[P]>
  }




  export type VisibilityReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VisibilityReportWhereInput
    orderBy?: VisibilityReportOrderByWithAggregationInput | VisibilityReportOrderByWithAggregationInput[]
    by: VisibilityReportScalarFieldEnum[] | VisibilityReportScalarFieldEnum
    having?: VisibilityReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VisibilityReportCountAggregateInputType | true
    _avg?: VisibilityReportAvgAggregateInputType
    _sum?: VisibilityReportSumAggregateInputType
    _min?: VisibilityReportMinAggregateInputType
    _max?: VisibilityReportMaxAggregateInputType
  }

  export type VisibilityReportGroupByOutputType = {
    reportId: number
    comment: string | null
    imageUrl: string | null
    createdAt: Date
    _count: VisibilityReportCountAggregateOutputType | null
    _avg: VisibilityReportAvgAggregateOutputType | null
    _sum: VisibilityReportSumAggregateOutputType | null
    _min: VisibilityReportMinAggregateOutputType | null
    _max: VisibilityReportMaxAggregateOutputType | null
  }

  type GetVisibilityReportGroupByPayload<T extends VisibilityReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VisibilityReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VisibilityReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VisibilityReportGroupByOutputType[P]>
            : GetScalarType<T[P], VisibilityReportGroupByOutputType[P]>
        }
      >
    >


  export type VisibilityReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    reportId?: boolean
    comment?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    report?: boolean | ReportDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["visibilityReport"]>


  export type VisibilityReportSelectScalar = {
    reportId?: boolean
    comment?: boolean
    imageUrl?: boolean
    createdAt?: boolean
  }

  export type VisibilityReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | ReportDefaultArgs<ExtArgs>
  }

  export type $VisibilityReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VisibilityReport"
    objects: {
      report: Prisma.$ReportPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      reportId: number
      comment: string | null
      imageUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["visibilityReport"]>
    composites: {}
  }

  type VisibilityReportGetPayload<S extends boolean | null | undefined | VisibilityReportDefaultArgs> = $Result.GetResult<Prisma.$VisibilityReportPayload, S>

  type VisibilityReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VisibilityReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VisibilityReportCountAggregateInputType | true
    }

  export interface VisibilityReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VisibilityReport'], meta: { name: 'VisibilityReport' } }
    /**
     * Find zero or one VisibilityReport that matches the filter.
     * @param {VisibilityReportFindUniqueArgs} args - Arguments to find a VisibilityReport
     * @example
     * // Get one VisibilityReport
     * const visibilityReport = await prisma.visibilityReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VisibilityReportFindUniqueArgs>(args: SelectSubset<T, VisibilityReportFindUniqueArgs<ExtArgs>>): Prisma__VisibilityReportClient<$Result.GetResult<Prisma.$VisibilityReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VisibilityReport that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VisibilityReportFindUniqueOrThrowArgs} args - Arguments to find a VisibilityReport
     * @example
     * // Get one VisibilityReport
     * const visibilityReport = await prisma.visibilityReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VisibilityReportFindUniqueOrThrowArgs>(args: SelectSubset<T, VisibilityReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VisibilityReportClient<$Result.GetResult<Prisma.$VisibilityReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VisibilityReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisibilityReportFindFirstArgs} args - Arguments to find a VisibilityReport
     * @example
     * // Get one VisibilityReport
     * const visibilityReport = await prisma.visibilityReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VisibilityReportFindFirstArgs>(args?: SelectSubset<T, VisibilityReportFindFirstArgs<ExtArgs>>): Prisma__VisibilityReportClient<$Result.GetResult<Prisma.$VisibilityReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VisibilityReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisibilityReportFindFirstOrThrowArgs} args - Arguments to find a VisibilityReport
     * @example
     * // Get one VisibilityReport
     * const visibilityReport = await prisma.visibilityReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VisibilityReportFindFirstOrThrowArgs>(args?: SelectSubset<T, VisibilityReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__VisibilityReportClient<$Result.GetResult<Prisma.$VisibilityReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VisibilityReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisibilityReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VisibilityReports
     * const visibilityReports = await prisma.visibilityReport.findMany()
     * 
     * // Get first 10 VisibilityReports
     * const visibilityReports = await prisma.visibilityReport.findMany({ take: 10 })
     * 
     * // Only select the `reportId`
     * const visibilityReportWithReportIdOnly = await prisma.visibilityReport.findMany({ select: { reportId: true } })
     * 
     */
    findMany<T extends VisibilityReportFindManyArgs>(args?: SelectSubset<T, VisibilityReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VisibilityReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VisibilityReport.
     * @param {VisibilityReportCreateArgs} args - Arguments to create a VisibilityReport.
     * @example
     * // Create one VisibilityReport
     * const VisibilityReport = await prisma.visibilityReport.create({
     *   data: {
     *     // ... data to create a VisibilityReport
     *   }
     * })
     * 
     */
    create<T extends VisibilityReportCreateArgs>(args: SelectSubset<T, VisibilityReportCreateArgs<ExtArgs>>): Prisma__VisibilityReportClient<$Result.GetResult<Prisma.$VisibilityReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VisibilityReports.
     * @param {VisibilityReportCreateManyArgs} args - Arguments to create many VisibilityReports.
     * @example
     * // Create many VisibilityReports
     * const visibilityReport = await prisma.visibilityReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VisibilityReportCreateManyArgs>(args?: SelectSubset<T, VisibilityReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VisibilityReport.
     * @param {VisibilityReportDeleteArgs} args - Arguments to delete one VisibilityReport.
     * @example
     * // Delete one VisibilityReport
     * const VisibilityReport = await prisma.visibilityReport.delete({
     *   where: {
     *     // ... filter to delete one VisibilityReport
     *   }
     * })
     * 
     */
    delete<T extends VisibilityReportDeleteArgs>(args: SelectSubset<T, VisibilityReportDeleteArgs<ExtArgs>>): Prisma__VisibilityReportClient<$Result.GetResult<Prisma.$VisibilityReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VisibilityReport.
     * @param {VisibilityReportUpdateArgs} args - Arguments to update one VisibilityReport.
     * @example
     * // Update one VisibilityReport
     * const visibilityReport = await prisma.visibilityReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VisibilityReportUpdateArgs>(args: SelectSubset<T, VisibilityReportUpdateArgs<ExtArgs>>): Prisma__VisibilityReportClient<$Result.GetResult<Prisma.$VisibilityReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VisibilityReports.
     * @param {VisibilityReportDeleteManyArgs} args - Arguments to filter VisibilityReports to delete.
     * @example
     * // Delete a few VisibilityReports
     * const { count } = await prisma.visibilityReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VisibilityReportDeleteManyArgs>(args?: SelectSubset<T, VisibilityReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VisibilityReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisibilityReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VisibilityReports
     * const visibilityReport = await prisma.visibilityReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VisibilityReportUpdateManyArgs>(args: SelectSubset<T, VisibilityReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VisibilityReport.
     * @param {VisibilityReportUpsertArgs} args - Arguments to update or create a VisibilityReport.
     * @example
     * // Update or create a VisibilityReport
     * const visibilityReport = await prisma.visibilityReport.upsert({
     *   create: {
     *     // ... data to create a VisibilityReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VisibilityReport we want to update
     *   }
     * })
     */
    upsert<T extends VisibilityReportUpsertArgs>(args: SelectSubset<T, VisibilityReportUpsertArgs<ExtArgs>>): Prisma__VisibilityReportClient<$Result.GetResult<Prisma.$VisibilityReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VisibilityReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisibilityReportCountArgs} args - Arguments to filter VisibilityReports to count.
     * @example
     * // Count the number of VisibilityReports
     * const count = await prisma.visibilityReport.count({
     *   where: {
     *     // ... the filter for the VisibilityReports we want to count
     *   }
     * })
    **/
    count<T extends VisibilityReportCountArgs>(
      args?: Subset<T, VisibilityReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VisibilityReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VisibilityReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisibilityReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VisibilityReportAggregateArgs>(args: Subset<T, VisibilityReportAggregateArgs>): Prisma.PrismaPromise<GetVisibilityReportAggregateType<T>>

    /**
     * Group by VisibilityReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VisibilityReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VisibilityReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VisibilityReportGroupByArgs['orderBy'] }
        : { orderBy?: VisibilityReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VisibilityReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVisibilityReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VisibilityReport model
   */
  readonly fields: VisibilityReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VisibilityReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VisibilityReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    report<T extends ReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReportDefaultArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VisibilityReport model
   */ 
  interface VisibilityReportFieldRefs {
    readonly reportId: FieldRef<"VisibilityReport", 'Int'>
    readonly comment: FieldRef<"VisibilityReport", 'String'>
    readonly imageUrl: FieldRef<"VisibilityReport", 'String'>
    readonly createdAt: FieldRef<"VisibilityReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VisibilityReport findUnique
   */
  export type VisibilityReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisibilityReport
     */
    select?: VisibilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisibilityReportInclude<ExtArgs> | null
    /**
     * Filter, which VisibilityReport to fetch.
     */
    where: VisibilityReportWhereUniqueInput
  }

  /**
   * VisibilityReport findUniqueOrThrow
   */
  export type VisibilityReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisibilityReport
     */
    select?: VisibilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisibilityReportInclude<ExtArgs> | null
    /**
     * Filter, which VisibilityReport to fetch.
     */
    where: VisibilityReportWhereUniqueInput
  }

  /**
   * VisibilityReport findFirst
   */
  export type VisibilityReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisibilityReport
     */
    select?: VisibilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisibilityReportInclude<ExtArgs> | null
    /**
     * Filter, which VisibilityReport to fetch.
     */
    where?: VisibilityReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisibilityReports to fetch.
     */
    orderBy?: VisibilityReportOrderByWithRelationInput | VisibilityReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VisibilityReports.
     */
    cursor?: VisibilityReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisibilityReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisibilityReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VisibilityReports.
     */
    distinct?: VisibilityReportScalarFieldEnum | VisibilityReportScalarFieldEnum[]
  }

  /**
   * VisibilityReport findFirstOrThrow
   */
  export type VisibilityReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisibilityReport
     */
    select?: VisibilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisibilityReportInclude<ExtArgs> | null
    /**
     * Filter, which VisibilityReport to fetch.
     */
    where?: VisibilityReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisibilityReports to fetch.
     */
    orderBy?: VisibilityReportOrderByWithRelationInput | VisibilityReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VisibilityReports.
     */
    cursor?: VisibilityReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisibilityReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisibilityReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VisibilityReports.
     */
    distinct?: VisibilityReportScalarFieldEnum | VisibilityReportScalarFieldEnum[]
  }

  /**
   * VisibilityReport findMany
   */
  export type VisibilityReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisibilityReport
     */
    select?: VisibilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisibilityReportInclude<ExtArgs> | null
    /**
     * Filter, which VisibilityReports to fetch.
     */
    where?: VisibilityReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VisibilityReports to fetch.
     */
    orderBy?: VisibilityReportOrderByWithRelationInput | VisibilityReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VisibilityReports.
     */
    cursor?: VisibilityReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VisibilityReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VisibilityReports.
     */
    skip?: number
    distinct?: VisibilityReportScalarFieldEnum | VisibilityReportScalarFieldEnum[]
  }

  /**
   * VisibilityReport create
   */
  export type VisibilityReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisibilityReport
     */
    select?: VisibilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisibilityReportInclude<ExtArgs> | null
    /**
     * The data needed to create a VisibilityReport.
     */
    data: XOR<VisibilityReportCreateInput, VisibilityReportUncheckedCreateInput>
  }

  /**
   * VisibilityReport createMany
   */
  export type VisibilityReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VisibilityReports.
     */
    data: VisibilityReportCreateManyInput | VisibilityReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VisibilityReport update
   */
  export type VisibilityReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisibilityReport
     */
    select?: VisibilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisibilityReportInclude<ExtArgs> | null
    /**
     * The data needed to update a VisibilityReport.
     */
    data: XOR<VisibilityReportUpdateInput, VisibilityReportUncheckedUpdateInput>
    /**
     * Choose, which VisibilityReport to update.
     */
    where: VisibilityReportWhereUniqueInput
  }

  /**
   * VisibilityReport updateMany
   */
  export type VisibilityReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VisibilityReports.
     */
    data: XOR<VisibilityReportUpdateManyMutationInput, VisibilityReportUncheckedUpdateManyInput>
    /**
     * Filter which VisibilityReports to update
     */
    where?: VisibilityReportWhereInput
  }

  /**
   * VisibilityReport upsert
   */
  export type VisibilityReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisibilityReport
     */
    select?: VisibilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisibilityReportInclude<ExtArgs> | null
    /**
     * The filter to search for the VisibilityReport to update in case it exists.
     */
    where: VisibilityReportWhereUniqueInput
    /**
     * In case the VisibilityReport found by the `where` argument doesn't exist, create a new VisibilityReport with this data.
     */
    create: XOR<VisibilityReportCreateInput, VisibilityReportUncheckedCreateInput>
    /**
     * In case the VisibilityReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VisibilityReportUpdateInput, VisibilityReportUncheckedUpdateInput>
  }

  /**
   * VisibilityReport delete
   */
  export type VisibilityReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisibilityReport
     */
    select?: VisibilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisibilityReportInclude<ExtArgs> | null
    /**
     * Filter which VisibilityReport to delete.
     */
    where: VisibilityReportWhereUniqueInput
  }

  /**
   * VisibilityReport deleteMany
   */
  export type VisibilityReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VisibilityReports to delete
     */
    where?: VisibilityReportWhereInput
  }

  /**
   * VisibilityReport without action
   */
  export type VisibilityReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VisibilityReport
     */
    select?: VisibilityReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VisibilityReportInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    price: number | null
    currentStock: number | null
    reorderPoint: number | null
    orderQuantity: number | null
    outletId: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    price: number | null
    currentStock: number | null
    reorderPoint: number | null
    orderQuantity: number | null
    outletId: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: number | null
    currentStock: number | null
    reorderPoint: number | null
    orderQuantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
    outletId: number | null
    imageUrl: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    price: number | null
    currentStock: number | null
    reorderPoint: number | null
    orderQuantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
    outletId: number | null
    imageUrl: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    description: number
    price: number
    currentStock: number
    reorderPoint: number
    orderQuantity: number
    createdAt: number
    updatedAt: number
    outletId: number
    imageUrl: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    price?: true
    currentStock?: true
    reorderPoint?: true
    orderQuantity?: true
    outletId?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    price?: true
    currentStock?: true
    reorderPoint?: true
    orderQuantity?: true
    outletId?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    currentStock?: true
    reorderPoint?: true
    orderQuantity?: true
    createdAt?: true
    updatedAt?: true
    outletId?: true
    imageUrl?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    currentStock?: true
    reorderPoint?: true
    orderQuantity?: true
    createdAt?: true
    updatedAt?: true
    outletId?: true
    imageUrl?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    price?: true
    currentStock?: true
    reorderPoint?: true
    orderQuantity?: true
    createdAt?: true
    updatedAt?: true
    outletId?: true
    imageUrl?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    name: string
    description: string | null
    price: number
    currentStock: number
    reorderPoint: number
    orderQuantity: number
    createdAt: Date
    updatedAt: Date
    outletId: number
    imageUrl: string | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    currentStock?: boolean
    reorderPoint?: boolean
    orderQuantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    outletId?: boolean
    imageUrl?: boolean
    OrderItem?: boolean | Product$OrderItemArgs<ExtArgs>
    outlet?: boolean | OutletDefaultArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>


  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    price?: boolean
    currentStock?: boolean
    reorderPoint?: boolean
    orderQuantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    outletId?: boolean
    imageUrl?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    OrderItem?: boolean | Product$OrderItemArgs<ExtArgs>
    outlet?: boolean | OutletDefaultArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      OrderItem: Prisma.$OrderItemPayload<ExtArgs>[]
      outlet: Prisma.$OutletPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      price: number
      currentStock: number
      reorderPoint: number
      orderQuantity: number
      createdAt: Date
      updatedAt: Date
      outletId: number
      imageUrl: string | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    OrderItem<T extends Product$OrderItemArgs<ExtArgs> = {}>(args?: Subset<T, Product$OrderItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderItemPayload<ExtArgs>, T, "findMany"> | Null>
    outlet<T extends OutletDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OutletDefaultArgs<ExtArgs>>): Prisma__OutletClient<$Result.GetResult<Prisma.$OutletPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'Int'>
    readonly name: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly price: FieldRef<"Product", 'Float'>
    readonly currentStock: FieldRef<"Product", 'Int'>
    readonly reorderPoint: FieldRef<"Product", 'Int'>
    readonly orderQuantity: FieldRef<"Product", 'Int'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
    readonly outletId: FieldRef<"Product", 'Int'>
    readonly imageUrl: FieldRef<"Product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }

  /**
   * Product.OrderItem
   */
  export type Product$OrderItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrderItem
     */
    select?: OrderItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderItemInclude<ExtArgs> | null
    where?: OrderItemWhereInput
    orderBy?: OrderItemOrderByWithRelationInput | OrderItemOrderByWithRelationInput[]
    cursor?: OrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderItemScalarFieldEnum | OrderItemScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model Leave
   */

  export type AggregateLeave = {
    _count: LeaveCountAggregateOutputType | null
    _avg: LeaveAvgAggregateOutputType | null
    _sum: LeaveSumAggregateOutputType | null
    _min: LeaveMinAggregateOutputType | null
    _max: LeaveMaxAggregateOutputType | null
  }

  export type LeaveAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type LeaveSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type LeaveMinAggregateOutputType = {
    id: number | null
    userId: number | null
    leaveType: string | null
    startDate: Date | null
    endDate: Date | null
    reason: string | null
    attachment: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LeaveMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    leaveType: string | null
    startDate: Date | null
    endDate: Date | null
    reason: string | null
    attachment: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LeaveCountAggregateOutputType = {
    id: number
    userId: number
    leaveType: number
    startDate: number
    endDate: number
    reason: number
    attachment: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LeaveAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type LeaveSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type LeaveMinAggregateInputType = {
    id?: true
    userId?: true
    leaveType?: true
    startDate?: true
    endDate?: true
    reason?: true
    attachment?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LeaveMaxAggregateInputType = {
    id?: true
    userId?: true
    leaveType?: true
    startDate?: true
    endDate?: true
    reason?: true
    attachment?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LeaveCountAggregateInputType = {
    id?: true
    userId?: true
    leaveType?: true
    startDate?: true
    endDate?: true
    reason?: true
    attachment?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LeaveAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leave to aggregate.
     */
    where?: LeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leaves to fetch.
     */
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leaves
    **/
    _count?: true | LeaveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeaveAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeaveSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeaveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeaveMaxAggregateInputType
  }

  export type GetLeaveAggregateType<T extends LeaveAggregateArgs> = {
        [P in keyof T & keyof AggregateLeave]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeave[P]>
      : GetScalarType<T[P], AggregateLeave[P]>
  }




  export type LeaveGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeaveWhereInput
    orderBy?: LeaveOrderByWithAggregationInput | LeaveOrderByWithAggregationInput[]
    by: LeaveScalarFieldEnum[] | LeaveScalarFieldEnum
    having?: LeaveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeaveCountAggregateInputType | true
    _avg?: LeaveAvgAggregateInputType
    _sum?: LeaveSumAggregateInputType
    _min?: LeaveMinAggregateInputType
    _max?: LeaveMaxAggregateInputType
  }

  export type LeaveGroupByOutputType = {
    id: number
    userId: number
    leaveType: string
    startDate: Date
    endDate: Date
    reason: string
    attachment: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    _count: LeaveCountAggregateOutputType | null
    _avg: LeaveAvgAggregateOutputType | null
    _sum: LeaveSumAggregateOutputType | null
    _min: LeaveMinAggregateOutputType | null
    _max: LeaveMaxAggregateOutputType | null
  }

  type GetLeaveGroupByPayload<T extends LeaveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeaveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeaveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeaveGroupByOutputType[P]>
            : GetScalarType<T[P], LeaveGroupByOutputType[P]>
        }
      >
    >


  export type LeaveSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    leaveType?: boolean
    startDate?: boolean
    endDate?: boolean
    reason?: boolean
    attachment?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leave"]>


  export type LeaveSelectScalar = {
    id?: boolean
    userId?: boolean
    leaveType?: boolean
    startDate?: boolean
    endDate?: boolean
    reason?: boolean
    attachment?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LeaveInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LeavePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Leave"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      leaveType: string
      startDate: Date
      endDate: Date
      reason: string
      attachment: string | null
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["leave"]>
    composites: {}
  }

  type LeaveGetPayload<S extends boolean | null | undefined | LeaveDefaultArgs> = $Result.GetResult<Prisma.$LeavePayload, S>

  type LeaveCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeaveFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeaveCountAggregateInputType | true
    }

  export interface LeaveDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Leave'], meta: { name: 'Leave' } }
    /**
     * Find zero or one Leave that matches the filter.
     * @param {LeaveFindUniqueArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeaveFindUniqueArgs>(args: SelectSubset<T, LeaveFindUniqueArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Leave that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeaveFindUniqueOrThrowArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeaveFindUniqueOrThrowArgs>(args: SelectSubset<T, LeaveFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Leave that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveFindFirstArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeaveFindFirstArgs>(args?: SelectSubset<T, LeaveFindFirstArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Leave that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveFindFirstOrThrowArgs} args - Arguments to find a Leave
     * @example
     * // Get one Leave
     * const leave = await prisma.leave.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeaveFindFirstOrThrowArgs>(args?: SelectSubset<T, LeaveFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Leaves that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leaves
     * const leaves = await prisma.leave.findMany()
     * 
     * // Get first 10 Leaves
     * const leaves = await prisma.leave.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leaveWithIdOnly = await prisma.leave.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeaveFindManyArgs>(args?: SelectSubset<T, LeaveFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Leave.
     * @param {LeaveCreateArgs} args - Arguments to create a Leave.
     * @example
     * // Create one Leave
     * const Leave = await prisma.leave.create({
     *   data: {
     *     // ... data to create a Leave
     *   }
     * })
     * 
     */
    create<T extends LeaveCreateArgs>(args: SelectSubset<T, LeaveCreateArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Leaves.
     * @param {LeaveCreateManyArgs} args - Arguments to create many Leaves.
     * @example
     * // Create many Leaves
     * const leave = await prisma.leave.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeaveCreateManyArgs>(args?: SelectSubset<T, LeaveCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Leave.
     * @param {LeaveDeleteArgs} args - Arguments to delete one Leave.
     * @example
     * // Delete one Leave
     * const Leave = await prisma.leave.delete({
     *   where: {
     *     // ... filter to delete one Leave
     *   }
     * })
     * 
     */
    delete<T extends LeaveDeleteArgs>(args: SelectSubset<T, LeaveDeleteArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Leave.
     * @param {LeaveUpdateArgs} args - Arguments to update one Leave.
     * @example
     * // Update one Leave
     * const leave = await prisma.leave.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeaveUpdateArgs>(args: SelectSubset<T, LeaveUpdateArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Leaves.
     * @param {LeaveDeleteManyArgs} args - Arguments to filter Leaves to delete.
     * @example
     * // Delete a few Leaves
     * const { count } = await prisma.leave.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeaveDeleteManyArgs>(args?: SelectSubset<T, LeaveDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leaves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leaves
     * const leave = await prisma.leave.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeaveUpdateManyArgs>(args: SelectSubset<T, LeaveUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Leave.
     * @param {LeaveUpsertArgs} args - Arguments to update or create a Leave.
     * @example
     * // Update or create a Leave
     * const leave = await prisma.leave.upsert({
     *   create: {
     *     // ... data to create a Leave
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Leave we want to update
     *   }
     * })
     */
    upsert<T extends LeaveUpsertArgs>(args: SelectSubset<T, LeaveUpsertArgs<ExtArgs>>): Prisma__LeaveClient<$Result.GetResult<Prisma.$LeavePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Leaves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveCountArgs} args - Arguments to filter Leaves to count.
     * @example
     * // Count the number of Leaves
     * const count = await prisma.leave.count({
     *   where: {
     *     // ... the filter for the Leaves we want to count
     *   }
     * })
    **/
    count<T extends LeaveCountArgs>(
      args?: Subset<T, LeaveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeaveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Leave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeaveAggregateArgs>(args: Subset<T, LeaveAggregateArgs>): Prisma.PrismaPromise<GetLeaveAggregateType<T>>

    /**
     * Group by Leave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeaveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeaveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeaveGroupByArgs['orderBy'] }
        : { orderBy?: LeaveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeaveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeaveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Leave model
   */
  readonly fields: LeaveFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Leave.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeaveClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Leave model
   */ 
  interface LeaveFieldRefs {
    readonly id: FieldRef<"Leave", 'Int'>
    readonly userId: FieldRef<"Leave", 'Int'>
    readonly leaveType: FieldRef<"Leave", 'String'>
    readonly startDate: FieldRef<"Leave", 'DateTime'>
    readonly endDate: FieldRef<"Leave", 'DateTime'>
    readonly reason: FieldRef<"Leave", 'String'>
    readonly attachment: FieldRef<"Leave", 'String'>
    readonly status: FieldRef<"Leave", 'String'>
    readonly createdAt: FieldRef<"Leave", 'DateTime'>
    readonly updatedAt: FieldRef<"Leave", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Leave findUnique
   */
  export type LeaveFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter, which Leave to fetch.
     */
    where: LeaveWhereUniqueInput
  }

  /**
   * Leave findUniqueOrThrow
   */
  export type LeaveFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter, which Leave to fetch.
     */
    where: LeaveWhereUniqueInput
  }

  /**
   * Leave findFirst
   */
  export type LeaveFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter, which Leave to fetch.
     */
    where?: LeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leaves to fetch.
     */
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leaves.
     */
    cursor?: LeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leaves.
     */
    distinct?: LeaveScalarFieldEnum | LeaveScalarFieldEnum[]
  }

  /**
   * Leave findFirstOrThrow
   */
  export type LeaveFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter, which Leave to fetch.
     */
    where?: LeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leaves to fetch.
     */
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leaves.
     */
    cursor?: LeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leaves.
     */
    distinct?: LeaveScalarFieldEnum | LeaveScalarFieldEnum[]
  }

  /**
   * Leave findMany
   */
  export type LeaveFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter, which Leaves to fetch.
     */
    where?: LeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leaves to fetch.
     */
    orderBy?: LeaveOrderByWithRelationInput | LeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leaves.
     */
    cursor?: LeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leaves.
     */
    skip?: number
    distinct?: LeaveScalarFieldEnum | LeaveScalarFieldEnum[]
  }

  /**
   * Leave create
   */
  export type LeaveCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * The data needed to create a Leave.
     */
    data: XOR<LeaveCreateInput, LeaveUncheckedCreateInput>
  }

  /**
   * Leave createMany
   */
  export type LeaveCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Leaves.
     */
    data: LeaveCreateManyInput | LeaveCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Leave update
   */
  export type LeaveUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * The data needed to update a Leave.
     */
    data: XOR<LeaveUpdateInput, LeaveUncheckedUpdateInput>
    /**
     * Choose, which Leave to update.
     */
    where: LeaveWhereUniqueInput
  }

  /**
   * Leave updateMany
   */
  export type LeaveUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Leaves.
     */
    data: XOR<LeaveUpdateManyMutationInput, LeaveUncheckedUpdateManyInput>
    /**
     * Filter which Leaves to update
     */
    where?: LeaveWhereInput
  }

  /**
   * Leave upsert
   */
  export type LeaveUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * The filter to search for the Leave to update in case it exists.
     */
    where: LeaveWhereUniqueInput
    /**
     * In case the Leave found by the `where` argument doesn't exist, create a new Leave with this data.
     */
    create: XOR<LeaveCreateInput, LeaveUncheckedCreateInput>
    /**
     * In case the Leave was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeaveUpdateInput, LeaveUncheckedUpdateInput>
  }

  /**
   * Leave delete
   */
  export type LeaveDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
    /**
     * Filter which Leave to delete.
     */
    where: LeaveWhereUniqueInput
  }

  /**
   * Leave deleteMany
   */
  export type LeaveDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leaves to delete
     */
    where?: LeaveWhereInput
  }

  /**
   * Leave without action
   */
  export type LeaveDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Leave
     */
    select?: LeaveSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeaveInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phoneNumber: 'phoneNumber',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    photoUrl: 'photoUrl'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ManagerScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    department: 'department'
  };

  export type ManagerScalarFieldEnum = (typeof ManagerScalarFieldEnum)[keyof typeof ManagerScalarFieldEnum]


  export const TokenScalarFieldEnum: {
    id: 'id',
    token: 'token',
    userId: 'userId',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt'
  };

  export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


  export const OutletScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    latitude: 'latitude',
    longitude: 'longitude',
    balance: 'balance',
    email: 'email',
    kraPin: 'kraPin',
    phone: 'phone'
  };

  export type OutletScalarFieldEnum = (typeof OutletScalarFieldEnum)[keyof typeof OutletScalarFieldEnum]


  export const ManagerCheckinScalarFieldEnum: {
    id: 'id',
    managerId: 'managerId',
    outletId: 'outletId',
    date: 'date',
    checkInAt: 'checkInAt',
    checkOutAt: 'checkOutAt',
    latitude: 'latitude',
    longitude: 'longitude',
    notes: 'notes'
  };

  export type ManagerCheckinScalarFieldEnum = (typeof ManagerCheckinScalarFieldEnum)[keyof typeof ManagerCheckinScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    outletId: 'outletId'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const OrderItemScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    productId: 'productId',
    quantity: 'quantity'
  };

  export type OrderItemScalarFieldEnum = (typeof OrderItemScalarFieldEnum)[keyof typeof OrderItemScalarFieldEnum]


  export const JourneyPlanScalarFieldEnum: {
    id: 'id',
    date: 'date',
    time: 'time',
    userId: 'userId',
    outletId: 'outletId',
    status: 'status',
    checkInTime: 'checkInTime',
    latitude: 'latitude',
    longitude: 'longitude',
    imageUrl: 'imageUrl',
    notes: 'notes',
    checkoutLatitude: 'checkoutLatitude',
    checkoutLongitude: 'checkoutLongitude',
    checkoutTime: 'checkoutTime'
  };

  export type JourneyPlanScalarFieldEnum = (typeof JourneyPlanScalarFieldEnum)[keyof typeof JourneyPlanScalarFieldEnum]


  export const NoticeBoardScalarFieldEnum: {
    id: 'id',
    title: 'title',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NoticeBoardScalarFieldEnum = (typeof NoticeBoardScalarFieldEnum)[keyof typeof NoticeBoardScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    orderId: 'orderId',
    outletId: 'outletId',
    createdAt: 'createdAt',
    userId: 'userId',
    journeyPlanId: 'journeyPlanId',
    type: 'type'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const FeedbackReportScalarFieldEnum: {
    reportId: 'reportId',
    comment: 'comment',
    createdAt: 'createdAt'
  };

  export type FeedbackReportScalarFieldEnum = (typeof FeedbackReportScalarFieldEnum)[keyof typeof FeedbackReportScalarFieldEnum]


  export const ProductReportScalarFieldEnum: {
    reportId: 'reportId',
    productName: 'productName',
    quantity: 'quantity',
    comment: 'comment',
    createdAt: 'createdAt'
  };

  export type ProductReportScalarFieldEnum = (typeof ProductReportScalarFieldEnum)[keyof typeof ProductReportScalarFieldEnum]


  export const VisibilityReportScalarFieldEnum: {
    reportId: 'reportId',
    comment: 'comment',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt'
  };

  export type VisibilityReportScalarFieldEnum = (typeof VisibilityReportScalarFieldEnum)[keyof typeof VisibilityReportScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    price: 'price',
    currentStock: 'currentStock',
    reorderPoint: 'reorderPoint',
    orderQuantity: 'orderQuantity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    outletId: 'outletId',
    imageUrl: 'imageUrl'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const LeaveScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    leaveType: 'leaveType',
    startDate: 'startDate',
    endDate: 'endDate',
    reason: 'reason',
    attachment: 'attachment',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LeaveScalarFieldEnum = (typeof LeaveScalarFieldEnum)[keyof typeof LeaveScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'ReportType'
   */
  export type EnumReportTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReportType'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    photoUrl?: StringNullableFilter<"User"> | string | null
    journeyPlans?: JourneyPlanListRelationFilter
    orders?: OrderListRelationFilter
    reports?: ReportListRelationFilter
    tokens?: TokenListRelationFilter
    leaves?: LeaveListRelationFilter
    Manager?: XOR<ManagerNullableRelationFilter, ManagerWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    photoUrl?: SortOrderInput | SortOrder
    journeyPlans?: JourneyPlanOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
    tokens?: TokenOrderByRelationAggregateInput
    leaves?: LeaveOrderByRelationAggregateInput
    Manager?: ManagerOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    phoneNumber?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    photoUrl?: StringNullableFilter<"User"> | string | null
    journeyPlans?: JourneyPlanListRelationFilter
    orders?: OrderListRelationFilter
    reports?: ReportListRelationFilter
    tokens?: TokenListRelationFilter
    leaves?: LeaveListRelationFilter
    Manager?: XOR<ManagerNullableRelationFilter, ManagerWhereInput> | null
  }, "id" | "email" | "phoneNumber">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    photoUrl?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    photoUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ManagerWhereInput = {
    AND?: ManagerWhereInput | ManagerWhereInput[]
    OR?: ManagerWhereInput[]
    NOT?: ManagerWhereInput | ManagerWhereInput[]
    id?: IntFilter<"Manager"> | number
    userId?: IntFilter<"Manager"> | number
    department?: StringNullableFilter<"Manager"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    checkins?: ManagerCheckinListRelationFilter
  }

  export type ManagerOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    department?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    checkins?: ManagerCheckinOrderByRelationAggregateInput
  }

  export type ManagerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: ManagerWhereInput | ManagerWhereInput[]
    OR?: ManagerWhereInput[]
    NOT?: ManagerWhereInput | ManagerWhereInput[]
    department?: StringNullableFilter<"Manager"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    checkins?: ManagerCheckinListRelationFilter
  }, "id" | "userId">

  export type ManagerOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    department?: SortOrderInput | SortOrder
    _count?: ManagerCountOrderByAggregateInput
    _avg?: ManagerAvgOrderByAggregateInput
    _max?: ManagerMaxOrderByAggregateInput
    _min?: ManagerMinOrderByAggregateInput
    _sum?: ManagerSumOrderByAggregateInput
  }

  export type ManagerScalarWhereWithAggregatesInput = {
    AND?: ManagerScalarWhereWithAggregatesInput | ManagerScalarWhereWithAggregatesInput[]
    OR?: ManagerScalarWhereWithAggregatesInput[]
    NOT?: ManagerScalarWhereWithAggregatesInput | ManagerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Manager"> | number
    userId?: IntWithAggregatesFilter<"Manager"> | number
    department?: StringNullableWithAggregatesFilter<"Manager"> | string | null
  }

  export type TokenWhereInput = {
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    id?: IntFilter<"Token"> | number
    token?: StringFilter<"Token"> | string
    userId?: IntFilter<"Token"> | number
    createdAt?: DateTimeFilter<"Token"> | Date | string
    expiresAt?: DateTimeFilter<"Token"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TokenOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type TokenWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    token?: StringFilter<"Token"> | string
    userId?: IntFilter<"Token"> | number
    createdAt?: DateTimeFilter<"Token"> | Date | string
    expiresAt?: DateTimeFilter<"Token"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type TokenOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    _count?: TokenCountOrderByAggregateInput
    _avg?: TokenAvgOrderByAggregateInput
    _max?: TokenMaxOrderByAggregateInput
    _min?: TokenMinOrderByAggregateInput
    _sum?: TokenSumOrderByAggregateInput
  }

  export type TokenScalarWhereWithAggregatesInput = {
    AND?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    OR?: TokenScalarWhereWithAggregatesInput[]
    NOT?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Token"> | number
    token?: StringWithAggregatesFilter<"Token"> | string
    userId?: IntWithAggregatesFilter<"Token"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Token"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"Token"> | Date | string
  }

  export type OutletWhereInput = {
    AND?: OutletWhereInput | OutletWhereInput[]
    OR?: OutletWhereInput[]
    NOT?: OutletWhereInput | OutletWhereInput[]
    id?: IntFilter<"Outlet"> | number
    name?: StringFilter<"Outlet"> | string
    address?: StringFilter<"Outlet"> | string
    latitude?: FloatNullableFilter<"Outlet"> | number | null
    longitude?: FloatNullableFilter<"Outlet"> | number | null
    balance?: StringNullableFilter<"Outlet"> | string | null
    email?: StringNullableFilter<"Outlet"> | string | null
    kraPin?: StringNullableFilter<"Outlet"> | string | null
    phone?: StringNullableFilter<"Outlet"> | string | null
    journeyPlans?: JourneyPlanListRelationFilter
    orders?: OrderListRelationFilter
    products?: ProductListRelationFilter
    reports?: ReportListRelationFilter
    checkins?: ManagerCheckinListRelationFilter
  }

  export type OutletOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    balance?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    kraPin?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    journeyPlans?: JourneyPlanOrderByRelationAggregateInput
    orders?: OrderOrderByRelationAggregateInput
    products?: ProductOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
    checkins?: ManagerCheckinOrderByRelationAggregateInput
  }

  export type OutletWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OutletWhereInput | OutletWhereInput[]
    OR?: OutletWhereInput[]
    NOT?: OutletWhereInput | OutletWhereInput[]
    name?: StringFilter<"Outlet"> | string
    address?: StringFilter<"Outlet"> | string
    latitude?: FloatNullableFilter<"Outlet"> | number | null
    longitude?: FloatNullableFilter<"Outlet"> | number | null
    balance?: StringNullableFilter<"Outlet"> | string | null
    email?: StringNullableFilter<"Outlet"> | string | null
    kraPin?: StringNullableFilter<"Outlet"> | string | null
    phone?: StringNullableFilter<"Outlet"> | string | null
    journeyPlans?: JourneyPlanListRelationFilter
    orders?: OrderListRelationFilter
    products?: ProductListRelationFilter
    reports?: ReportListRelationFilter
    checkins?: ManagerCheckinListRelationFilter
  }, "id">

  export type OutletOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    balance?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    kraPin?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    _count?: OutletCountOrderByAggregateInput
    _avg?: OutletAvgOrderByAggregateInput
    _max?: OutletMaxOrderByAggregateInput
    _min?: OutletMinOrderByAggregateInput
    _sum?: OutletSumOrderByAggregateInput
  }

  export type OutletScalarWhereWithAggregatesInput = {
    AND?: OutletScalarWhereWithAggregatesInput | OutletScalarWhereWithAggregatesInput[]
    OR?: OutletScalarWhereWithAggregatesInput[]
    NOT?: OutletScalarWhereWithAggregatesInput | OutletScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Outlet"> | number
    name?: StringWithAggregatesFilter<"Outlet"> | string
    address?: StringWithAggregatesFilter<"Outlet"> | string
    latitude?: FloatNullableWithAggregatesFilter<"Outlet"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"Outlet"> | number | null
    balance?: StringNullableWithAggregatesFilter<"Outlet"> | string | null
    email?: StringNullableWithAggregatesFilter<"Outlet"> | string | null
    kraPin?: StringNullableWithAggregatesFilter<"Outlet"> | string | null
    phone?: StringNullableWithAggregatesFilter<"Outlet"> | string | null
  }

  export type ManagerCheckinWhereInput = {
    AND?: ManagerCheckinWhereInput | ManagerCheckinWhereInput[]
    OR?: ManagerCheckinWhereInput[]
    NOT?: ManagerCheckinWhereInput | ManagerCheckinWhereInput[]
    id?: IntFilter<"ManagerCheckin"> | number
    managerId?: IntFilter<"ManagerCheckin"> | number
    outletId?: IntFilter<"ManagerCheckin"> | number
    date?: DateTimeFilter<"ManagerCheckin"> | Date | string
    checkInAt?: DateTimeNullableFilter<"ManagerCheckin"> | Date | string | null
    checkOutAt?: DateTimeNullableFilter<"ManagerCheckin"> | Date | string | null
    latitude?: FloatNullableFilter<"ManagerCheckin"> | number | null
    longitude?: FloatNullableFilter<"ManagerCheckin"> | number | null
    notes?: StringNullableFilter<"ManagerCheckin"> | string | null
    manager?: XOR<ManagerRelationFilter, ManagerWhereInput>
    outlet?: XOR<OutletRelationFilter, OutletWhereInput>
  }

  export type ManagerCheckinOrderByWithRelationInput = {
    id?: SortOrder
    managerId?: SortOrder
    outletId?: SortOrder
    date?: SortOrder
    checkInAt?: SortOrderInput | SortOrder
    checkOutAt?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    manager?: ManagerOrderByWithRelationInput
    outlet?: OutletOrderByWithRelationInput
  }

  export type ManagerCheckinWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ManagerCheckinWhereInput | ManagerCheckinWhereInput[]
    OR?: ManagerCheckinWhereInput[]
    NOT?: ManagerCheckinWhereInput | ManagerCheckinWhereInput[]
    managerId?: IntFilter<"ManagerCheckin"> | number
    outletId?: IntFilter<"ManagerCheckin"> | number
    date?: DateTimeFilter<"ManagerCheckin"> | Date | string
    checkInAt?: DateTimeNullableFilter<"ManagerCheckin"> | Date | string | null
    checkOutAt?: DateTimeNullableFilter<"ManagerCheckin"> | Date | string | null
    latitude?: FloatNullableFilter<"ManagerCheckin"> | number | null
    longitude?: FloatNullableFilter<"ManagerCheckin"> | number | null
    notes?: StringNullableFilter<"ManagerCheckin"> | string | null
    manager?: XOR<ManagerRelationFilter, ManagerWhereInput>
    outlet?: XOR<OutletRelationFilter, OutletWhereInput>
  }, "id">

  export type ManagerCheckinOrderByWithAggregationInput = {
    id?: SortOrder
    managerId?: SortOrder
    outletId?: SortOrder
    date?: SortOrder
    checkInAt?: SortOrderInput | SortOrder
    checkOutAt?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: ManagerCheckinCountOrderByAggregateInput
    _avg?: ManagerCheckinAvgOrderByAggregateInput
    _max?: ManagerCheckinMaxOrderByAggregateInput
    _min?: ManagerCheckinMinOrderByAggregateInput
    _sum?: ManagerCheckinSumOrderByAggregateInput
  }

  export type ManagerCheckinScalarWhereWithAggregatesInput = {
    AND?: ManagerCheckinScalarWhereWithAggregatesInput | ManagerCheckinScalarWhereWithAggregatesInput[]
    OR?: ManagerCheckinScalarWhereWithAggregatesInput[]
    NOT?: ManagerCheckinScalarWhereWithAggregatesInput | ManagerCheckinScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ManagerCheckin"> | number
    managerId?: IntWithAggregatesFilter<"ManagerCheckin"> | number
    outletId?: IntWithAggregatesFilter<"ManagerCheckin"> | number
    date?: DateTimeWithAggregatesFilter<"ManagerCheckin"> | Date | string
    checkInAt?: DateTimeNullableWithAggregatesFilter<"ManagerCheckin"> | Date | string | null
    checkOutAt?: DateTimeNullableWithAggregatesFilter<"ManagerCheckin"> | Date | string | null
    latitude?: FloatNullableWithAggregatesFilter<"ManagerCheckin"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"ManagerCheckin"> | number | null
    notes?: StringNullableWithAggregatesFilter<"ManagerCheckin"> | string | null
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: IntFilter<"Order"> | number
    userId?: IntFilter<"Order"> | number
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    outletId?: IntFilter<"Order"> | number
    outlet?: XOR<OutletRelationFilter, OutletWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    orderItems?: OrderItemListRelationFilter
    reports?: ReportListRelationFilter
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    outletId?: SortOrder
    outlet?: OutletOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    orderItems?: OrderItemOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    userId?: IntFilter<"Order"> | number
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    outletId?: IntFilter<"Order"> | number
    outlet?: XOR<OutletRelationFilter, OutletWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    orderItems?: OrderItemListRelationFilter
    reports?: ReportListRelationFilter
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    outletId?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Order"> | number
    userId?: IntWithAggregatesFilter<"Order"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    outletId?: IntWithAggregatesFilter<"Order"> | number
  }

  export type OrderItemWhereInput = {
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    id?: IntFilter<"OrderItem"> | number
    orderId?: IntFilter<"OrderItem"> | number
    productId?: IntFilter<"OrderItem"> | number
    quantity?: IntFilter<"OrderItem"> | number
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type OrderItemOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    order?: OrderOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type OrderItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderItemWhereInput | OrderItemWhereInput[]
    OR?: OrderItemWhereInput[]
    NOT?: OrderItemWhereInput | OrderItemWhereInput[]
    orderId?: IntFilter<"OrderItem"> | number
    productId?: IntFilter<"OrderItem"> | number
    quantity?: IntFilter<"OrderItem"> | number
    order?: XOR<OrderRelationFilter, OrderWhereInput>
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }, "id">

  export type OrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    _count?: OrderItemCountOrderByAggregateInput
    _avg?: OrderItemAvgOrderByAggregateInput
    _max?: OrderItemMaxOrderByAggregateInput
    _min?: OrderItemMinOrderByAggregateInput
    _sum?: OrderItemSumOrderByAggregateInput
  }

  export type OrderItemScalarWhereWithAggregatesInput = {
    AND?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    OR?: OrderItemScalarWhereWithAggregatesInput[]
    NOT?: OrderItemScalarWhereWithAggregatesInput | OrderItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OrderItem"> | number
    orderId?: IntWithAggregatesFilter<"OrderItem"> | number
    productId?: IntWithAggregatesFilter<"OrderItem"> | number
    quantity?: IntWithAggregatesFilter<"OrderItem"> | number
  }

  export type JourneyPlanWhereInput = {
    AND?: JourneyPlanWhereInput | JourneyPlanWhereInput[]
    OR?: JourneyPlanWhereInput[]
    NOT?: JourneyPlanWhereInput | JourneyPlanWhereInput[]
    id?: IntFilter<"JourneyPlan"> | number
    date?: DateTimeFilter<"JourneyPlan"> | Date | string
    time?: StringFilter<"JourneyPlan"> | string
    userId?: IntNullableFilter<"JourneyPlan"> | number | null
    outletId?: IntFilter<"JourneyPlan"> | number
    status?: IntFilter<"JourneyPlan"> | number
    checkInTime?: DateTimeNullableFilter<"JourneyPlan"> | Date | string | null
    latitude?: FloatNullableFilter<"JourneyPlan"> | number | null
    longitude?: FloatNullableFilter<"JourneyPlan"> | number | null
    imageUrl?: StringNullableFilter<"JourneyPlan"> | string | null
    notes?: StringNullableFilter<"JourneyPlan"> | string | null
    checkoutLatitude?: FloatNullableFilter<"JourneyPlan"> | number | null
    checkoutLongitude?: FloatNullableFilter<"JourneyPlan"> | number | null
    checkoutTime?: DateTimeNullableFilter<"JourneyPlan"> | Date | string | null
    outlet?: XOR<OutletRelationFilter, OutletWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    reports?: ReportListRelationFilter
  }

  export type JourneyPlanOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    time?: SortOrder
    userId?: SortOrderInput | SortOrder
    outletId?: SortOrder
    status?: SortOrder
    checkInTime?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    checkoutLatitude?: SortOrderInput | SortOrder
    checkoutLongitude?: SortOrderInput | SortOrder
    checkoutTime?: SortOrderInput | SortOrder
    outlet?: OutletOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    reports?: ReportOrderByRelationAggregateInput
  }

  export type JourneyPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JourneyPlanWhereInput | JourneyPlanWhereInput[]
    OR?: JourneyPlanWhereInput[]
    NOT?: JourneyPlanWhereInput | JourneyPlanWhereInput[]
    date?: DateTimeFilter<"JourneyPlan"> | Date | string
    time?: StringFilter<"JourneyPlan"> | string
    userId?: IntNullableFilter<"JourneyPlan"> | number | null
    outletId?: IntFilter<"JourneyPlan"> | number
    status?: IntFilter<"JourneyPlan"> | number
    checkInTime?: DateTimeNullableFilter<"JourneyPlan"> | Date | string | null
    latitude?: FloatNullableFilter<"JourneyPlan"> | number | null
    longitude?: FloatNullableFilter<"JourneyPlan"> | number | null
    imageUrl?: StringNullableFilter<"JourneyPlan"> | string | null
    notes?: StringNullableFilter<"JourneyPlan"> | string | null
    checkoutLatitude?: FloatNullableFilter<"JourneyPlan"> | number | null
    checkoutLongitude?: FloatNullableFilter<"JourneyPlan"> | number | null
    checkoutTime?: DateTimeNullableFilter<"JourneyPlan"> | Date | string | null
    outlet?: XOR<OutletRelationFilter, OutletWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    reports?: ReportListRelationFilter
  }, "id">

  export type JourneyPlanOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    time?: SortOrder
    userId?: SortOrderInput | SortOrder
    outletId?: SortOrder
    status?: SortOrder
    checkInTime?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    checkoutLatitude?: SortOrderInput | SortOrder
    checkoutLongitude?: SortOrderInput | SortOrder
    checkoutTime?: SortOrderInput | SortOrder
    _count?: JourneyPlanCountOrderByAggregateInput
    _avg?: JourneyPlanAvgOrderByAggregateInput
    _max?: JourneyPlanMaxOrderByAggregateInput
    _min?: JourneyPlanMinOrderByAggregateInput
    _sum?: JourneyPlanSumOrderByAggregateInput
  }

  export type JourneyPlanScalarWhereWithAggregatesInput = {
    AND?: JourneyPlanScalarWhereWithAggregatesInput | JourneyPlanScalarWhereWithAggregatesInput[]
    OR?: JourneyPlanScalarWhereWithAggregatesInput[]
    NOT?: JourneyPlanScalarWhereWithAggregatesInput | JourneyPlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JourneyPlan"> | number
    date?: DateTimeWithAggregatesFilter<"JourneyPlan"> | Date | string
    time?: StringWithAggregatesFilter<"JourneyPlan"> | string
    userId?: IntNullableWithAggregatesFilter<"JourneyPlan"> | number | null
    outletId?: IntWithAggregatesFilter<"JourneyPlan"> | number
    status?: IntWithAggregatesFilter<"JourneyPlan"> | number
    checkInTime?: DateTimeNullableWithAggregatesFilter<"JourneyPlan"> | Date | string | null
    latitude?: FloatNullableWithAggregatesFilter<"JourneyPlan"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"JourneyPlan"> | number | null
    imageUrl?: StringNullableWithAggregatesFilter<"JourneyPlan"> | string | null
    notes?: StringNullableWithAggregatesFilter<"JourneyPlan"> | string | null
    checkoutLatitude?: FloatNullableWithAggregatesFilter<"JourneyPlan"> | number | null
    checkoutLongitude?: FloatNullableWithAggregatesFilter<"JourneyPlan"> | number | null
    checkoutTime?: DateTimeNullableWithAggregatesFilter<"JourneyPlan"> | Date | string | null
  }

  export type NoticeBoardWhereInput = {
    AND?: NoticeBoardWhereInput | NoticeBoardWhereInput[]
    OR?: NoticeBoardWhereInput[]
    NOT?: NoticeBoardWhereInput | NoticeBoardWhereInput[]
    id?: IntFilter<"NoticeBoard"> | number
    title?: StringFilter<"NoticeBoard"> | string
    content?: StringFilter<"NoticeBoard"> | string
    createdAt?: DateTimeFilter<"NoticeBoard"> | Date | string
    updatedAt?: DateTimeFilter<"NoticeBoard"> | Date | string
  }

  export type NoticeBoardOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NoticeBoardWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NoticeBoardWhereInput | NoticeBoardWhereInput[]
    OR?: NoticeBoardWhereInput[]
    NOT?: NoticeBoardWhereInput | NoticeBoardWhereInput[]
    title?: StringFilter<"NoticeBoard"> | string
    content?: StringFilter<"NoticeBoard"> | string
    createdAt?: DateTimeFilter<"NoticeBoard"> | Date | string
    updatedAt?: DateTimeFilter<"NoticeBoard"> | Date | string
  }, "id">

  export type NoticeBoardOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NoticeBoardCountOrderByAggregateInput
    _avg?: NoticeBoardAvgOrderByAggregateInput
    _max?: NoticeBoardMaxOrderByAggregateInput
    _min?: NoticeBoardMinOrderByAggregateInput
    _sum?: NoticeBoardSumOrderByAggregateInput
  }

  export type NoticeBoardScalarWhereWithAggregatesInput = {
    AND?: NoticeBoardScalarWhereWithAggregatesInput | NoticeBoardScalarWhereWithAggregatesInput[]
    OR?: NoticeBoardScalarWhereWithAggregatesInput[]
    NOT?: NoticeBoardScalarWhereWithAggregatesInput | NoticeBoardScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"NoticeBoard"> | number
    title?: StringWithAggregatesFilter<"NoticeBoard"> | string
    content?: StringWithAggregatesFilter<"NoticeBoard"> | string
    createdAt?: DateTimeWithAggregatesFilter<"NoticeBoard"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NoticeBoard"> | Date | string
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    id?: IntFilter<"Report"> | number
    orderId?: IntNullableFilter<"Report"> | number | null
    outletId?: IntFilter<"Report"> | number
    createdAt?: DateTimeFilter<"Report"> | Date | string
    userId?: IntFilter<"Report"> | number
    journeyPlanId?: IntNullableFilter<"Report"> | number | null
    type?: EnumReportTypeFilter<"Report"> | $Enums.ReportType
    feedbackReport?: XOR<FeedbackReportNullableRelationFilter, FeedbackReportWhereInput> | null
    productReport?: XOR<ProductReportNullableRelationFilter, ProductReportWhereInput> | null
    journeyPlan?: XOR<JourneyPlanNullableRelationFilter, JourneyPlanWhereInput> | null
    order?: XOR<OrderNullableRelationFilter, OrderWhereInput> | null
    outlet?: XOR<OutletRelationFilter, OutletWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    visibilityReport?: XOR<VisibilityReportNullableRelationFilter, VisibilityReportWhereInput> | null
  }

  export type ReportOrderByWithRelationInput = {
    id?: SortOrder
    orderId?: SortOrderInput | SortOrder
    outletId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    journeyPlanId?: SortOrderInput | SortOrder
    type?: SortOrder
    feedbackReport?: FeedbackReportOrderByWithRelationInput
    productReport?: ProductReportOrderByWithRelationInput
    journeyPlan?: JourneyPlanOrderByWithRelationInput
    order?: OrderOrderByWithRelationInput
    outlet?: OutletOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    visibilityReport?: VisibilityReportOrderByWithRelationInput
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    orderId?: IntNullableFilter<"Report"> | number | null
    outletId?: IntFilter<"Report"> | number
    createdAt?: DateTimeFilter<"Report"> | Date | string
    userId?: IntFilter<"Report"> | number
    journeyPlanId?: IntNullableFilter<"Report"> | number | null
    type?: EnumReportTypeFilter<"Report"> | $Enums.ReportType
    feedbackReport?: XOR<FeedbackReportNullableRelationFilter, FeedbackReportWhereInput> | null
    productReport?: XOR<ProductReportNullableRelationFilter, ProductReportWhereInput> | null
    journeyPlan?: XOR<JourneyPlanNullableRelationFilter, JourneyPlanWhereInput> | null
    order?: XOR<OrderNullableRelationFilter, OrderWhereInput> | null
    outlet?: XOR<OutletRelationFilter, OutletWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    visibilityReport?: XOR<VisibilityReportNullableRelationFilter, VisibilityReportWhereInput> | null
  }, "id">

  export type ReportOrderByWithAggregationInput = {
    id?: SortOrder
    orderId?: SortOrderInput | SortOrder
    outletId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    journeyPlanId?: SortOrderInput | SortOrder
    type?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _avg?: ReportAvgOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
    _sum?: ReportSumOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Report"> | number
    orderId?: IntNullableWithAggregatesFilter<"Report"> | number | null
    outletId?: IntWithAggregatesFilter<"Report"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    userId?: IntWithAggregatesFilter<"Report"> | number
    journeyPlanId?: IntNullableWithAggregatesFilter<"Report"> | number | null
    type?: EnumReportTypeWithAggregatesFilter<"Report"> | $Enums.ReportType
  }

  export type FeedbackReportWhereInput = {
    AND?: FeedbackReportWhereInput | FeedbackReportWhereInput[]
    OR?: FeedbackReportWhereInput[]
    NOT?: FeedbackReportWhereInput | FeedbackReportWhereInput[]
    reportId?: IntFilter<"FeedbackReport"> | number
    comment?: StringNullableFilter<"FeedbackReport"> | string | null
    createdAt?: DateTimeFilter<"FeedbackReport"> | Date | string
    report?: XOR<ReportRelationFilter, ReportWhereInput>
  }

  export type FeedbackReportOrderByWithRelationInput = {
    reportId?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    report?: ReportOrderByWithRelationInput
  }

  export type FeedbackReportWhereUniqueInput = Prisma.AtLeast<{
    reportId?: number
    AND?: FeedbackReportWhereInput | FeedbackReportWhereInput[]
    OR?: FeedbackReportWhereInput[]
    NOT?: FeedbackReportWhereInput | FeedbackReportWhereInput[]
    comment?: StringNullableFilter<"FeedbackReport"> | string | null
    createdAt?: DateTimeFilter<"FeedbackReport"> | Date | string
    report?: XOR<ReportRelationFilter, ReportWhereInput>
  }, "reportId">

  export type FeedbackReportOrderByWithAggregationInput = {
    reportId?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: FeedbackReportCountOrderByAggregateInput
    _avg?: FeedbackReportAvgOrderByAggregateInput
    _max?: FeedbackReportMaxOrderByAggregateInput
    _min?: FeedbackReportMinOrderByAggregateInput
    _sum?: FeedbackReportSumOrderByAggregateInput
  }

  export type FeedbackReportScalarWhereWithAggregatesInput = {
    AND?: FeedbackReportScalarWhereWithAggregatesInput | FeedbackReportScalarWhereWithAggregatesInput[]
    OR?: FeedbackReportScalarWhereWithAggregatesInput[]
    NOT?: FeedbackReportScalarWhereWithAggregatesInput | FeedbackReportScalarWhereWithAggregatesInput[]
    reportId?: IntWithAggregatesFilter<"FeedbackReport"> | number
    comment?: StringNullableWithAggregatesFilter<"FeedbackReport"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FeedbackReport"> | Date | string
  }

  export type ProductReportWhereInput = {
    AND?: ProductReportWhereInput | ProductReportWhereInput[]
    OR?: ProductReportWhereInput[]
    NOT?: ProductReportWhereInput | ProductReportWhereInput[]
    reportId?: IntFilter<"ProductReport"> | number
    productName?: StringNullableFilter<"ProductReport"> | string | null
    quantity?: IntNullableFilter<"ProductReport"> | number | null
    comment?: StringNullableFilter<"ProductReport"> | string | null
    createdAt?: DateTimeFilter<"ProductReport"> | Date | string
    report?: XOR<ReportRelationFilter, ReportWhereInput>
  }

  export type ProductReportOrderByWithRelationInput = {
    reportId?: SortOrder
    productName?: SortOrderInput | SortOrder
    quantity?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    report?: ReportOrderByWithRelationInput
  }

  export type ProductReportWhereUniqueInput = Prisma.AtLeast<{
    reportId?: number
    AND?: ProductReportWhereInput | ProductReportWhereInput[]
    OR?: ProductReportWhereInput[]
    NOT?: ProductReportWhereInput | ProductReportWhereInput[]
    productName?: StringNullableFilter<"ProductReport"> | string | null
    quantity?: IntNullableFilter<"ProductReport"> | number | null
    comment?: StringNullableFilter<"ProductReport"> | string | null
    createdAt?: DateTimeFilter<"ProductReport"> | Date | string
    report?: XOR<ReportRelationFilter, ReportWhereInput>
  }, "reportId">

  export type ProductReportOrderByWithAggregationInput = {
    reportId?: SortOrder
    productName?: SortOrderInput | SortOrder
    quantity?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ProductReportCountOrderByAggregateInput
    _avg?: ProductReportAvgOrderByAggregateInput
    _max?: ProductReportMaxOrderByAggregateInput
    _min?: ProductReportMinOrderByAggregateInput
    _sum?: ProductReportSumOrderByAggregateInput
  }

  export type ProductReportScalarWhereWithAggregatesInput = {
    AND?: ProductReportScalarWhereWithAggregatesInput | ProductReportScalarWhereWithAggregatesInput[]
    OR?: ProductReportScalarWhereWithAggregatesInput[]
    NOT?: ProductReportScalarWhereWithAggregatesInput | ProductReportScalarWhereWithAggregatesInput[]
    reportId?: IntWithAggregatesFilter<"ProductReport"> | number
    productName?: StringNullableWithAggregatesFilter<"ProductReport"> | string | null
    quantity?: IntNullableWithAggregatesFilter<"ProductReport"> | number | null
    comment?: StringNullableWithAggregatesFilter<"ProductReport"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ProductReport"> | Date | string
  }

  export type VisibilityReportWhereInput = {
    AND?: VisibilityReportWhereInput | VisibilityReportWhereInput[]
    OR?: VisibilityReportWhereInput[]
    NOT?: VisibilityReportWhereInput | VisibilityReportWhereInput[]
    reportId?: IntFilter<"VisibilityReport"> | number
    comment?: StringNullableFilter<"VisibilityReport"> | string | null
    imageUrl?: StringNullableFilter<"VisibilityReport"> | string | null
    createdAt?: DateTimeFilter<"VisibilityReport"> | Date | string
    report?: XOR<ReportRelationFilter, ReportWhereInput>
  }

  export type VisibilityReportOrderByWithRelationInput = {
    reportId?: SortOrder
    comment?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    report?: ReportOrderByWithRelationInput
  }

  export type VisibilityReportWhereUniqueInput = Prisma.AtLeast<{
    reportId?: number
    AND?: VisibilityReportWhereInput | VisibilityReportWhereInput[]
    OR?: VisibilityReportWhereInput[]
    NOT?: VisibilityReportWhereInput | VisibilityReportWhereInput[]
    comment?: StringNullableFilter<"VisibilityReport"> | string | null
    imageUrl?: StringNullableFilter<"VisibilityReport"> | string | null
    createdAt?: DateTimeFilter<"VisibilityReport"> | Date | string
    report?: XOR<ReportRelationFilter, ReportWhereInput>
  }, "reportId">

  export type VisibilityReportOrderByWithAggregationInput = {
    reportId?: SortOrder
    comment?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: VisibilityReportCountOrderByAggregateInput
    _avg?: VisibilityReportAvgOrderByAggregateInput
    _max?: VisibilityReportMaxOrderByAggregateInput
    _min?: VisibilityReportMinOrderByAggregateInput
    _sum?: VisibilityReportSumOrderByAggregateInput
  }

  export type VisibilityReportScalarWhereWithAggregatesInput = {
    AND?: VisibilityReportScalarWhereWithAggregatesInput | VisibilityReportScalarWhereWithAggregatesInput[]
    OR?: VisibilityReportScalarWhereWithAggregatesInput[]
    NOT?: VisibilityReportScalarWhereWithAggregatesInput | VisibilityReportScalarWhereWithAggregatesInput[]
    reportId?: IntWithAggregatesFilter<"VisibilityReport"> | number
    comment?: StringNullableWithAggregatesFilter<"VisibilityReport"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"VisibilityReport"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"VisibilityReport"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    price?: FloatFilter<"Product"> | number
    currentStock?: IntFilter<"Product"> | number
    reorderPoint?: IntFilter<"Product"> | number
    orderQuantity?: IntFilter<"Product"> | number
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    outletId?: IntFilter<"Product"> | number
    imageUrl?: StringNullableFilter<"Product"> | string | null
    OrderItem?: OrderItemListRelationFilter
    outlet?: XOR<OutletRelationFilter, OutletWhereInput>
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    currentStock?: SortOrder
    reorderPoint?: SortOrder
    orderQuantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    outletId?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    OrderItem?: OrderItemOrderByRelationAggregateInput
    outlet?: OutletOrderByWithRelationInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    price?: FloatFilter<"Product"> | number
    currentStock?: IntFilter<"Product"> | number
    reorderPoint?: IntFilter<"Product"> | number
    orderQuantity?: IntFilter<"Product"> | number
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    outletId?: IntFilter<"Product"> | number
    imageUrl?: StringNullableFilter<"Product"> | string | null
    OrderItem?: OrderItemListRelationFilter
    outlet?: XOR<OutletRelationFilter, OutletWhereInput>
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    price?: SortOrder
    currentStock?: SortOrder
    reorderPoint?: SortOrder
    orderQuantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    outletId?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Product"> | number
    name?: StringWithAggregatesFilter<"Product"> | string
    description?: StringNullableWithAggregatesFilter<"Product"> | string | null
    price?: FloatWithAggregatesFilter<"Product"> | number
    currentStock?: IntWithAggregatesFilter<"Product"> | number
    reorderPoint?: IntWithAggregatesFilter<"Product"> | number
    orderQuantity?: IntWithAggregatesFilter<"Product"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    outletId?: IntWithAggregatesFilter<"Product"> | number
    imageUrl?: StringNullableWithAggregatesFilter<"Product"> | string | null
  }

  export type LeaveWhereInput = {
    AND?: LeaveWhereInput | LeaveWhereInput[]
    OR?: LeaveWhereInput[]
    NOT?: LeaveWhereInput | LeaveWhereInput[]
    id?: IntFilter<"Leave"> | number
    userId?: IntFilter<"Leave"> | number
    leaveType?: StringFilter<"Leave"> | string
    startDate?: DateTimeFilter<"Leave"> | Date | string
    endDate?: DateTimeFilter<"Leave"> | Date | string
    reason?: StringFilter<"Leave"> | string
    attachment?: StringNullableFilter<"Leave"> | string | null
    status?: StringFilter<"Leave"> | string
    createdAt?: DateTimeFilter<"Leave"> | Date | string
    updatedAt?: DateTimeFilter<"Leave"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type LeaveOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    leaveType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrder
    attachment?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type LeaveWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LeaveWhereInput | LeaveWhereInput[]
    OR?: LeaveWhereInput[]
    NOT?: LeaveWhereInput | LeaveWhereInput[]
    userId?: IntFilter<"Leave"> | number
    leaveType?: StringFilter<"Leave"> | string
    startDate?: DateTimeFilter<"Leave"> | Date | string
    endDate?: DateTimeFilter<"Leave"> | Date | string
    reason?: StringFilter<"Leave"> | string
    attachment?: StringNullableFilter<"Leave"> | string | null
    status?: StringFilter<"Leave"> | string
    createdAt?: DateTimeFilter<"Leave"> | Date | string
    updatedAt?: DateTimeFilter<"Leave"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type LeaveOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    leaveType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrder
    attachment?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LeaveCountOrderByAggregateInput
    _avg?: LeaveAvgOrderByAggregateInput
    _max?: LeaveMaxOrderByAggregateInput
    _min?: LeaveMinOrderByAggregateInput
    _sum?: LeaveSumOrderByAggregateInput
  }

  export type LeaveScalarWhereWithAggregatesInput = {
    AND?: LeaveScalarWhereWithAggregatesInput | LeaveScalarWhereWithAggregatesInput[]
    OR?: LeaveScalarWhereWithAggregatesInput[]
    NOT?: LeaveScalarWhereWithAggregatesInput | LeaveScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Leave"> | number
    userId?: IntWithAggregatesFilter<"Leave"> | number
    leaveType?: StringWithAggregatesFilter<"Leave"> | string
    startDate?: DateTimeWithAggregatesFilter<"Leave"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Leave"> | Date | string
    reason?: StringWithAggregatesFilter<"Leave"> | string
    attachment?: StringNullableWithAggregatesFilter<"Leave"> | string | null
    status?: StringWithAggregatesFilter<"Leave"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Leave"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Leave"> | Date | string
  }

  export type UserCreateInput = {
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photoUrl?: string | null
    journeyPlans?: JourneyPlanCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    tokens?: TokenCreateNestedManyWithoutUserInput
    leaves?: LeaveCreateNestedManyWithoutUserInput
    Manager?: ManagerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photoUrl?: string | null
    journeyPlans?: JourneyPlanUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutUserInput
    Manager?: ManagerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    tokens?: TokenUpdateManyWithoutUserNestedInput
    leaves?: LeaveUpdateManyWithoutUserNestedInput
    Manager?: ManagerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutUserNestedInput
    Manager?: ManagerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photoUrl?: string | null
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ManagerCreateInput = {
    department?: string | null
    user: UserCreateNestedOneWithoutManagerInput
    checkins?: ManagerCheckinCreateNestedManyWithoutManagerInput
  }

  export type ManagerUncheckedCreateInput = {
    id?: number
    userId: number
    department?: string | null
    checkins?: ManagerCheckinUncheckedCreateNestedManyWithoutManagerInput
  }

  export type ManagerUpdateInput = {
    department?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutManagerNestedInput
    checkins?: ManagerCheckinUpdateManyWithoutManagerNestedInput
  }

  export type ManagerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    checkins?: ManagerCheckinUncheckedUpdateManyWithoutManagerNestedInput
  }

  export type ManagerCreateManyInput = {
    id?: number
    userId: number
    department?: string | null
  }

  export type ManagerUpdateManyMutationInput = {
    department?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ManagerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TokenCreateInput = {
    token: string
    createdAt?: Date | string
    expiresAt: Date | string
    user: UserCreateNestedOneWithoutTokensInput
  }

  export type TokenUncheckedCreateInput = {
    id?: number
    token: string
    userId: number
    createdAt?: Date | string
    expiresAt: Date | string
  }

  export type TokenUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutTokensNestedInput
  }

  export type TokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenCreateManyInput = {
    id?: number
    token: string
    userId: number
    createdAt?: Date | string
    expiresAt: Date | string
  }

  export type TokenUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OutletCreateInput = {
    name: string
    address: string
    latitude?: number | null
    longitude?: number | null
    balance?: string | null
    email?: string | null
    kraPin?: string | null
    phone?: string | null
    journeyPlans?: JourneyPlanCreateNestedManyWithoutOutletInput
    orders?: OrderCreateNestedManyWithoutOutletInput
    products?: ProductCreateNestedManyWithoutOutletInput
    reports?: ReportCreateNestedManyWithoutOutletInput
    checkins?: ManagerCheckinCreateNestedManyWithoutOutletInput
  }

  export type OutletUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    latitude?: number | null
    longitude?: number | null
    balance?: string | null
    email?: string | null
    kraPin?: string | null
    phone?: string | null
    journeyPlans?: JourneyPlanUncheckedCreateNestedManyWithoutOutletInput
    orders?: OrderUncheckedCreateNestedManyWithoutOutletInput
    products?: ProductUncheckedCreateNestedManyWithoutOutletInput
    reports?: ReportUncheckedCreateNestedManyWithoutOutletInput
    checkins?: ManagerCheckinUncheckedCreateNestedManyWithoutOutletInput
  }

  export type OutletUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUpdateManyWithoutOutletNestedInput
    orders?: OrderUpdateManyWithoutOutletNestedInput
    products?: ProductUpdateManyWithoutOutletNestedInput
    reports?: ReportUpdateManyWithoutOutletNestedInput
    checkins?: ManagerCheckinUpdateManyWithoutOutletNestedInput
  }

  export type OutletUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUncheckedUpdateManyWithoutOutletNestedInput
    orders?: OrderUncheckedUpdateManyWithoutOutletNestedInput
    products?: ProductUncheckedUpdateManyWithoutOutletNestedInput
    reports?: ReportUncheckedUpdateManyWithoutOutletNestedInput
    checkins?: ManagerCheckinUncheckedUpdateManyWithoutOutletNestedInput
  }

  export type OutletCreateManyInput = {
    id?: number
    name: string
    address: string
    latitude?: number | null
    longitude?: number | null
    balance?: string | null
    email?: string | null
    kraPin?: string | null
    phone?: string | null
  }

  export type OutletUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OutletUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ManagerCheckinCreateInput = {
    date: Date | string
    checkInAt?: Date | string | null
    checkOutAt?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    notes?: string | null
    manager: ManagerCreateNestedOneWithoutCheckinsInput
    outlet: OutletCreateNestedOneWithoutCheckinsInput
  }

  export type ManagerCheckinUncheckedCreateInput = {
    id?: number
    managerId: number
    outletId: number
    date: Date | string
    checkInAt?: Date | string | null
    checkOutAt?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    notes?: string | null
  }

  export type ManagerCheckinUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    manager?: ManagerUpdateOneRequiredWithoutCheckinsNestedInput
    outlet?: OutletUpdateOneRequiredWithoutCheckinsNestedInput
  }

  export type ManagerCheckinUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    managerId?: IntFieldUpdateOperationsInput | number
    outletId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ManagerCheckinCreateManyInput = {
    id?: number
    managerId: number
    outletId: number
    date: Date | string
    checkInAt?: Date | string | null
    checkOutAt?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    notes?: string | null
  }

  export type ManagerCheckinUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ManagerCheckinUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    managerId?: IntFieldUpdateOperationsInput | number
    outletId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    outlet: OutletCreateNestedOneWithoutOrdersInput
    user: UserCreateNestedOneWithoutOrdersInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    reports?: ReportCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    outletId: number
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    reports?: ReportUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    outlet?: OutletUpdateOneRequiredWithoutOrdersNestedInput
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    reports?: ReportUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    outletId?: IntFieldUpdateOperationsInput | number
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    reports?: ReportUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderCreateManyInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    outletId: number
  }

  export type OrderUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    outletId?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemCreateInput = {
    quantity: number
    order: OrderCreateNestedOneWithoutOrderItemsInput
    product: ProductCreateNestedOneWithoutOrderItemInput
  }

  export type OrderItemUncheckedCreateInput = {
    id?: number
    orderId: number
    productId: number
    quantity: number
  }

  export type OrderItemUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutOrderItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutOrderItemNestedInput
  }

  export type OrderItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemCreateManyInput = {
    id?: number
    orderId: number
    productId: number
    quantity: number
  }

  export type OrderItemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type JourneyPlanCreateInput = {
    date: Date | string
    time: string
    status?: number
    checkInTime?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    imageUrl?: string | null
    notes?: string | null
    checkoutLatitude?: number | null
    checkoutLongitude?: number | null
    checkoutTime?: Date | string | null
    outlet: OutletCreateNestedOneWithoutJourneyPlansInput
    user?: UserCreateNestedOneWithoutJourneyPlansInput
    reports?: ReportCreateNestedManyWithoutJourneyPlanInput
  }

  export type JourneyPlanUncheckedCreateInput = {
    id?: number
    date: Date | string
    time: string
    userId?: number | null
    outletId: number
    status?: number
    checkInTime?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    imageUrl?: string | null
    notes?: string | null
    checkoutLatitude?: number | null
    checkoutLongitude?: number | null
    checkoutTime?: Date | string | null
    reports?: ReportUncheckedCreateNestedManyWithoutJourneyPlanInput
  }

  export type JourneyPlanUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    outlet?: OutletUpdateOneRequiredWithoutJourneyPlansNestedInput
    user?: UserUpdateOneWithoutJourneyPlansNestedInput
    reports?: ReportUpdateManyWithoutJourneyPlanNestedInput
  }

  export type JourneyPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    outletId?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reports?: ReportUncheckedUpdateManyWithoutJourneyPlanNestedInput
  }

  export type JourneyPlanCreateManyInput = {
    id?: number
    date: Date | string
    time: string
    userId?: number | null
    outletId: number
    status?: number
    checkInTime?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    imageUrl?: string | null
    notes?: string | null
    checkoutLatitude?: number | null
    checkoutLongitude?: number | null
    checkoutTime?: Date | string | null
  }

  export type JourneyPlanUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type JourneyPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    outletId?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NoticeBoardCreateInput = {
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NoticeBoardUncheckedCreateInput = {
    id?: number
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NoticeBoardUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoticeBoardUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoticeBoardCreateManyInput = {
    id?: number
    title: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NoticeBoardUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NoticeBoardUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCreateInput = {
    createdAt?: Date | string
    type: $Enums.ReportType
    feedbackReport?: FeedbackReportCreateNestedOneWithoutReportInput
    productReport?: ProductReportCreateNestedOneWithoutReportInput
    journeyPlan?: JourneyPlanCreateNestedOneWithoutReportsInput
    order?: OrderCreateNestedOneWithoutReportsInput
    outlet: OutletCreateNestedOneWithoutReportsInput
    user: UserCreateNestedOneWithoutReportsInput
    visibilityReport?: VisibilityReportCreateNestedOneWithoutReportInput
  }

  export type ReportUncheckedCreateInput = {
    id?: number
    orderId?: number | null
    outletId: number
    createdAt?: Date | string
    userId: number
    journeyPlanId?: number | null
    type: $Enums.ReportType
    feedbackReport?: FeedbackReportUncheckedCreateNestedOneWithoutReportInput
    productReport?: ProductReportUncheckedCreateNestedOneWithoutReportInput
    visibilityReport?: VisibilityReportUncheckedCreateNestedOneWithoutReportInput
  }

  export type ReportUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    feedbackReport?: FeedbackReportUpdateOneWithoutReportNestedInput
    productReport?: ProductReportUpdateOneWithoutReportNestedInput
    journeyPlan?: JourneyPlanUpdateOneWithoutReportsNestedInput
    order?: OrderUpdateOneWithoutReportsNestedInput
    outlet?: OutletUpdateOneRequiredWithoutReportsNestedInput
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
    visibilityReport?: VisibilityReportUpdateOneWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    outletId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    journeyPlanId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    feedbackReport?: FeedbackReportUncheckedUpdateOneWithoutReportNestedInput
    productReport?: ProductReportUncheckedUpdateOneWithoutReportNestedInput
    visibilityReport?: VisibilityReportUncheckedUpdateOneWithoutReportNestedInput
  }

  export type ReportCreateManyInput = {
    id?: number
    orderId?: number | null
    outletId: number
    createdAt?: Date | string
    userId: number
    journeyPlanId?: number | null
    type: $Enums.ReportType
  }

  export type ReportUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
  }

  export type ReportUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    outletId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    journeyPlanId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
  }

  export type FeedbackReportCreateInput = {
    comment?: string | null
    createdAt?: Date | string
    report: ReportCreateNestedOneWithoutFeedbackReportInput
  }

  export type FeedbackReportUncheckedCreateInput = {
    reportId: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackReportUpdateInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    report?: ReportUpdateOneRequiredWithoutFeedbackReportNestedInput
  }

  export type FeedbackReportUncheckedUpdateInput = {
    reportId?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackReportCreateManyInput = {
    reportId: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackReportUpdateManyMutationInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackReportUncheckedUpdateManyInput = {
    reportId?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductReportCreateInput = {
    productName?: string | null
    quantity?: number | null
    comment?: string | null
    createdAt?: Date | string
    report: ReportCreateNestedOneWithoutProductReportInput
  }

  export type ProductReportUncheckedCreateInput = {
    reportId: number
    productName?: string | null
    quantity?: number | null
    comment?: string | null
    createdAt?: Date | string
  }

  export type ProductReportUpdateInput = {
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    report?: ReportUpdateOneRequiredWithoutProductReportNestedInput
  }

  export type ProductReportUncheckedUpdateInput = {
    reportId?: IntFieldUpdateOperationsInput | number
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductReportCreateManyInput = {
    reportId: number
    productName?: string | null
    quantity?: number | null
    comment?: string | null
    createdAt?: Date | string
  }

  export type ProductReportUpdateManyMutationInput = {
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductReportUncheckedUpdateManyInput = {
    reportId?: IntFieldUpdateOperationsInput | number
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisibilityReportCreateInput = {
    comment?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
    report: ReportCreateNestedOneWithoutVisibilityReportInput
  }

  export type VisibilityReportUncheckedCreateInput = {
    reportId: number
    comment?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
  }

  export type VisibilityReportUpdateInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    report?: ReportUpdateOneRequiredWithoutVisibilityReportNestedInput
  }

  export type VisibilityReportUncheckedUpdateInput = {
    reportId?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisibilityReportCreateManyInput = {
    reportId: number
    comment?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
  }

  export type VisibilityReportUpdateManyMutationInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisibilityReportUncheckedUpdateManyInput = {
    reportId?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    name: string
    description?: string | null
    price: number
    currentStock: number
    reorderPoint: number
    orderQuantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    OrderItem?: OrderItemCreateNestedManyWithoutProductInput
    outlet: OutletCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    price: number
    currentStock: number
    reorderPoint: number
    orderQuantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    outletId: number
    imageUrl?: string | null
    OrderItem?: OrderItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    orderQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    OrderItem?: OrderItemUpdateManyWithoutProductNestedInput
    outlet?: OutletUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    orderQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    outletId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    OrderItem?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    price: number
    currentStock: number
    reorderPoint: number
    orderQuantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    outletId: number
    imageUrl?: string | null
  }

  export type ProductUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    orderQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    orderQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    outletId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeaveCreateInput = {
    leaveType: string
    startDate: Date | string
    endDate: Date | string
    reason: string
    attachment?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutLeavesInput
  }

  export type LeaveUncheckedCreateInput = {
    id?: number
    userId: number
    leaveType: string
    startDate: Date | string
    endDate: Date | string
    reason: string
    attachment?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaveUpdateInput = {
    leaveType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLeavesNestedInput
  }

  export type LeaveUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    leaveType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveCreateManyInput = {
    id?: number
    userId: number
    leaveType: string
    startDate: Date | string
    endDate: Date | string
    reason: string
    attachment?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaveUpdateManyMutationInput = {
    leaveType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    leaveType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type JourneyPlanListRelationFilter = {
    every?: JourneyPlanWhereInput
    some?: JourneyPlanWhereInput
    none?: JourneyPlanWhereInput
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type TokenListRelationFilter = {
    every?: TokenWhereInput
    some?: TokenWhereInput
    none?: TokenWhereInput
  }

  export type LeaveListRelationFilter = {
    every?: LeaveWhereInput
    some?: LeaveWhereInput
    none?: LeaveWhereInput
  }

  export type ManagerNullableRelationFilter = {
    is?: ManagerWhereInput | null
    isNot?: ManagerWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type JourneyPlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TokenOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeaveOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    photoUrl?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    photoUrl?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    photoUrl?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ManagerCheckinListRelationFilter = {
    every?: ManagerCheckinWhereInput
    some?: ManagerCheckinWhereInput
    none?: ManagerCheckinWhereInput
  }

  export type ManagerCheckinOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ManagerCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    department?: SortOrder
  }

  export type ManagerAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ManagerMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    department?: SortOrder
  }

  export type ManagerMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    department?: SortOrder
  }

  export type ManagerSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type TokenCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type TokenAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type TokenMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type TokenMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type TokenSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OutletCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    balance?: SortOrder
    email?: SortOrder
    kraPin?: SortOrder
    phone?: SortOrder
  }

  export type OutletAvgOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type OutletMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    balance?: SortOrder
    email?: SortOrder
    kraPin?: SortOrder
    phone?: SortOrder
  }

  export type OutletMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    balance?: SortOrder
    email?: SortOrder
    kraPin?: SortOrder
    phone?: SortOrder
  }

  export type OutletSumOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ManagerRelationFilter = {
    is?: ManagerWhereInput
    isNot?: ManagerWhereInput
  }

  export type OutletRelationFilter = {
    is?: OutletWhereInput
    isNot?: OutletWhereInput
  }

  export type ManagerCheckinCountOrderByAggregateInput = {
    id?: SortOrder
    managerId?: SortOrder
    outletId?: SortOrder
    date?: SortOrder
    checkInAt?: SortOrder
    checkOutAt?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    notes?: SortOrder
  }

  export type ManagerCheckinAvgOrderByAggregateInput = {
    id?: SortOrder
    managerId?: SortOrder
    outletId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type ManagerCheckinMaxOrderByAggregateInput = {
    id?: SortOrder
    managerId?: SortOrder
    outletId?: SortOrder
    date?: SortOrder
    checkInAt?: SortOrder
    checkOutAt?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    notes?: SortOrder
  }

  export type ManagerCheckinMinOrderByAggregateInput = {
    id?: SortOrder
    managerId?: SortOrder
    outletId?: SortOrder
    date?: SortOrder
    checkInAt?: SortOrder
    checkOutAt?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    notes?: SortOrder
  }

  export type ManagerCheckinSumOrderByAggregateInput = {
    id?: SortOrder
    managerId?: SortOrder
    outletId?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type OrderItemListRelationFilter = {
    every?: OrderItemWhereInput
    some?: OrderItemWhereInput
    none?: OrderItemWhereInput
  }

  export type OrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    outletId?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    outletId?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    outletId?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
  }

  export type OrderRelationFilter = {
    is?: OrderWhereInput
    isNot?: OrderWhereInput
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type OrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
  }

  export type OrderItemAvgOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
  }

  export type OrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
  }

  export type OrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
  }

  export type OrderItemSumOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type JourneyPlanCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    time?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
    status?: SortOrder
    checkInTime?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    imageUrl?: SortOrder
    notes?: SortOrder
    checkoutLatitude?: SortOrder
    checkoutLongitude?: SortOrder
    checkoutTime?: SortOrder
  }

  export type JourneyPlanAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
    status?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    checkoutLatitude?: SortOrder
    checkoutLongitude?: SortOrder
  }

  export type JourneyPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    time?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
    status?: SortOrder
    checkInTime?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    imageUrl?: SortOrder
    notes?: SortOrder
    checkoutLatitude?: SortOrder
    checkoutLongitude?: SortOrder
    checkoutTime?: SortOrder
  }

  export type JourneyPlanMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    time?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
    status?: SortOrder
    checkInTime?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    imageUrl?: SortOrder
    notes?: SortOrder
    checkoutLatitude?: SortOrder
    checkoutLongitude?: SortOrder
    checkoutTime?: SortOrder
  }

  export type JourneyPlanSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    outletId?: SortOrder
    status?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    checkoutLatitude?: SortOrder
    checkoutLongitude?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NoticeBoardCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NoticeBoardAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NoticeBoardMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NoticeBoardMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NoticeBoardSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumReportTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportType | EnumReportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReportType[]
    notIn?: $Enums.ReportType[]
    not?: NestedEnumReportTypeFilter<$PrismaModel> | $Enums.ReportType
  }

  export type FeedbackReportNullableRelationFilter = {
    is?: FeedbackReportWhereInput | null
    isNot?: FeedbackReportWhereInput | null
  }

  export type ProductReportNullableRelationFilter = {
    is?: ProductReportWhereInput | null
    isNot?: ProductReportWhereInput | null
  }

  export type JourneyPlanNullableRelationFilter = {
    is?: JourneyPlanWhereInput | null
    isNot?: JourneyPlanWhereInput | null
  }

  export type OrderNullableRelationFilter = {
    is?: OrderWhereInput | null
    isNot?: OrderWhereInput | null
  }

  export type VisibilityReportNullableRelationFilter = {
    is?: VisibilityReportWhereInput | null
    isNot?: VisibilityReportWhereInput | null
  }

  export type ReportCountOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    outletId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    journeyPlanId?: SortOrder
    type?: SortOrder
  }

  export type ReportAvgOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    outletId?: SortOrder
    userId?: SortOrder
    journeyPlanId?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    outletId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    journeyPlanId?: SortOrder
    type?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    outletId?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    journeyPlanId?: SortOrder
    type?: SortOrder
  }

  export type ReportSumOrderByAggregateInput = {
    id?: SortOrder
    orderId?: SortOrder
    outletId?: SortOrder
    userId?: SortOrder
    journeyPlanId?: SortOrder
  }

  export type EnumReportTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportType | EnumReportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReportType[]
    notIn?: $Enums.ReportType[]
    not?: NestedEnumReportTypeWithAggregatesFilter<$PrismaModel> | $Enums.ReportType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReportTypeFilter<$PrismaModel>
    _max?: NestedEnumReportTypeFilter<$PrismaModel>
  }

  export type ReportRelationFilter = {
    is?: ReportWhereInput
    isNot?: ReportWhereInput
  }

  export type FeedbackReportCountOrderByAggregateInput = {
    reportId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackReportAvgOrderByAggregateInput = {
    reportId?: SortOrder
  }

  export type FeedbackReportMaxOrderByAggregateInput = {
    reportId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackReportMinOrderByAggregateInput = {
    reportId?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackReportSumOrderByAggregateInput = {
    reportId?: SortOrder
  }

  export type ProductReportCountOrderByAggregateInput = {
    reportId?: SortOrder
    productName?: SortOrder
    quantity?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ProductReportAvgOrderByAggregateInput = {
    reportId?: SortOrder
    quantity?: SortOrder
  }

  export type ProductReportMaxOrderByAggregateInput = {
    reportId?: SortOrder
    productName?: SortOrder
    quantity?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ProductReportMinOrderByAggregateInput = {
    reportId?: SortOrder
    productName?: SortOrder
    quantity?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type ProductReportSumOrderByAggregateInput = {
    reportId?: SortOrder
    quantity?: SortOrder
  }

  export type VisibilityReportCountOrderByAggregateInput = {
    reportId?: SortOrder
    comment?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type VisibilityReportAvgOrderByAggregateInput = {
    reportId?: SortOrder
  }

  export type VisibilityReportMaxOrderByAggregateInput = {
    reportId?: SortOrder
    comment?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type VisibilityReportMinOrderByAggregateInput = {
    reportId?: SortOrder
    comment?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type VisibilityReportSumOrderByAggregateInput = {
    reportId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    currentStock?: SortOrder
    reorderPoint?: SortOrder
    orderQuantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    outletId?: SortOrder
    imageUrl?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    currentStock?: SortOrder
    reorderPoint?: SortOrder
    orderQuantity?: SortOrder
    outletId?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    currentStock?: SortOrder
    reorderPoint?: SortOrder
    orderQuantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    outletId?: SortOrder
    imageUrl?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    price?: SortOrder
    currentStock?: SortOrder
    reorderPoint?: SortOrder
    orderQuantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    outletId?: SortOrder
    imageUrl?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    currentStock?: SortOrder
    reorderPoint?: SortOrder
    orderQuantity?: SortOrder
    outletId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type LeaveCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    leaveType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrder
    attachment?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LeaveAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type LeaveMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    leaveType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrder
    attachment?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LeaveMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    leaveType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrder
    attachment?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LeaveSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type JourneyPlanCreateNestedManyWithoutUserInput = {
    create?: XOR<JourneyPlanCreateWithoutUserInput, JourneyPlanUncheckedCreateWithoutUserInput> | JourneyPlanCreateWithoutUserInput[] | JourneyPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JourneyPlanCreateOrConnectWithoutUserInput | JourneyPlanCreateOrConnectWithoutUserInput[]
    createMany?: JourneyPlanCreateManyUserInputEnvelope
    connect?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type TokenCreateNestedManyWithoutUserInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
  }

  export type LeaveCreateNestedManyWithoutUserInput = {
    create?: XOR<LeaveCreateWithoutUserInput, LeaveUncheckedCreateWithoutUserInput> | LeaveCreateWithoutUserInput[] | LeaveUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutUserInput | LeaveCreateOrConnectWithoutUserInput[]
    createMany?: LeaveCreateManyUserInputEnvelope
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
  }

  export type ManagerCreateNestedOneWithoutUserInput = {
    create?: XOR<ManagerCreateWithoutUserInput, ManagerUncheckedCreateWithoutUserInput>
    connectOrCreate?: ManagerCreateOrConnectWithoutUserInput
    connect?: ManagerWhereUniqueInput
  }

  export type JourneyPlanUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<JourneyPlanCreateWithoutUserInput, JourneyPlanUncheckedCreateWithoutUserInput> | JourneyPlanCreateWithoutUserInput[] | JourneyPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JourneyPlanCreateOrConnectWithoutUserInput | JourneyPlanCreateOrConnectWithoutUserInput[]
    createMany?: JourneyPlanCreateManyUserInputEnvelope
    connect?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type TokenUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
  }

  export type LeaveUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LeaveCreateWithoutUserInput, LeaveUncheckedCreateWithoutUserInput> | LeaveCreateWithoutUserInput[] | LeaveUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutUserInput | LeaveCreateOrConnectWithoutUserInput[]
    createMany?: LeaveCreateManyUserInputEnvelope
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
  }

  export type ManagerUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ManagerCreateWithoutUserInput, ManagerUncheckedCreateWithoutUserInput>
    connectOrCreate?: ManagerCreateOrConnectWithoutUserInput
    connect?: ManagerWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type JourneyPlanUpdateManyWithoutUserNestedInput = {
    create?: XOR<JourneyPlanCreateWithoutUserInput, JourneyPlanUncheckedCreateWithoutUserInput> | JourneyPlanCreateWithoutUserInput[] | JourneyPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JourneyPlanCreateOrConnectWithoutUserInput | JourneyPlanCreateOrConnectWithoutUserInput[]
    upsert?: JourneyPlanUpsertWithWhereUniqueWithoutUserInput | JourneyPlanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JourneyPlanCreateManyUserInputEnvelope
    set?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    disconnect?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    delete?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    connect?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    update?: JourneyPlanUpdateWithWhereUniqueWithoutUserInput | JourneyPlanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JourneyPlanUpdateManyWithWhereWithoutUserInput | JourneyPlanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JourneyPlanScalarWhereInput | JourneyPlanScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutUserInput | ReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutUserInput | ReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutUserInput | ReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type TokenUpdateManyWithoutUserNestedInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    upsert?: TokenUpsertWithWhereUniqueWithoutUserInput | TokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    set?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    disconnect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    delete?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    update?: TokenUpdateWithWhereUniqueWithoutUserInput | TokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TokenUpdateManyWithWhereWithoutUserInput | TokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TokenScalarWhereInput | TokenScalarWhereInput[]
  }

  export type LeaveUpdateManyWithoutUserNestedInput = {
    create?: XOR<LeaveCreateWithoutUserInput, LeaveUncheckedCreateWithoutUserInput> | LeaveCreateWithoutUserInput[] | LeaveUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutUserInput | LeaveCreateOrConnectWithoutUserInput[]
    upsert?: LeaveUpsertWithWhereUniqueWithoutUserInput | LeaveUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LeaveCreateManyUserInputEnvelope
    set?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    disconnect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    delete?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    update?: LeaveUpdateWithWhereUniqueWithoutUserInput | LeaveUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LeaveUpdateManyWithWhereWithoutUserInput | LeaveUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LeaveScalarWhereInput | LeaveScalarWhereInput[]
  }

  export type ManagerUpdateOneWithoutUserNestedInput = {
    create?: XOR<ManagerCreateWithoutUserInput, ManagerUncheckedCreateWithoutUserInput>
    connectOrCreate?: ManagerCreateOrConnectWithoutUserInput
    upsert?: ManagerUpsertWithoutUserInput
    disconnect?: ManagerWhereInput | boolean
    delete?: ManagerWhereInput | boolean
    connect?: ManagerWhereUniqueInput
    update?: XOR<XOR<ManagerUpdateToOneWithWhereWithoutUserInput, ManagerUpdateWithoutUserInput>, ManagerUncheckedUpdateWithoutUserInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JourneyPlanUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<JourneyPlanCreateWithoutUserInput, JourneyPlanUncheckedCreateWithoutUserInput> | JourneyPlanCreateWithoutUserInput[] | JourneyPlanUncheckedCreateWithoutUserInput[]
    connectOrCreate?: JourneyPlanCreateOrConnectWithoutUserInput | JourneyPlanCreateOrConnectWithoutUserInput[]
    upsert?: JourneyPlanUpsertWithWhereUniqueWithoutUserInput | JourneyPlanUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: JourneyPlanCreateManyUserInputEnvelope
    set?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    disconnect?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    delete?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    connect?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    update?: JourneyPlanUpdateWithWhereUniqueWithoutUserInput | JourneyPlanUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: JourneyPlanUpdateManyWithWhereWithoutUserInput | JourneyPlanUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: JourneyPlanScalarWhereInput | JourneyPlanScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutUserInput | ReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutUserInput | ReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutUserInput | ReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type TokenUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput> | TokenCreateWithoutUserInput[] | TokenUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TokenCreateOrConnectWithoutUserInput | TokenCreateOrConnectWithoutUserInput[]
    upsert?: TokenUpsertWithWhereUniqueWithoutUserInput | TokenUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TokenCreateManyUserInputEnvelope
    set?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    disconnect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    delete?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    connect?: TokenWhereUniqueInput | TokenWhereUniqueInput[]
    update?: TokenUpdateWithWhereUniqueWithoutUserInput | TokenUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TokenUpdateManyWithWhereWithoutUserInput | TokenUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TokenScalarWhereInput | TokenScalarWhereInput[]
  }

  export type LeaveUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LeaveCreateWithoutUserInput, LeaveUncheckedCreateWithoutUserInput> | LeaveCreateWithoutUserInput[] | LeaveUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeaveCreateOrConnectWithoutUserInput | LeaveCreateOrConnectWithoutUserInput[]
    upsert?: LeaveUpsertWithWhereUniqueWithoutUserInput | LeaveUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LeaveCreateManyUserInputEnvelope
    set?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    disconnect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    delete?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    connect?: LeaveWhereUniqueInput | LeaveWhereUniqueInput[]
    update?: LeaveUpdateWithWhereUniqueWithoutUserInput | LeaveUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LeaveUpdateManyWithWhereWithoutUserInput | LeaveUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LeaveScalarWhereInput | LeaveScalarWhereInput[]
  }

  export type ManagerUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ManagerCreateWithoutUserInput, ManagerUncheckedCreateWithoutUserInput>
    connectOrCreate?: ManagerCreateOrConnectWithoutUserInput
    upsert?: ManagerUpsertWithoutUserInput
    disconnect?: ManagerWhereInput | boolean
    delete?: ManagerWhereInput | boolean
    connect?: ManagerWhereUniqueInput
    update?: XOR<XOR<ManagerUpdateToOneWithWhereWithoutUserInput, ManagerUpdateWithoutUserInput>, ManagerUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutManagerInput = {
    create?: XOR<UserCreateWithoutManagerInput, UserUncheckedCreateWithoutManagerInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagerInput
    connect?: UserWhereUniqueInput
  }

  export type ManagerCheckinCreateNestedManyWithoutManagerInput = {
    create?: XOR<ManagerCheckinCreateWithoutManagerInput, ManagerCheckinUncheckedCreateWithoutManagerInput> | ManagerCheckinCreateWithoutManagerInput[] | ManagerCheckinUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: ManagerCheckinCreateOrConnectWithoutManagerInput | ManagerCheckinCreateOrConnectWithoutManagerInput[]
    createMany?: ManagerCheckinCreateManyManagerInputEnvelope
    connect?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
  }

  export type ManagerCheckinUncheckedCreateNestedManyWithoutManagerInput = {
    create?: XOR<ManagerCheckinCreateWithoutManagerInput, ManagerCheckinUncheckedCreateWithoutManagerInput> | ManagerCheckinCreateWithoutManagerInput[] | ManagerCheckinUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: ManagerCheckinCreateOrConnectWithoutManagerInput | ManagerCheckinCreateOrConnectWithoutManagerInput[]
    createMany?: ManagerCheckinCreateManyManagerInputEnvelope
    connect?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutManagerNestedInput = {
    create?: XOR<UserCreateWithoutManagerInput, UserUncheckedCreateWithoutManagerInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagerInput
    upsert?: UserUpsertWithoutManagerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutManagerInput, UserUpdateWithoutManagerInput>, UserUncheckedUpdateWithoutManagerInput>
  }

  export type ManagerCheckinUpdateManyWithoutManagerNestedInput = {
    create?: XOR<ManagerCheckinCreateWithoutManagerInput, ManagerCheckinUncheckedCreateWithoutManagerInput> | ManagerCheckinCreateWithoutManagerInput[] | ManagerCheckinUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: ManagerCheckinCreateOrConnectWithoutManagerInput | ManagerCheckinCreateOrConnectWithoutManagerInput[]
    upsert?: ManagerCheckinUpsertWithWhereUniqueWithoutManagerInput | ManagerCheckinUpsertWithWhereUniqueWithoutManagerInput[]
    createMany?: ManagerCheckinCreateManyManagerInputEnvelope
    set?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    disconnect?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    delete?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    connect?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    update?: ManagerCheckinUpdateWithWhereUniqueWithoutManagerInput | ManagerCheckinUpdateWithWhereUniqueWithoutManagerInput[]
    updateMany?: ManagerCheckinUpdateManyWithWhereWithoutManagerInput | ManagerCheckinUpdateManyWithWhereWithoutManagerInput[]
    deleteMany?: ManagerCheckinScalarWhereInput | ManagerCheckinScalarWhereInput[]
  }

  export type ManagerCheckinUncheckedUpdateManyWithoutManagerNestedInput = {
    create?: XOR<ManagerCheckinCreateWithoutManagerInput, ManagerCheckinUncheckedCreateWithoutManagerInput> | ManagerCheckinCreateWithoutManagerInput[] | ManagerCheckinUncheckedCreateWithoutManagerInput[]
    connectOrCreate?: ManagerCheckinCreateOrConnectWithoutManagerInput | ManagerCheckinCreateOrConnectWithoutManagerInput[]
    upsert?: ManagerCheckinUpsertWithWhereUniqueWithoutManagerInput | ManagerCheckinUpsertWithWhereUniqueWithoutManagerInput[]
    createMany?: ManagerCheckinCreateManyManagerInputEnvelope
    set?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    disconnect?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    delete?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    connect?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    update?: ManagerCheckinUpdateWithWhereUniqueWithoutManagerInput | ManagerCheckinUpdateWithWhereUniqueWithoutManagerInput[]
    updateMany?: ManagerCheckinUpdateManyWithWhereWithoutManagerInput | ManagerCheckinUpdateManyWithWhereWithoutManagerInput[]
    deleteMany?: ManagerCheckinScalarWhereInput | ManagerCheckinScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTokensInput = {
    create?: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTokensNestedInput = {
    create?: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    connectOrCreate?: UserCreateOrConnectWithoutTokensInput
    upsert?: UserUpsertWithoutTokensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTokensInput, UserUpdateWithoutTokensInput>, UserUncheckedUpdateWithoutTokensInput>
  }

  export type JourneyPlanCreateNestedManyWithoutOutletInput = {
    create?: XOR<JourneyPlanCreateWithoutOutletInput, JourneyPlanUncheckedCreateWithoutOutletInput> | JourneyPlanCreateWithoutOutletInput[] | JourneyPlanUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: JourneyPlanCreateOrConnectWithoutOutletInput | JourneyPlanCreateOrConnectWithoutOutletInput[]
    createMany?: JourneyPlanCreateManyOutletInputEnvelope
    connect?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
  }

  export type OrderCreateNestedManyWithoutOutletInput = {
    create?: XOR<OrderCreateWithoutOutletInput, OrderUncheckedCreateWithoutOutletInput> | OrderCreateWithoutOutletInput[] | OrderUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutOutletInput | OrderCreateOrConnectWithoutOutletInput[]
    createMany?: OrderCreateManyOutletInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutOutletInput = {
    create?: XOR<ProductCreateWithoutOutletInput, ProductUncheckedCreateWithoutOutletInput> | ProductCreateWithoutOutletInput[] | ProductUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutOutletInput | ProductCreateOrConnectWithoutOutletInput[]
    createMany?: ProductCreateManyOutletInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutOutletInput = {
    create?: XOR<ReportCreateWithoutOutletInput, ReportUncheckedCreateWithoutOutletInput> | ReportCreateWithoutOutletInput[] | ReportUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutOutletInput | ReportCreateOrConnectWithoutOutletInput[]
    createMany?: ReportCreateManyOutletInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ManagerCheckinCreateNestedManyWithoutOutletInput = {
    create?: XOR<ManagerCheckinCreateWithoutOutletInput, ManagerCheckinUncheckedCreateWithoutOutletInput> | ManagerCheckinCreateWithoutOutletInput[] | ManagerCheckinUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: ManagerCheckinCreateOrConnectWithoutOutletInput | ManagerCheckinCreateOrConnectWithoutOutletInput[]
    createMany?: ManagerCheckinCreateManyOutletInputEnvelope
    connect?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
  }

  export type JourneyPlanUncheckedCreateNestedManyWithoutOutletInput = {
    create?: XOR<JourneyPlanCreateWithoutOutletInput, JourneyPlanUncheckedCreateWithoutOutletInput> | JourneyPlanCreateWithoutOutletInput[] | JourneyPlanUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: JourneyPlanCreateOrConnectWithoutOutletInput | JourneyPlanCreateOrConnectWithoutOutletInput[]
    createMany?: JourneyPlanCreateManyOutletInputEnvelope
    connect?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
  }

  export type OrderUncheckedCreateNestedManyWithoutOutletInput = {
    create?: XOR<OrderCreateWithoutOutletInput, OrderUncheckedCreateWithoutOutletInput> | OrderCreateWithoutOutletInput[] | OrderUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutOutletInput | OrderCreateOrConnectWithoutOutletInput[]
    createMany?: OrderCreateManyOutletInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutOutletInput = {
    create?: XOR<ProductCreateWithoutOutletInput, ProductUncheckedCreateWithoutOutletInput> | ProductCreateWithoutOutletInput[] | ProductUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutOutletInput | ProductCreateOrConnectWithoutOutletInput[]
    createMany?: ProductCreateManyOutletInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutOutletInput = {
    create?: XOR<ReportCreateWithoutOutletInput, ReportUncheckedCreateWithoutOutletInput> | ReportCreateWithoutOutletInput[] | ReportUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutOutletInput | ReportCreateOrConnectWithoutOutletInput[]
    createMany?: ReportCreateManyOutletInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ManagerCheckinUncheckedCreateNestedManyWithoutOutletInput = {
    create?: XOR<ManagerCheckinCreateWithoutOutletInput, ManagerCheckinUncheckedCreateWithoutOutletInput> | ManagerCheckinCreateWithoutOutletInput[] | ManagerCheckinUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: ManagerCheckinCreateOrConnectWithoutOutletInput | ManagerCheckinCreateOrConnectWithoutOutletInput[]
    createMany?: ManagerCheckinCreateManyOutletInputEnvelope
    connect?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JourneyPlanUpdateManyWithoutOutletNestedInput = {
    create?: XOR<JourneyPlanCreateWithoutOutletInput, JourneyPlanUncheckedCreateWithoutOutletInput> | JourneyPlanCreateWithoutOutletInput[] | JourneyPlanUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: JourneyPlanCreateOrConnectWithoutOutletInput | JourneyPlanCreateOrConnectWithoutOutletInput[]
    upsert?: JourneyPlanUpsertWithWhereUniqueWithoutOutletInput | JourneyPlanUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: JourneyPlanCreateManyOutletInputEnvelope
    set?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    disconnect?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    delete?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    connect?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    update?: JourneyPlanUpdateWithWhereUniqueWithoutOutletInput | JourneyPlanUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: JourneyPlanUpdateManyWithWhereWithoutOutletInput | JourneyPlanUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: JourneyPlanScalarWhereInput | JourneyPlanScalarWhereInput[]
  }

  export type OrderUpdateManyWithoutOutletNestedInput = {
    create?: XOR<OrderCreateWithoutOutletInput, OrderUncheckedCreateWithoutOutletInput> | OrderCreateWithoutOutletInput[] | OrderUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutOutletInput | OrderCreateOrConnectWithoutOutletInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutOutletInput | OrderUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: OrderCreateManyOutletInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutOutletInput | OrderUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutOutletInput | OrderUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutOutletNestedInput = {
    create?: XOR<ProductCreateWithoutOutletInput, ProductUncheckedCreateWithoutOutletInput> | ProductCreateWithoutOutletInput[] | ProductUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutOutletInput | ProductCreateOrConnectWithoutOutletInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutOutletInput | ProductUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: ProductCreateManyOutletInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutOutletInput | ProductUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutOutletInput | ProductUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutOutletNestedInput = {
    create?: XOR<ReportCreateWithoutOutletInput, ReportUncheckedCreateWithoutOutletInput> | ReportCreateWithoutOutletInput[] | ReportUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutOutletInput | ReportCreateOrConnectWithoutOutletInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutOutletInput | ReportUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: ReportCreateManyOutletInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutOutletInput | ReportUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutOutletInput | ReportUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ManagerCheckinUpdateManyWithoutOutletNestedInput = {
    create?: XOR<ManagerCheckinCreateWithoutOutletInput, ManagerCheckinUncheckedCreateWithoutOutletInput> | ManagerCheckinCreateWithoutOutletInput[] | ManagerCheckinUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: ManagerCheckinCreateOrConnectWithoutOutletInput | ManagerCheckinCreateOrConnectWithoutOutletInput[]
    upsert?: ManagerCheckinUpsertWithWhereUniqueWithoutOutletInput | ManagerCheckinUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: ManagerCheckinCreateManyOutletInputEnvelope
    set?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    disconnect?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    delete?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    connect?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    update?: ManagerCheckinUpdateWithWhereUniqueWithoutOutletInput | ManagerCheckinUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: ManagerCheckinUpdateManyWithWhereWithoutOutletInput | ManagerCheckinUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: ManagerCheckinScalarWhereInput | ManagerCheckinScalarWhereInput[]
  }

  export type JourneyPlanUncheckedUpdateManyWithoutOutletNestedInput = {
    create?: XOR<JourneyPlanCreateWithoutOutletInput, JourneyPlanUncheckedCreateWithoutOutletInput> | JourneyPlanCreateWithoutOutletInput[] | JourneyPlanUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: JourneyPlanCreateOrConnectWithoutOutletInput | JourneyPlanCreateOrConnectWithoutOutletInput[]
    upsert?: JourneyPlanUpsertWithWhereUniqueWithoutOutletInput | JourneyPlanUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: JourneyPlanCreateManyOutletInputEnvelope
    set?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    disconnect?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    delete?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    connect?: JourneyPlanWhereUniqueInput | JourneyPlanWhereUniqueInput[]
    update?: JourneyPlanUpdateWithWhereUniqueWithoutOutletInput | JourneyPlanUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: JourneyPlanUpdateManyWithWhereWithoutOutletInput | JourneyPlanUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: JourneyPlanScalarWhereInput | JourneyPlanScalarWhereInput[]
  }

  export type OrderUncheckedUpdateManyWithoutOutletNestedInput = {
    create?: XOR<OrderCreateWithoutOutletInput, OrderUncheckedCreateWithoutOutletInput> | OrderCreateWithoutOutletInput[] | OrderUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutOutletInput | OrderCreateOrConnectWithoutOutletInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutOutletInput | OrderUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: OrderCreateManyOutletInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutOutletInput | OrderUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutOutletInput | OrderUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutOutletNestedInput = {
    create?: XOR<ProductCreateWithoutOutletInput, ProductUncheckedCreateWithoutOutletInput> | ProductCreateWithoutOutletInput[] | ProductUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutOutletInput | ProductCreateOrConnectWithoutOutletInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutOutletInput | ProductUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: ProductCreateManyOutletInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutOutletInput | ProductUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutOutletInput | ProductUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutOutletNestedInput = {
    create?: XOR<ReportCreateWithoutOutletInput, ReportUncheckedCreateWithoutOutletInput> | ReportCreateWithoutOutletInput[] | ReportUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutOutletInput | ReportCreateOrConnectWithoutOutletInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutOutletInput | ReportUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: ReportCreateManyOutletInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutOutletInput | ReportUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutOutletInput | ReportUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ManagerCheckinUncheckedUpdateManyWithoutOutletNestedInput = {
    create?: XOR<ManagerCheckinCreateWithoutOutletInput, ManagerCheckinUncheckedCreateWithoutOutletInput> | ManagerCheckinCreateWithoutOutletInput[] | ManagerCheckinUncheckedCreateWithoutOutletInput[]
    connectOrCreate?: ManagerCheckinCreateOrConnectWithoutOutletInput | ManagerCheckinCreateOrConnectWithoutOutletInput[]
    upsert?: ManagerCheckinUpsertWithWhereUniqueWithoutOutletInput | ManagerCheckinUpsertWithWhereUniqueWithoutOutletInput[]
    createMany?: ManagerCheckinCreateManyOutletInputEnvelope
    set?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    disconnect?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    delete?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    connect?: ManagerCheckinWhereUniqueInput | ManagerCheckinWhereUniqueInput[]
    update?: ManagerCheckinUpdateWithWhereUniqueWithoutOutletInput | ManagerCheckinUpdateWithWhereUniqueWithoutOutletInput[]
    updateMany?: ManagerCheckinUpdateManyWithWhereWithoutOutletInput | ManagerCheckinUpdateManyWithWhereWithoutOutletInput[]
    deleteMany?: ManagerCheckinScalarWhereInput | ManagerCheckinScalarWhereInput[]
  }

  export type ManagerCreateNestedOneWithoutCheckinsInput = {
    create?: XOR<ManagerCreateWithoutCheckinsInput, ManagerUncheckedCreateWithoutCheckinsInput>
    connectOrCreate?: ManagerCreateOrConnectWithoutCheckinsInput
    connect?: ManagerWhereUniqueInput
  }

  export type OutletCreateNestedOneWithoutCheckinsInput = {
    create?: XOR<OutletCreateWithoutCheckinsInput, OutletUncheckedCreateWithoutCheckinsInput>
    connectOrCreate?: OutletCreateOrConnectWithoutCheckinsInput
    connect?: OutletWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ManagerUpdateOneRequiredWithoutCheckinsNestedInput = {
    create?: XOR<ManagerCreateWithoutCheckinsInput, ManagerUncheckedCreateWithoutCheckinsInput>
    connectOrCreate?: ManagerCreateOrConnectWithoutCheckinsInput
    upsert?: ManagerUpsertWithoutCheckinsInput
    connect?: ManagerWhereUniqueInput
    update?: XOR<XOR<ManagerUpdateToOneWithWhereWithoutCheckinsInput, ManagerUpdateWithoutCheckinsInput>, ManagerUncheckedUpdateWithoutCheckinsInput>
  }

  export type OutletUpdateOneRequiredWithoutCheckinsNestedInput = {
    create?: XOR<OutletCreateWithoutCheckinsInput, OutletUncheckedCreateWithoutCheckinsInput>
    connectOrCreate?: OutletCreateOrConnectWithoutCheckinsInput
    upsert?: OutletUpsertWithoutCheckinsInput
    connect?: OutletWhereUniqueInput
    update?: XOR<XOR<OutletUpdateToOneWithWhereWithoutCheckinsInput, OutletUpdateWithoutCheckinsInput>, OutletUncheckedUpdateWithoutCheckinsInput>
  }

  export type OutletCreateNestedOneWithoutOrdersInput = {
    create?: XOR<OutletCreateWithoutOrdersInput, OutletUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: OutletCreateOrConnectWithoutOrdersInput
    connect?: OutletWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type OrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutOrderInput = {
    create?: XOR<ReportCreateWithoutOrderInput, ReportUncheckedCreateWithoutOrderInput> | ReportCreateWithoutOrderInput[] | ReportUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutOrderInput | ReportCreateOrConnectWithoutOrderInput[]
    createMany?: ReportCreateManyOrderInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type OrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<ReportCreateWithoutOrderInput, ReportUncheckedCreateWithoutOrderInput> | ReportCreateWithoutOrderInput[] | ReportUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutOrderInput | ReportCreateOrConnectWithoutOrderInput[]
    createMany?: ReportCreateManyOrderInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type OutletUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<OutletCreateWithoutOrdersInput, OutletUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: OutletCreateOrConnectWithoutOrdersInput
    upsert?: OutletUpsertWithoutOrdersInput
    connect?: OutletWhereUniqueInput
    update?: XOR<XOR<OutletUpdateToOneWithWhereWithoutOrdersInput, OutletUpdateWithoutOrdersInput>, OutletUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrdersInput, UserUpdateWithoutOrdersInput>, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type OrderItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutOrderNestedInput = {
    create?: XOR<ReportCreateWithoutOrderInput, ReportUncheckedCreateWithoutOrderInput> | ReportCreateWithoutOrderInput[] | ReportUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutOrderInput | ReportCreateOrConnectWithoutOrderInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutOrderInput | ReportUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: ReportCreateManyOrderInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutOrderInput | ReportUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutOrderInput | ReportUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput> | OrderItemCreateWithoutOrderInput[] | OrderItemUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutOrderInput | OrderItemCreateOrConnectWithoutOrderInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput | OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: OrderItemCreateManyOrderInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput | OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutOrderInput | OrderItemUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<ReportCreateWithoutOrderInput, ReportUncheckedCreateWithoutOrderInput> | ReportCreateWithoutOrderInput[] | ReportUncheckedCreateWithoutOrderInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutOrderInput | ReportCreateOrConnectWithoutOrderInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutOrderInput | ReportUpsertWithWhereUniqueWithoutOrderInput[]
    createMany?: ReportCreateManyOrderInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutOrderInput | ReportUpdateWithWhereUniqueWithoutOrderInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutOrderInput | ReportUpdateManyWithWhereWithoutOrderInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type OrderCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderItemsInput
    connect?: OrderWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutOrderItemInput = {
    create?: XOR<ProductCreateWithoutOrderItemInput, ProductUncheckedCreateWithoutOrderItemInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderItemInput
    connect?: ProductWhereUniqueInput
  }

  export type OrderUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutOrderItemsInput
    upsert?: OrderUpsertWithoutOrderItemsInput
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutOrderItemsInput, OrderUpdateWithoutOrderItemsInput>, OrderUncheckedUpdateWithoutOrderItemsInput>
  }

  export type ProductUpdateOneRequiredWithoutOrderItemNestedInput = {
    create?: XOR<ProductCreateWithoutOrderItemInput, ProductUncheckedCreateWithoutOrderItemInput>
    connectOrCreate?: ProductCreateOrConnectWithoutOrderItemInput
    upsert?: ProductUpsertWithoutOrderItemInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutOrderItemInput, ProductUpdateWithoutOrderItemInput>, ProductUncheckedUpdateWithoutOrderItemInput>
  }

  export type OutletCreateNestedOneWithoutJourneyPlansInput = {
    create?: XOR<OutletCreateWithoutJourneyPlansInput, OutletUncheckedCreateWithoutJourneyPlansInput>
    connectOrCreate?: OutletCreateOrConnectWithoutJourneyPlansInput
    connect?: OutletWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutJourneyPlansInput = {
    create?: XOR<UserCreateWithoutJourneyPlansInput, UserUncheckedCreateWithoutJourneyPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutJourneyPlansInput
    connect?: UserWhereUniqueInput
  }

  export type ReportCreateNestedManyWithoutJourneyPlanInput = {
    create?: XOR<ReportCreateWithoutJourneyPlanInput, ReportUncheckedCreateWithoutJourneyPlanInput> | ReportCreateWithoutJourneyPlanInput[] | ReportUncheckedCreateWithoutJourneyPlanInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutJourneyPlanInput | ReportCreateOrConnectWithoutJourneyPlanInput[]
    createMany?: ReportCreateManyJourneyPlanInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutJourneyPlanInput = {
    create?: XOR<ReportCreateWithoutJourneyPlanInput, ReportUncheckedCreateWithoutJourneyPlanInput> | ReportCreateWithoutJourneyPlanInput[] | ReportUncheckedCreateWithoutJourneyPlanInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutJourneyPlanInput | ReportCreateOrConnectWithoutJourneyPlanInput[]
    createMany?: ReportCreateManyJourneyPlanInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type OutletUpdateOneRequiredWithoutJourneyPlansNestedInput = {
    create?: XOR<OutletCreateWithoutJourneyPlansInput, OutletUncheckedCreateWithoutJourneyPlansInput>
    connectOrCreate?: OutletCreateOrConnectWithoutJourneyPlansInput
    upsert?: OutletUpsertWithoutJourneyPlansInput
    connect?: OutletWhereUniqueInput
    update?: XOR<XOR<OutletUpdateToOneWithWhereWithoutJourneyPlansInput, OutletUpdateWithoutJourneyPlansInput>, OutletUncheckedUpdateWithoutJourneyPlansInput>
  }

  export type UserUpdateOneWithoutJourneyPlansNestedInput = {
    create?: XOR<UserCreateWithoutJourneyPlansInput, UserUncheckedCreateWithoutJourneyPlansInput>
    connectOrCreate?: UserCreateOrConnectWithoutJourneyPlansInput
    upsert?: UserUpsertWithoutJourneyPlansInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutJourneyPlansInput, UserUpdateWithoutJourneyPlansInput>, UserUncheckedUpdateWithoutJourneyPlansInput>
  }

  export type ReportUpdateManyWithoutJourneyPlanNestedInput = {
    create?: XOR<ReportCreateWithoutJourneyPlanInput, ReportUncheckedCreateWithoutJourneyPlanInput> | ReportCreateWithoutJourneyPlanInput[] | ReportUncheckedCreateWithoutJourneyPlanInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutJourneyPlanInput | ReportCreateOrConnectWithoutJourneyPlanInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutJourneyPlanInput | ReportUpsertWithWhereUniqueWithoutJourneyPlanInput[]
    createMany?: ReportCreateManyJourneyPlanInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutJourneyPlanInput | ReportUpdateWithWhereUniqueWithoutJourneyPlanInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutJourneyPlanInput | ReportUpdateManyWithWhereWithoutJourneyPlanInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ReportUncheckedUpdateManyWithoutJourneyPlanNestedInput = {
    create?: XOR<ReportCreateWithoutJourneyPlanInput, ReportUncheckedCreateWithoutJourneyPlanInput> | ReportCreateWithoutJourneyPlanInput[] | ReportUncheckedCreateWithoutJourneyPlanInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutJourneyPlanInput | ReportCreateOrConnectWithoutJourneyPlanInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutJourneyPlanInput | ReportUpsertWithWhereUniqueWithoutJourneyPlanInput[]
    createMany?: ReportCreateManyJourneyPlanInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutJourneyPlanInput | ReportUpdateWithWhereUniqueWithoutJourneyPlanInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutJourneyPlanInput | ReportUpdateManyWithWhereWithoutJourneyPlanInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type FeedbackReportCreateNestedOneWithoutReportInput = {
    create?: XOR<FeedbackReportCreateWithoutReportInput, FeedbackReportUncheckedCreateWithoutReportInput>
    connectOrCreate?: FeedbackReportCreateOrConnectWithoutReportInput
    connect?: FeedbackReportWhereUniqueInput
  }

  export type ProductReportCreateNestedOneWithoutReportInput = {
    create?: XOR<ProductReportCreateWithoutReportInput, ProductReportUncheckedCreateWithoutReportInput>
    connectOrCreate?: ProductReportCreateOrConnectWithoutReportInput
    connect?: ProductReportWhereUniqueInput
  }

  export type JourneyPlanCreateNestedOneWithoutReportsInput = {
    create?: XOR<JourneyPlanCreateWithoutReportsInput, JourneyPlanUncheckedCreateWithoutReportsInput>
    connectOrCreate?: JourneyPlanCreateOrConnectWithoutReportsInput
    connect?: JourneyPlanWhereUniqueInput
  }

  export type OrderCreateNestedOneWithoutReportsInput = {
    create?: XOR<OrderCreateWithoutReportsInput, OrderUncheckedCreateWithoutReportsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutReportsInput
    connect?: OrderWhereUniqueInput
  }

  export type OutletCreateNestedOneWithoutReportsInput = {
    create?: XOR<OutletCreateWithoutReportsInput, OutletUncheckedCreateWithoutReportsInput>
    connectOrCreate?: OutletCreateOrConnectWithoutReportsInput
    connect?: OutletWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReportsInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    connect?: UserWhereUniqueInput
  }

  export type VisibilityReportCreateNestedOneWithoutReportInput = {
    create?: XOR<VisibilityReportCreateWithoutReportInput, VisibilityReportUncheckedCreateWithoutReportInput>
    connectOrCreate?: VisibilityReportCreateOrConnectWithoutReportInput
    connect?: VisibilityReportWhereUniqueInput
  }

  export type FeedbackReportUncheckedCreateNestedOneWithoutReportInput = {
    create?: XOR<FeedbackReportCreateWithoutReportInput, FeedbackReportUncheckedCreateWithoutReportInput>
    connectOrCreate?: FeedbackReportCreateOrConnectWithoutReportInput
    connect?: FeedbackReportWhereUniqueInput
  }

  export type ProductReportUncheckedCreateNestedOneWithoutReportInput = {
    create?: XOR<ProductReportCreateWithoutReportInput, ProductReportUncheckedCreateWithoutReportInput>
    connectOrCreate?: ProductReportCreateOrConnectWithoutReportInput
    connect?: ProductReportWhereUniqueInput
  }

  export type VisibilityReportUncheckedCreateNestedOneWithoutReportInput = {
    create?: XOR<VisibilityReportCreateWithoutReportInput, VisibilityReportUncheckedCreateWithoutReportInput>
    connectOrCreate?: VisibilityReportCreateOrConnectWithoutReportInput
    connect?: VisibilityReportWhereUniqueInput
  }

  export type EnumReportTypeFieldUpdateOperationsInput = {
    set?: $Enums.ReportType
  }

  export type FeedbackReportUpdateOneWithoutReportNestedInput = {
    create?: XOR<FeedbackReportCreateWithoutReportInput, FeedbackReportUncheckedCreateWithoutReportInput>
    connectOrCreate?: FeedbackReportCreateOrConnectWithoutReportInput
    upsert?: FeedbackReportUpsertWithoutReportInput
    disconnect?: FeedbackReportWhereInput | boolean
    delete?: FeedbackReportWhereInput | boolean
    connect?: FeedbackReportWhereUniqueInput
    update?: XOR<XOR<FeedbackReportUpdateToOneWithWhereWithoutReportInput, FeedbackReportUpdateWithoutReportInput>, FeedbackReportUncheckedUpdateWithoutReportInput>
  }

  export type ProductReportUpdateOneWithoutReportNestedInput = {
    create?: XOR<ProductReportCreateWithoutReportInput, ProductReportUncheckedCreateWithoutReportInput>
    connectOrCreate?: ProductReportCreateOrConnectWithoutReportInput
    upsert?: ProductReportUpsertWithoutReportInput
    disconnect?: ProductReportWhereInput | boolean
    delete?: ProductReportWhereInput | boolean
    connect?: ProductReportWhereUniqueInput
    update?: XOR<XOR<ProductReportUpdateToOneWithWhereWithoutReportInput, ProductReportUpdateWithoutReportInput>, ProductReportUncheckedUpdateWithoutReportInput>
  }

  export type JourneyPlanUpdateOneWithoutReportsNestedInput = {
    create?: XOR<JourneyPlanCreateWithoutReportsInput, JourneyPlanUncheckedCreateWithoutReportsInput>
    connectOrCreate?: JourneyPlanCreateOrConnectWithoutReportsInput
    upsert?: JourneyPlanUpsertWithoutReportsInput
    disconnect?: JourneyPlanWhereInput | boolean
    delete?: JourneyPlanWhereInput | boolean
    connect?: JourneyPlanWhereUniqueInput
    update?: XOR<XOR<JourneyPlanUpdateToOneWithWhereWithoutReportsInput, JourneyPlanUpdateWithoutReportsInput>, JourneyPlanUncheckedUpdateWithoutReportsInput>
  }

  export type OrderUpdateOneWithoutReportsNestedInput = {
    create?: XOR<OrderCreateWithoutReportsInput, OrderUncheckedCreateWithoutReportsInput>
    connectOrCreate?: OrderCreateOrConnectWithoutReportsInput
    upsert?: OrderUpsertWithoutReportsInput
    disconnect?: OrderWhereInput | boolean
    delete?: OrderWhereInput | boolean
    connect?: OrderWhereUniqueInput
    update?: XOR<XOR<OrderUpdateToOneWithWhereWithoutReportsInput, OrderUpdateWithoutReportsInput>, OrderUncheckedUpdateWithoutReportsInput>
  }

  export type OutletUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<OutletCreateWithoutReportsInput, OutletUncheckedCreateWithoutReportsInput>
    connectOrCreate?: OutletCreateOrConnectWithoutReportsInput
    upsert?: OutletUpsertWithoutReportsInput
    connect?: OutletWhereUniqueInput
    update?: XOR<XOR<OutletUpdateToOneWithWhereWithoutReportsInput, OutletUpdateWithoutReportsInput>, OutletUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    upsert?: UserUpsertWithoutReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportsInput, UserUpdateWithoutReportsInput>, UserUncheckedUpdateWithoutReportsInput>
  }

  export type VisibilityReportUpdateOneWithoutReportNestedInput = {
    create?: XOR<VisibilityReportCreateWithoutReportInput, VisibilityReportUncheckedCreateWithoutReportInput>
    connectOrCreate?: VisibilityReportCreateOrConnectWithoutReportInput
    upsert?: VisibilityReportUpsertWithoutReportInput
    disconnect?: VisibilityReportWhereInput | boolean
    delete?: VisibilityReportWhereInput | boolean
    connect?: VisibilityReportWhereUniqueInput
    update?: XOR<XOR<VisibilityReportUpdateToOneWithWhereWithoutReportInput, VisibilityReportUpdateWithoutReportInput>, VisibilityReportUncheckedUpdateWithoutReportInput>
  }

  export type FeedbackReportUncheckedUpdateOneWithoutReportNestedInput = {
    create?: XOR<FeedbackReportCreateWithoutReportInput, FeedbackReportUncheckedCreateWithoutReportInput>
    connectOrCreate?: FeedbackReportCreateOrConnectWithoutReportInput
    upsert?: FeedbackReportUpsertWithoutReportInput
    disconnect?: FeedbackReportWhereInput | boolean
    delete?: FeedbackReportWhereInput | boolean
    connect?: FeedbackReportWhereUniqueInput
    update?: XOR<XOR<FeedbackReportUpdateToOneWithWhereWithoutReportInput, FeedbackReportUpdateWithoutReportInput>, FeedbackReportUncheckedUpdateWithoutReportInput>
  }

  export type ProductReportUncheckedUpdateOneWithoutReportNestedInput = {
    create?: XOR<ProductReportCreateWithoutReportInput, ProductReportUncheckedCreateWithoutReportInput>
    connectOrCreate?: ProductReportCreateOrConnectWithoutReportInput
    upsert?: ProductReportUpsertWithoutReportInput
    disconnect?: ProductReportWhereInput | boolean
    delete?: ProductReportWhereInput | boolean
    connect?: ProductReportWhereUniqueInput
    update?: XOR<XOR<ProductReportUpdateToOneWithWhereWithoutReportInput, ProductReportUpdateWithoutReportInput>, ProductReportUncheckedUpdateWithoutReportInput>
  }

  export type VisibilityReportUncheckedUpdateOneWithoutReportNestedInput = {
    create?: XOR<VisibilityReportCreateWithoutReportInput, VisibilityReportUncheckedCreateWithoutReportInput>
    connectOrCreate?: VisibilityReportCreateOrConnectWithoutReportInput
    upsert?: VisibilityReportUpsertWithoutReportInput
    disconnect?: VisibilityReportWhereInput | boolean
    delete?: VisibilityReportWhereInput | boolean
    connect?: VisibilityReportWhereUniqueInput
    update?: XOR<XOR<VisibilityReportUpdateToOneWithWhereWithoutReportInput, VisibilityReportUpdateWithoutReportInput>, VisibilityReportUncheckedUpdateWithoutReportInput>
  }

  export type ReportCreateNestedOneWithoutFeedbackReportInput = {
    create?: XOR<ReportCreateWithoutFeedbackReportInput, ReportUncheckedCreateWithoutFeedbackReportInput>
    connectOrCreate?: ReportCreateOrConnectWithoutFeedbackReportInput
    connect?: ReportWhereUniqueInput
  }

  export type ReportUpdateOneRequiredWithoutFeedbackReportNestedInput = {
    create?: XOR<ReportCreateWithoutFeedbackReportInput, ReportUncheckedCreateWithoutFeedbackReportInput>
    connectOrCreate?: ReportCreateOrConnectWithoutFeedbackReportInput
    upsert?: ReportUpsertWithoutFeedbackReportInput
    connect?: ReportWhereUniqueInput
    update?: XOR<XOR<ReportUpdateToOneWithWhereWithoutFeedbackReportInput, ReportUpdateWithoutFeedbackReportInput>, ReportUncheckedUpdateWithoutFeedbackReportInput>
  }

  export type ReportCreateNestedOneWithoutProductReportInput = {
    create?: XOR<ReportCreateWithoutProductReportInput, ReportUncheckedCreateWithoutProductReportInput>
    connectOrCreate?: ReportCreateOrConnectWithoutProductReportInput
    connect?: ReportWhereUniqueInput
  }

  export type ReportUpdateOneRequiredWithoutProductReportNestedInput = {
    create?: XOR<ReportCreateWithoutProductReportInput, ReportUncheckedCreateWithoutProductReportInput>
    connectOrCreate?: ReportCreateOrConnectWithoutProductReportInput
    upsert?: ReportUpsertWithoutProductReportInput
    connect?: ReportWhereUniqueInput
    update?: XOR<XOR<ReportUpdateToOneWithWhereWithoutProductReportInput, ReportUpdateWithoutProductReportInput>, ReportUncheckedUpdateWithoutProductReportInput>
  }

  export type ReportCreateNestedOneWithoutVisibilityReportInput = {
    create?: XOR<ReportCreateWithoutVisibilityReportInput, ReportUncheckedCreateWithoutVisibilityReportInput>
    connectOrCreate?: ReportCreateOrConnectWithoutVisibilityReportInput
    connect?: ReportWhereUniqueInput
  }

  export type ReportUpdateOneRequiredWithoutVisibilityReportNestedInput = {
    create?: XOR<ReportCreateWithoutVisibilityReportInput, ReportUncheckedCreateWithoutVisibilityReportInput>
    connectOrCreate?: ReportCreateOrConnectWithoutVisibilityReportInput
    upsert?: ReportUpsertWithoutVisibilityReportInput
    connect?: ReportWhereUniqueInput
    update?: XOR<XOR<ReportUpdateToOneWithWhereWithoutVisibilityReportInput, ReportUpdateWithoutVisibilityReportInput>, ReportUncheckedUpdateWithoutVisibilityReportInput>
  }

  export type OrderItemCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type OutletCreateNestedOneWithoutProductsInput = {
    create?: XOR<OutletCreateWithoutProductsInput, OutletUncheckedCreateWithoutProductsInput>
    connectOrCreate?: OutletCreateOrConnectWithoutProductsInput
    connect?: OutletWhereUniqueInput
  }

  export type OrderItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrderItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type OutletUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<OutletCreateWithoutProductsInput, OutletUncheckedCreateWithoutProductsInput>
    connectOrCreate?: OutletCreateOrConnectWithoutProductsInput
    upsert?: OutletUpsertWithoutProductsInput
    connect?: OutletWhereUniqueInput
    update?: XOR<XOR<OutletUpdateToOneWithWhereWithoutProductsInput, OutletUpdateWithoutProductsInput>, OutletUncheckedUpdateWithoutProductsInput>
  }

  export type OrderItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput> | OrderItemCreateWithoutProductInput[] | OrderItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: OrderItemCreateOrConnectWithoutProductInput | OrderItemCreateOrConnectWithoutProductInput[]
    upsert?: OrderItemUpsertWithWhereUniqueWithoutProductInput | OrderItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: OrderItemCreateManyProductInputEnvelope
    set?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    disconnect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    delete?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    connect?: OrderItemWhereUniqueInput | OrderItemWhereUniqueInput[]
    update?: OrderItemUpdateWithWhereUniqueWithoutProductInput | OrderItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: OrderItemUpdateManyWithWhereWithoutProductInput | OrderItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLeavesInput = {
    create?: XOR<UserCreateWithoutLeavesInput, UserUncheckedCreateWithoutLeavesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLeavesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLeavesNestedInput = {
    create?: XOR<UserCreateWithoutLeavesInput, UserUncheckedCreateWithoutLeavesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLeavesInput
    upsert?: UserUpsertWithoutLeavesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLeavesInput, UserUpdateWithoutLeavesInput>, UserUncheckedUpdateWithoutLeavesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumReportTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportType | EnumReportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReportType[]
    notIn?: $Enums.ReportType[]
    not?: NestedEnumReportTypeFilter<$PrismaModel> | $Enums.ReportType
  }

  export type NestedEnumReportTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReportType | EnumReportTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ReportType[]
    notIn?: $Enums.ReportType[]
    not?: NestedEnumReportTypeWithAggregatesFilter<$PrismaModel> | $Enums.ReportType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReportTypeFilter<$PrismaModel>
    _max?: NestedEnumReportTypeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type JourneyPlanCreateWithoutUserInput = {
    date: Date | string
    time: string
    status?: number
    checkInTime?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    imageUrl?: string | null
    notes?: string | null
    checkoutLatitude?: number | null
    checkoutLongitude?: number | null
    checkoutTime?: Date | string | null
    outlet: OutletCreateNestedOneWithoutJourneyPlansInput
    reports?: ReportCreateNestedManyWithoutJourneyPlanInput
  }

  export type JourneyPlanUncheckedCreateWithoutUserInput = {
    id?: number
    date: Date | string
    time: string
    outletId: number
    status?: number
    checkInTime?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    imageUrl?: string | null
    notes?: string | null
    checkoutLatitude?: number | null
    checkoutLongitude?: number | null
    checkoutTime?: Date | string | null
    reports?: ReportUncheckedCreateNestedManyWithoutJourneyPlanInput
  }

  export type JourneyPlanCreateOrConnectWithoutUserInput = {
    where: JourneyPlanWhereUniqueInput
    create: XOR<JourneyPlanCreateWithoutUserInput, JourneyPlanUncheckedCreateWithoutUserInput>
  }

  export type JourneyPlanCreateManyUserInputEnvelope = {
    data: JourneyPlanCreateManyUserInput | JourneyPlanCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    outlet: OutletCreateNestedOneWithoutOrdersInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    reports?: ReportCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    outletId: number
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    reports?: ReportUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutUserInput = {
    createdAt?: Date | string
    type: $Enums.ReportType
    feedbackReport?: FeedbackReportCreateNestedOneWithoutReportInput
    productReport?: ProductReportCreateNestedOneWithoutReportInput
    journeyPlan?: JourneyPlanCreateNestedOneWithoutReportsInput
    order?: OrderCreateNestedOneWithoutReportsInput
    outlet: OutletCreateNestedOneWithoutReportsInput
    visibilityReport?: VisibilityReportCreateNestedOneWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutUserInput = {
    id?: number
    orderId?: number | null
    outletId: number
    createdAt?: Date | string
    journeyPlanId?: number | null
    type: $Enums.ReportType
    feedbackReport?: FeedbackReportUncheckedCreateNestedOneWithoutReportInput
    productReport?: ProductReportUncheckedCreateNestedOneWithoutReportInput
    visibilityReport?: VisibilityReportUncheckedCreateNestedOneWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutUserInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput>
  }

  export type ReportCreateManyUserInputEnvelope = {
    data: ReportCreateManyUserInput | ReportCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TokenCreateWithoutUserInput = {
    token: string
    createdAt?: Date | string
    expiresAt: Date | string
  }

  export type TokenUncheckedCreateWithoutUserInput = {
    id?: number
    token: string
    createdAt?: Date | string
    expiresAt: Date | string
  }

  export type TokenCreateOrConnectWithoutUserInput = {
    where: TokenWhereUniqueInput
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenCreateManyUserInputEnvelope = {
    data: TokenCreateManyUserInput | TokenCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LeaveCreateWithoutUserInput = {
    leaveType: string
    startDate: Date | string
    endDate: Date | string
    reason: string
    attachment?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaveUncheckedCreateWithoutUserInput = {
    id?: number
    leaveType: string
    startDate: Date | string
    endDate: Date | string
    reason: string
    attachment?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LeaveCreateOrConnectWithoutUserInput = {
    where: LeaveWhereUniqueInput
    create: XOR<LeaveCreateWithoutUserInput, LeaveUncheckedCreateWithoutUserInput>
  }

  export type LeaveCreateManyUserInputEnvelope = {
    data: LeaveCreateManyUserInput | LeaveCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ManagerCreateWithoutUserInput = {
    department?: string | null
    checkins?: ManagerCheckinCreateNestedManyWithoutManagerInput
  }

  export type ManagerUncheckedCreateWithoutUserInput = {
    id?: number
    department?: string | null
    checkins?: ManagerCheckinUncheckedCreateNestedManyWithoutManagerInput
  }

  export type ManagerCreateOrConnectWithoutUserInput = {
    where: ManagerWhereUniqueInput
    create: XOR<ManagerCreateWithoutUserInput, ManagerUncheckedCreateWithoutUserInput>
  }

  export type JourneyPlanUpsertWithWhereUniqueWithoutUserInput = {
    where: JourneyPlanWhereUniqueInput
    update: XOR<JourneyPlanUpdateWithoutUserInput, JourneyPlanUncheckedUpdateWithoutUserInput>
    create: XOR<JourneyPlanCreateWithoutUserInput, JourneyPlanUncheckedCreateWithoutUserInput>
  }

  export type JourneyPlanUpdateWithWhereUniqueWithoutUserInput = {
    where: JourneyPlanWhereUniqueInput
    data: XOR<JourneyPlanUpdateWithoutUserInput, JourneyPlanUncheckedUpdateWithoutUserInput>
  }

  export type JourneyPlanUpdateManyWithWhereWithoutUserInput = {
    where: JourneyPlanScalarWhereInput
    data: XOR<JourneyPlanUpdateManyMutationInput, JourneyPlanUncheckedUpdateManyWithoutUserInput>
  }

  export type JourneyPlanScalarWhereInput = {
    AND?: JourneyPlanScalarWhereInput | JourneyPlanScalarWhereInput[]
    OR?: JourneyPlanScalarWhereInput[]
    NOT?: JourneyPlanScalarWhereInput | JourneyPlanScalarWhereInput[]
    id?: IntFilter<"JourneyPlan"> | number
    date?: DateTimeFilter<"JourneyPlan"> | Date | string
    time?: StringFilter<"JourneyPlan"> | string
    userId?: IntNullableFilter<"JourneyPlan"> | number | null
    outletId?: IntFilter<"JourneyPlan"> | number
    status?: IntFilter<"JourneyPlan"> | number
    checkInTime?: DateTimeNullableFilter<"JourneyPlan"> | Date | string | null
    latitude?: FloatNullableFilter<"JourneyPlan"> | number | null
    longitude?: FloatNullableFilter<"JourneyPlan"> | number | null
    imageUrl?: StringNullableFilter<"JourneyPlan"> | string | null
    notes?: StringNullableFilter<"JourneyPlan"> | string | null
    checkoutLatitude?: FloatNullableFilter<"JourneyPlan"> | number | null
    checkoutLongitude?: FloatNullableFilter<"JourneyPlan"> | number | null
    checkoutTime?: DateTimeNullableFilter<"JourneyPlan"> | Date | string | null
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: IntFilter<"Order"> | number
    userId?: IntFilter<"Order"> | number
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    outletId?: IntFilter<"Order"> | number
  }

  export type ReportUpsertWithWhereUniqueWithoutUserInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutUserInput, ReportUncheckedUpdateWithoutUserInput>
    create: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutUserInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutUserInput, ReportUncheckedUpdateWithoutUserInput>
  }

  export type ReportUpdateManyWithWhereWithoutUserInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutUserInput>
  }

  export type ReportScalarWhereInput = {
    AND?: ReportScalarWhereInput | ReportScalarWhereInput[]
    OR?: ReportScalarWhereInput[]
    NOT?: ReportScalarWhereInput | ReportScalarWhereInput[]
    id?: IntFilter<"Report"> | number
    orderId?: IntNullableFilter<"Report"> | number | null
    outletId?: IntFilter<"Report"> | number
    createdAt?: DateTimeFilter<"Report"> | Date | string
    userId?: IntFilter<"Report"> | number
    journeyPlanId?: IntNullableFilter<"Report"> | number | null
    type?: EnumReportTypeFilter<"Report"> | $Enums.ReportType
  }

  export type TokenUpsertWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    update: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
    create: XOR<TokenCreateWithoutUserInput, TokenUncheckedCreateWithoutUserInput>
  }

  export type TokenUpdateWithWhereUniqueWithoutUserInput = {
    where: TokenWhereUniqueInput
    data: XOR<TokenUpdateWithoutUserInput, TokenUncheckedUpdateWithoutUserInput>
  }

  export type TokenUpdateManyWithWhereWithoutUserInput = {
    where: TokenScalarWhereInput
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyWithoutUserInput>
  }

  export type TokenScalarWhereInput = {
    AND?: TokenScalarWhereInput | TokenScalarWhereInput[]
    OR?: TokenScalarWhereInput[]
    NOT?: TokenScalarWhereInput | TokenScalarWhereInput[]
    id?: IntFilter<"Token"> | number
    token?: StringFilter<"Token"> | string
    userId?: IntFilter<"Token"> | number
    createdAt?: DateTimeFilter<"Token"> | Date | string
    expiresAt?: DateTimeFilter<"Token"> | Date | string
  }

  export type LeaveUpsertWithWhereUniqueWithoutUserInput = {
    where: LeaveWhereUniqueInput
    update: XOR<LeaveUpdateWithoutUserInput, LeaveUncheckedUpdateWithoutUserInput>
    create: XOR<LeaveCreateWithoutUserInput, LeaveUncheckedCreateWithoutUserInput>
  }

  export type LeaveUpdateWithWhereUniqueWithoutUserInput = {
    where: LeaveWhereUniqueInput
    data: XOR<LeaveUpdateWithoutUserInput, LeaveUncheckedUpdateWithoutUserInput>
  }

  export type LeaveUpdateManyWithWhereWithoutUserInput = {
    where: LeaveScalarWhereInput
    data: XOR<LeaveUpdateManyMutationInput, LeaveUncheckedUpdateManyWithoutUserInput>
  }

  export type LeaveScalarWhereInput = {
    AND?: LeaveScalarWhereInput | LeaveScalarWhereInput[]
    OR?: LeaveScalarWhereInput[]
    NOT?: LeaveScalarWhereInput | LeaveScalarWhereInput[]
    id?: IntFilter<"Leave"> | number
    userId?: IntFilter<"Leave"> | number
    leaveType?: StringFilter<"Leave"> | string
    startDate?: DateTimeFilter<"Leave"> | Date | string
    endDate?: DateTimeFilter<"Leave"> | Date | string
    reason?: StringFilter<"Leave"> | string
    attachment?: StringNullableFilter<"Leave"> | string | null
    status?: StringFilter<"Leave"> | string
    createdAt?: DateTimeFilter<"Leave"> | Date | string
    updatedAt?: DateTimeFilter<"Leave"> | Date | string
  }

  export type ManagerUpsertWithoutUserInput = {
    update: XOR<ManagerUpdateWithoutUserInput, ManagerUncheckedUpdateWithoutUserInput>
    create: XOR<ManagerCreateWithoutUserInput, ManagerUncheckedCreateWithoutUserInput>
    where?: ManagerWhereInput
  }

  export type ManagerUpdateToOneWithWhereWithoutUserInput = {
    where?: ManagerWhereInput
    data: XOR<ManagerUpdateWithoutUserInput, ManagerUncheckedUpdateWithoutUserInput>
  }

  export type ManagerUpdateWithoutUserInput = {
    department?: NullableStringFieldUpdateOperationsInput | string | null
    checkins?: ManagerCheckinUpdateManyWithoutManagerNestedInput
  }

  export type ManagerUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
    checkins?: ManagerCheckinUncheckedUpdateManyWithoutManagerNestedInput
  }

  export type UserCreateWithoutManagerInput = {
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photoUrl?: string | null
    journeyPlans?: JourneyPlanCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    tokens?: TokenCreateNestedManyWithoutUserInput
    leaves?: LeaveCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutManagerInput = {
    id?: number
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photoUrl?: string | null
    journeyPlans?: JourneyPlanUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutManagerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutManagerInput, UserUncheckedCreateWithoutManagerInput>
  }

  export type ManagerCheckinCreateWithoutManagerInput = {
    date: Date | string
    checkInAt?: Date | string | null
    checkOutAt?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    notes?: string | null
    outlet: OutletCreateNestedOneWithoutCheckinsInput
  }

  export type ManagerCheckinUncheckedCreateWithoutManagerInput = {
    id?: number
    outletId: number
    date: Date | string
    checkInAt?: Date | string | null
    checkOutAt?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    notes?: string | null
  }

  export type ManagerCheckinCreateOrConnectWithoutManagerInput = {
    where: ManagerCheckinWhereUniqueInput
    create: XOR<ManagerCheckinCreateWithoutManagerInput, ManagerCheckinUncheckedCreateWithoutManagerInput>
  }

  export type ManagerCheckinCreateManyManagerInputEnvelope = {
    data: ManagerCheckinCreateManyManagerInput | ManagerCheckinCreateManyManagerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutManagerInput = {
    update: XOR<UserUpdateWithoutManagerInput, UserUncheckedUpdateWithoutManagerInput>
    create: XOR<UserCreateWithoutManagerInput, UserUncheckedCreateWithoutManagerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutManagerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutManagerInput, UserUncheckedUpdateWithoutManagerInput>
  }

  export type UserUpdateWithoutManagerInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    tokens?: TokenUpdateManyWithoutUserNestedInput
    leaves?: LeaveUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutManagerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ManagerCheckinUpsertWithWhereUniqueWithoutManagerInput = {
    where: ManagerCheckinWhereUniqueInput
    update: XOR<ManagerCheckinUpdateWithoutManagerInput, ManagerCheckinUncheckedUpdateWithoutManagerInput>
    create: XOR<ManagerCheckinCreateWithoutManagerInput, ManagerCheckinUncheckedCreateWithoutManagerInput>
  }

  export type ManagerCheckinUpdateWithWhereUniqueWithoutManagerInput = {
    where: ManagerCheckinWhereUniqueInput
    data: XOR<ManagerCheckinUpdateWithoutManagerInput, ManagerCheckinUncheckedUpdateWithoutManagerInput>
  }

  export type ManagerCheckinUpdateManyWithWhereWithoutManagerInput = {
    where: ManagerCheckinScalarWhereInput
    data: XOR<ManagerCheckinUpdateManyMutationInput, ManagerCheckinUncheckedUpdateManyWithoutManagerInput>
  }

  export type ManagerCheckinScalarWhereInput = {
    AND?: ManagerCheckinScalarWhereInput | ManagerCheckinScalarWhereInput[]
    OR?: ManagerCheckinScalarWhereInput[]
    NOT?: ManagerCheckinScalarWhereInput | ManagerCheckinScalarWhereInput[]
    id?: IntFilter<"ManagerCheckin"> | number
    managerId?: IntFilter<"ManagerCheckin"> | number
    outletId?: IntFilter<"ManagerCheckin"> | number
    date?: DateTimeFilter<"ManagerCheckin"> | Date | string
    checkInAt?: DateTimeNullableFilter<"ManagerCheckin"> | Date | string | null
    checkOutAt?: DateTimeNullableFilter<"ManagerCheckin"> | Date | string | null
    latitude?: FloatNullableFilter<"ManagerCheckin"> | number | null
    longitude?: FloatNullableFilter<"ManagerCheckin"> | number | null
    notes?: StringNullableFilter<"ManagerCheckin"> | string | null
  }

  export type UserCreateWithoutTokensInput = {
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photoUrl?: string | null
    journeyPlans?: JourneyPlanCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    leaves?: LeaveCreateNestedManyWithoutUserInput
    Manager?: ManagerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTokensInput = {
    id?: number
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photoUrl?: string | null
    journeyPlans?: JourneyPlanUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutUserInput
    Manager?: ManagerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTokensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
  }

  export type UserUpsertWithoutTokensInput = {
    update: XOR<UserUpdateWithoutTokensInput, UserUncheckedUpdateWithoutTokensInput>
    create: XOR<UserCreateWithoutTokensInput, UserUncheckedCreateWithoutTokensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTokensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTokensInput, UserUncheckedUpdateWithoutTokensInput>
  }

  export type UserUpdateWithoutTokensInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    leaves?: LeaveUpdateManyWithoutUserNestedInput
    Manager?: ManagerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTokensInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutUserNestedInput
    Manager?: ManagerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type JourneyPlanCreateWithoutOutletInput = {
    date: Date | string
    time: string
    status?: number
    checkInTime?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    imageUrl?: string | null
    notes?: string | null
    checkoutLatitude?: number | null
    checkoutLongitude?: number | null
    checkoutTime?: Date | string | null
    user?: UserCreateNestedOneWithoutJourneyPlansInput
    reports?: ReportCreateNestedManyWithoutJourneyPlanInput
  }

  export type JourneyPlanUncheckedCreateWithoutOutletInput = {
    id?: number
    date: Date | string
    time: string
    userId?: number | null
    status?: number
    checkInTime?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    imageUrl?: string | null
    notes?: string | null
    checkoutLatitude?: number | null
    checkoutLongitude?: number | null
    checkoutTime?: Date | string | null
    reports?: ReportUncheckedCreateNestedManyWithoutJourneyPlanInput
  }

  export type JourneyPlanCreateOrConnectWithoutOutletInput = {
    where: JourneyPlanWhereUniqueInput
    create: XOR<JourneyPlanCreateWithoutOutletInput, JourneyPlanUncheckedCreateWithoutOutletInput>
  }

  export type JourneyPlanCreateManyOutletInputEnvelope = {
    data: JourneyPlanCreateManyOutletInput | JourneyPlanCreateManyOutletInput[]
    skipDuplicates?: boolean
  }

  export type OrderCreateWithoutOutletInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutOrdersInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
    reports?: ReportCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOutletInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
    reports?: ReportUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOutletInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOutletInput, OrderUncheckedCreateWithoutOutletInput>
  }

  export type OrderCreateManyOutletInputEnvelope = {
    data: OrderCreateManyOutletInput | OrderCreateManyOutletInput[]
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutOutletInput = {
    name: string
    description?: string | null
    price: number
    currentStock: number
    reorderPoint: number
    orderQuantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    OrderItem?: OrderItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutOutletInput = {
    id?: number
    name: string
    description?: string | null
    price: number
    currentStock: number
    reorderPoint: number
    orderQuantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    OrderItem?: OrderItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutOutletInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutOutletInput, ProductUncheckedCreateWithoutOutletInput>
  }

  export type ProductCreateManyOutletInputEnvelope = {
    data: ProductCreateManyOutletInput | ProductCreateManyOutletInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutOutletInput = {
    createdAt?: Date | string
    type: $Enums.ReportType
    feedbackReport?: FeedbackReportCreateNestedOneWithoutReportInput
    productReport?: ProductReportCreateNestedOneWithoutReportInput
    journeyPlan?: JourneyPlanCreateNestedOneWithoutReportsInput
    order?: OrderCreateNestedOneWithoutReportsInput
    user: UserCreateNestedOneWithoutReportsInput
    visibilityReport?: VisibilityReportCreateNestedOneWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutOutletInput = {
    id?: number
    orderId?: number | null
    createdAt?: Date | string
    userId: number
    journeyPlanId?: number | null
    type: $Enums.ReportType
    feedbackReport?: FeedbackReportUncheckedCreateNestedOneWithoutReportInput
    productReport?: ProductReportUncheckedCreateNestedOneWithoutReportInput
    visibilityReport?: VisibilityReportUncheckedCreateNestedOneWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutOutletInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutOutletInput, ReportUncheckedCreateWithoutOutletInput>
  }

  export type ReportCreateManyOutletInputEnvelope = {
    data: ReportCreateManyOutletInput | ReportCreateManyOutletInput[]
    skipDuplicates?: boolean
  }

  export type ManagerCheckinCreateWithoutOutletInput = {
    date: Date | string
    checkInAt?: Date | string | null
    checkOutAt?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    notes?: string | null
    manager: ManagerCreateNestedOneWithoutCheckinsInput
  }

  export type ManagerCheckinUncheckedCreateWithoutOutletInput = {
    id?: number
    managerId: number
    date: Date | string
    checkInAt?: Date | string | null
    checkOutAt?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    notes?: string | null
  }

  export type ManagerCheckinCreateOrConnectWithoutOutletInput = {
    where: ManagerCheckinWhereUniqueInput
    create: XOR<ManagerCheckinCreateWithoutOutletInput, ManagerCheckinUncheckedCreateWithoutOutletInput>
  }

  export type ManagerCheckinCreateManyOutletInputEnvelope = {
    data: ManagerCheckinCreateManyOutletInput | ManagerCheckinCreateManyOutletInput[]
    skipDuplicates?: boolean
  }

  export type JourneyPlanUpsertWithWhereUniqueWithoutOutletInput = {
    where: JourneyPlanWhereUniqueInput
    update: XOR<JourneyPlanUpdateWithoutOutletInput, JourneyPlanUncheckedUpdateWithoutOutletInput>
    create: XOR<JourneyPlanCreateWithoutOutletInput, JourneyPlanUncheckedCreateWithoutOutletInput>
  }

  export type JourneyPlanUpdateWithWhereUniqueWithoutOutletInput = {
    where: JourneyPlanWhereUniqueInput
    data: XOR<JourneyPlanUpdateWithoutOutletInput, JourneyPlanUncheckedUpdateWithoutOutletInput>
  }

  export type JourneyPlanUpdateManyWithWhereWithoutOutletInput = {
    where: JourneyPlanScalarWhereInput
    data: XOR<JourneyPlanUpdateManyMutationInput, JourneyPlanUncheckedUpdateManyWithoutOutletInput>
  }

  export type OrderUpsertWithWhereUniqueWithoutOutletInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutOutletInput, OrderUncheckedUpdateWithoutOutletInput>
    create: XOR<OrderCreateWithoutOutletInput, OrderUncheckedCreateWithoutOutletInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutOutletInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutOutletInput, OrderUncheckedUpdateWithoutOutletInput>
  }

  export type OrderUpdateManyWithWhereWithoutOutletInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutOutletInput>
  }

  export type ProductUpsertWithWhereUniqueWithoutOutletInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutOutletInput, ProductUncheckedUpdateWithoutOutletInput>
    create: XOR<ProductCreateWithoutOutletInput, ProductUncheckedCreateWithoutOutletInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutOutletInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutOutletInput, ProductUncheckedUpdateWithoutOutletInput>
  }

  export type ProductUpdateManyWithWhereWithoutOutletInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutOutletInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    price?: FloatFilter<"Product"> | number
    currentStock?: IntFilter<"Product"> | number
    reorderPoint?: IntFilter<"Product"> | number
    orderQuantity?: IntFilter<"Product"> | number
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    outletId?: IntFilter<"Product"> | number
    imageUrl?: StringNullableFilter<"Product"> | string | null
  }

  export type ReportUpsertWithWhereUniqueWithoutOutletInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutOutletInput, ReportUncheckedUpdateWithoutOutletInput>
    create: XOR<ReportCreateWithoutOutletInput, ReportUncheckedCreateWithoutOutletInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutOutletInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutOutletInput, ReportUncheckedUpdateWithoutOutletInput>
  }

  export type ReportUpdateManyWithWhereWithoutOutletInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutOutletInput>
  }

  export type ManagerCheckinUpsertWithWhereUniqueWithoutOutletInput = {
    where: ManagerCheckinWhereUniqueInput
    update: XOR<ManagerCheckinUpdateWithoutOutletInput, ManagerCheckinUncheckedUpdateWithoutOutletInput>
    create: XOR<ManagerCheckinCreateWithoutOutletInput, ManagerCheckinUncheckedCreateWithoutOutletInput>
  }

  export type ManagerCheckinUpdateWithWhereUniqueWithoutOutletInput = {
    where: ManagerCheckinWhereUniqueInput
    data: XOR<ManagerCheckinUpdateWithoutOutletInput, ManagerCheckinUncheckedUpdateWithoutOutletInput>
  }

  export type ManagerCheckinUpdateManyWithWhereWithoutOutletInput = {
    where: ManagerCheckinScalarWhereInput
    data: XOR<ManagerCheckinUpdateManyMutationInput, ManagerCheckinUncheckedUpdateManyWithoutOutletInput>
  }

  export type ManagerCreateWithoutCheckinsInput = {
    department?: string | null
    user: UserCreateNestedOneWithoutManagerInput
  }

  export type ManagerUncheckedCreateWithoutCheckinsInput = {
    id?: number
    userId: number
    department?: string | null
  }

  export type ManagerCreateOrConnectWithoutCheckinsInput = {
    where: ManagerWhereUniqueInput
    create: XOR<ManagerCreateWithoutCheckinsInput, ManagerUncheckedCreateWithoutCheckinsInput>
  }

  export type OutletCreateWithoutCheckinsInput = {
    name: string
    address: string
    latitude?: number | null
    longitude?: number | null
    balance?: string | null
    email?: string | null
    kraPin?: string | null
    phone?: string | null
    journeyPlans?: JourneyPlanCreateNestedManyWithoutOutletInput
    orders?: OrderCreateNestedManyWithoutOutletInput
    products?: ProductCreateNestedManyWithoutOutletInput
    reports?: ReportCreateNestedManyWithoutOutletInput
  }

  export type OutletUncheckedCreateWithoutCheckinsInput = {
    id?: number
    name: string
    address: string
    latitude?: number | null
    longitude?: number | null
    balance?: string | null
    email?: string | null
    kraPin?: string | null
    phone?: string | null
    journeyPlans?: JourneyPlanUncheckedCreateNestedManyWithoutOutletInput
    orders?: OrderUncheckedCreateNestedManyWithoutOutletInput
    products?: ProductUncheckedCreateNestedManyWithoutOutletInput
    reports?: ReportUncheckedCreateNestedManyWithoutOutletInput
  }

  export type OutletCreateOrConnectWithoutCheckinsInput = {
    where: OutletWhereUniqueInput
    create: XOR<OutletCreateWithoutCheckinsInput, OutletUncheckedCreateWithoutCheckinsInput>
  }

  export type ManagerUpsertWithoutCheckinsInput = {
    update: XOR<ManagerUpdateWithoutCheckinsInput, ManagerUncheckedUpdateWithoutCheckinsInput>
    create: XOR<ManagerCreateWithoutCheckinsInput, ManagerUncheckedCreateWithoutCheckinsInput>
    where?: ManagerWhereInput
  }

  export type ManagerUpdateToOneWithWhereWithoutCheckinsInput = {
    where?: ManagerWhereInput
    data: XOR<ManagerUpdateWithoutCheckinsInput, ManagerUncheckedUpdateWithoutCheckinsInput>
  }

  export type ManagerUpdateWithoutCheckinsInput = {
    department?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutManagerNestedInput
  }

  export type ManagerUncheckedUpdateWithoutCheckinsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    department?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OutletUpsertWithoutCheckinsInput = {
    update: XOR<OutletUpdateWithoutCheckinsInput, OutletUncheckedUpdateWithoutCheckinsInput>
    create: XOR<OutletCreateWithoutCheckinsInput, OutletUncheckedCreateWithoutCheckinsInput>
    where?: OutletWhereInput
  }

  export type OutletUpdateToOneWithWhereWithoutCheckinsInput = {
    where?: OutletWhereInput
    data: XOR<OutletUpdateWithoutCheckinsInput, OutletUncheckedUpdateWithoutCheckinsInput>
  }

  export type OutletUpdateWithoutCheckinsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUpdateManyWithoutOutletNestedInput
    orders?: OrderUpdateManyWithoutOutletNestedInput
    products?: ProductUpdateManyWithoutOutletNestedInput
    reports?: ReportUpdateManyWithoutOutletNestedInput
  }

  export type OutletUncheckedUpdateWithoutCheckinsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUncheckedUpdateManyWithoutOutletNestedInput
    orders?: OrderUncheckedUpdateManyWithoutOutletNestedInput
    products?: ProductUncheckedUpdateManyWithoutOutletNestedInput
    reports?: ReportUncheckedUpdateManyWithoutOutletNestedInput
  }

  export type OutletCreateWithoutOrdersInput = {
    name: string
    address: string
    latitude?: number | null
    longitude?: number | null
    balance?: string | null
    email?: string | null
    kraPin?: string | null
    phone?: string | null
    journeyPlans?: JourneyPlanCreateNestedManyWithoutOutletInput
    products?: ProductCreateNestedManyWithoutOutletInput
    reports?: ReportCreateNestedManyWithoutOutletInput
    checkins?: ManagerCheckinCreateNestedManyWithoutOutletInput
  }

  export type OutletUncheckedCreateWithoutOrdersInput = {
    id?: number
    name: string
    address: string
    latitude?: number | null
    longitude?: number | null
    balance?: string | null
    email?: string | null
    kraPin?: string | null
    phone?: string | null
    journeyPlans?: JourneyPlanUncheckedCreateNestedManyWithoutOutletInput
    products?: ProductUncheckedCreateNestedManyWithoutOutletInput
    reports?: ReportUncheckedCreateNestedManyWithoutOutletInput
    checkins?: ManagerCheckinUncheckedCreateNestedManyWithoutOutletInput
  }

  export type OutletCreateOrConnectWithoutOrdersInput = {
    where: OutletWhereUniqueInput
    create: XOR<OutletCreateWithoutOrdersInput, OutletUncheckedCreateWithoutOrdersInput>
  }

  export type UserCreateWithoutOrdersInput = {
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photoUrl?: string | null
    journeyPlans?: JourneyPlanCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    tokens?: TokenCreateNestedManyWithoutUserInput
    leaves?: LeaveCreateNestedManyWithoutUserInput
    Manager?: ManagerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: number
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photoUrl?: string | null
    journeyPlans?: JourneyPlanUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutUserInput
    Manager?: ManagerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type OrderItemCreateWithoutOrderInput = {
    quantity: number
    product: ProductCreateNestedOneWithoutOrderItemInput
  }

  export type OrderItemUncheckedCreateWithoutOrderInput = {
    id?: number
    productId: number
    quantity: number
  }

  export type OrderItemCreateOrConnectWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemCreateManyOrderInputEnvelope = {
    data: OrderItemCreateManyOrderInput | OrderItemCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutOrderInput = {
    createdAt?: Date | string
    type: $Enums.ReportType
    feedbackReport?: FeedbackReportCreateNestedOneWithoutReportInput
    productReport?: ProductReportCreateNestedOneWithoutReportInput
    journeyPlan?: JourneyPlanCreateNestedOneWithoutReportsInput
    outlet: OutletCreateNestedOneWithoutReportsInput
    user: UserCreateNestedOneWithoutReportsInput
    visibilityReport?: VisibilityReportCreateNestedOneWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutOrderInput = {
    id?: number
    outletId: number
    createdAt?: Date | string
    userId: number
    journeyPlanId?: number | null
    type: $Enums.ReportType
    feedbackReport?: FeedbackReportUncheckedCreateNestedOneWithoutReportInput
    productReport?: ProductReportUncheckedCreateNestedOneWithoutReportInput
    visibilityReport?: VisibilityReportUncheckedCreateNestedOneWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutOrderInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutOrderInput, ReportUncheckedCreateWithoutOrderInput>
  }

  export type ReportCreateManyOrderInputEnvelope = {
    data: ReportCreateManyOrderInput | ReportCreateManyOrderInput[]
    skipDuplicates?: boolean
  }

  export type OutletUpsertWithoutOrdersInput = {
    update: XOR<OutletUpdateWithoutOrdersInput, OutletUncheckedUpdateWithoutOrdersInput>
    create: XOR<OutletCreateWithoutOrdersInput, OutletUncheckedCreateWithoutOrdersInput>
    where?: OutletWhereInput
  }

  export type OutletUpdateToOneWithWhereWithoutOrdersInput = {
    where?: OutletWhereInput
    data: XOR<OutletUpdateWithoutOrdersInput, OutletUncheckedUpdateWithoutOrdersInput>
  }

  export type OutletUpdateWithoutOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUpdateManyWithoutOutletNestedInput
    products?: ProductUpdateManyWithoutOutletNestedInput
    reports?: ReportUpdateManyWithoutOutletNestedInput
    checkins?: ManagerCheckinUpdateManyWithoutOutletNestedInput
  }

  export type OutletUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUncheckedUpdateManyWithoutOutletNestedInput
    products?: ProductUncheckedUpdateManyWithoutOutletNestedInput
    reports?: ReportUncheckedUpdateManyWithoutOutletNestedInput
    checkins?: ManagerCheckinUncheckedUpdateManyWithoutOutletNestedInput
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    tokens?: TokenUpdateManyWithoutUserNestedInput
    leaves?: LeaveUpdateManyWithoutUserNestedInput
    Manager?: ManagerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutUserNestedInput
    Manager?: ManagerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type OrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<OrderItemCreateWithoutOrderInput, OrderItemUncheckedCreateWithoutOrderInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutOrderInput, OrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderItemScalarWhereInput = {
    AND?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    OR?: OrderItemScalarWhereInput[]
    NOT?: OrderItemScalarWhereInput | OrderItemScalarWhereInput[]
    id?: IntFilter<"OrderItem"> | number
    orderId?: IntFilter<"OrderItem"> | number
    productId?: IntFilter<"OrderItem"> | number
    quantity?: IntFilter<"OrderItem"> | number
  }

  export type ReportUpsertWithWhereUniqueWithoutOrderInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutOrderInput, ReportUncheckedUpdateWithoutOrderInput>
    create: XOR<ReportCreateWithoutOrderInput, ReportUncheckedCreateWithoutOrderInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutOrderInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutOrderInput, ReportUncheckedUpdateWithoutOrderInput>
  }

  export type ReportUpdateManyWithWhereWithoutOrderInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutOrderInput>
  }

  export type OrderCreateWithoutOrderItemsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    outlet: OutletCreateNestedOneWithoutOrdersInput
    user: UserCreateNestedOneWithoutOrdersInput
    reports?: ReportCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutOrderItemsInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    outletId: number
    reports?: ReportUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutOrderItemsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
  }

  export type ProductCreateWithoutOrderItemInput = {
    name: string
    description?: string | null
    price: number
    currentStock: number
    reorderPoint: number
    orderQuantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
    outlet: OutletCreateNestedOneWithoutProductsInput
  }

  export type ProductUncheckedCreateWithoutOrderItemInput = {
    id?: number
    name: string
    description?: string | null
    price: number
    currentStock: number
    reorderPoint: number
    orderQuantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    outletId: number
    imageUrl?: string | null
  }

  export type ProductCreateOrConnectWithoutOrderItemInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutOrderItemInput, ProductUncheckedCreateWithoutOrderItemInput>
  }

  export type OrderUpsertWithoutOrderItemsInput = {
    update: XOR<OrderUpdateWithoutOrderItemsInput, OrderUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<OrderCreateWithoutOrderItemsInput, OrderUncheckedCreateWithoutOrderItemsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutOrderItemsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutOrderItemsInput, OrderUncheckedUpdateWithoutOrderItemsInput>
  }

  export type OrderUpdateWithoutOrderItemsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    outlet?: OutletUpdateOneRequiredWithoutOrdersNestedInput
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    reports?: ReportUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOrderItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    outletId?: IntFieldUpdateOperationsInput | number
    reports?: ReportUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type ProductUpsertWithoutOrderItemInput = {
    update: XOR<ProductUpdateWithoutOrderItemInput, ProductUncheckedUpdateWithoutOrderItemInput>
    create: XOR<ProductCreateWithoutOrderItemInput, ProductUncheckedCreateWithoutOrderItemInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutOrderItemInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutOrderItemInput, ProductUncheckedUpdateWithoutOrderItemInput>
  }

  export type ProductUpdateWithoutOrderItemInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    orderQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    outlet?: OutletUpdateOneRequiredWithoutProductsNestedInput
  }

  export type ProductUncheckedUpdateWithoutOrderItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    orderQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    outletId?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OutletCreateWithoutJourneyPlansInput = {
    name: string
    address: string
    latitude?: number | null
    longitude?: number | null
    balance?: string | null
    email?: string | null
    kraPin?: string | null
    phone?: string | null
    orders?: OrderCreateNestedManyWithoutOutletInput
    products?: ProductCreateNestedManyWithoutOutletInput
    reports?: ReportCreateNestedManyWithoutOutletInput
    checkins?: ManagerCheckinCreateNestedManyWithoutOutletInput
  }

  export type OutletUncheckedCreateWithoutJourneyPlansInput = {
    id?: number
    name: string
    address: string
    latitude?: number | null
    longitude?: number | null
    balance?: string | null
    email?: string | null
    kraPin?: string | null
    phone?: string | null
    orders?: OrderUncheckedCreateNestedManyWithoutOutletInput
    products?: ProductUncheckedCreateNestedManyWithoutOutletInput
    reports?: ReportUncheckedCreateNestedManyWithoutOutletInput
    checkins?: ManagerCheckinUncheckedCreateNestedManyWithoutOutletInput
  }

  export type OutletCreateOrConnectWithoutJourneyPlansInput = {
    where: OutletWhereUniqueInput
    create: XOR<OutletCreateWithoutJourneyPlansInput, OutletUncheckedCreateWithoutJourneyPlansInput>
  }

  export type UserCreateWithoutJourneyPlansInput = {
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photoUrl?: string | null
    orders?: OrderCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    tokens?: TokenCreateNestedManyWithoutUserInput
    leaves?: LeaveCreateNestedManyWithoutUserInput
    Manager?: ManagerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutJourneyPlansInput = {
    id?: number
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photoUrl?: string | null
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutUserInput
    Manager?: ManagerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutJourneyPlansInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutJourneyPlansInput, UserUncheckedCreateWithoutJourneyPlansInput>
  }

  export type ReportCreateWithoutJourneyPlanInput = {
    createdAt?: Date | string
    type: $Enums.ReportType
    feedbackReport?: FeedbackReportCreateNestedOneWithoutReportInput
    productReport?: ProductReportCreateNestedOneWithoutReportInput
    order?: OrderCreateNestedOneWithoutReportsInput
    outlet: OutletCreateNestedOneWithoutReportsInput
    user: UserCreateNestedOneWithoutReportsInput
    visibilityReport?: VisibilityReportCreateNestedOneWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutJourneyPlanInput = {
    id?: number
    orderId?: number | null
    outletId: number
    createdAt?: Date | string
    userId: number
    type: $Enums.ReportType
    feedbackReport?: FeedbackReportUncheckedCreateNestedOneWithoutReportInput
    productReport?: ProductReportUncheckedCreateNestedOneWithoutReportInput
    visibilityReport?: VisibilityReportUncheckedCreateNestedOneWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutJourneyPlanInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutJourneyPlanInput, ReportUncheckedCreateWithoutJourneyPlanInput>
  }

  export type ReportCreateManyJourneyPlanInputEnvelope = {
    data: ReportCreateManyJourneyPlanInput | ReportCreateManyJourneyPlanInput[]
    skipDuplicates?: boolean
  }

  export type OutletUpsertWithoutJourneyPlansInput = {
    update: XOR<OutletUpdateWithoutJourneyPlansInput, OutletUncheckedUpdateWithoutJourneyPlansInput>
    create: XOR<OutletCreateWithoutJourneyPlansInput, OutletUncheckedCreateWithoutJourneyPlansInput>
    where?: OutletWhereInput
  }

  export type OutletUpdateToOneWithWhereWithoutJourneyPlansInput = {
    where?: OutletWhereInput
    data: XOR<OutletUpdateWithoutJourneyPlansInput, OutletUncheckedUpdateWithoutJourneyPlansInput>
  }

  export type OutletUpdateWithoutJourneyPlansInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUpdateManyWithoutOutletNestedInput
    products?: ProductUpdateManyWithoutOutletNestedInput
    reports?: ReportUpdateManyWithoutOutletNestedInput
    checkins?: ManagerCheckinUpdateManyWithoutOutletNestedInput
  }

  export type OutletUncheckedUpdateWithoutJourneyPlansInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUncheckedUpdateManyWithoutOutletNestedInput
    products?: ProductUncheckedUpdateManyWithoutOutletNestedInput
    reports?: ReportUncheckedUpdateManyWithoutOutletNestedInput
    checkins?: ManagerCheckinUncheckedUpdateManyWithoutOutletNestedInput
  }

  export type UserUpsertWithoutJourneyPlansInput = {
    update: XOR<UserUpdateWithoutJourneyPlansInput, UserUncheckedUpdateWithoutJourneyPlansInput>
    create: XOR<UserCreateWithoutJourneyPlansInput, UserUncheckedCreateWithoutJourneyPlansInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutJourneyPlansInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutJourneyPlansInput, UserUncheckedUpdateWithoutJourneyPlansInput>
  }

  export type UserUpdateWithoutJourneyPlansInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    tokens?: TokenUpdateManyWithoutUserNestedInput
    leaves?: LeaveUpdateManyWithoutUserNestedInput
    Manager?: ManagerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutJourneyPlansInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutUserNestedInput
    Manager?: ManagerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ReportUpsertWithWhereUniqueWithoutJourneyPlanInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutJourneyPlanInput, ReportUncheckedUpdateWithoutJourneyPlanInput>
    create: XOR<ReportCreateWithoutJourneyPlanInput, ReportUncheckedCreateWithoutJourneyPlanInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutJourneyPlanInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutJourneyPlanInput, ReportUncheckedUpdateWithoutJourneyPlanInput>
  }

  export type ReportUpdateManyWithWhereWithoutJourneyPlanInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutJourneyPlanInput>
  }

  export type FeedbackReportCreateWithoutReportInput = {
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackReportUncheckedCreateWithoutReportInput = {
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackReportCreateOrConnectWithoutReportInput = {
    where: FeedbackReportWhereUniqueInput
    create: XOR<FeedbackReportCreateWithoutReportInput, FeedbackReportUncheckedCreateWithoutReportInput>
  }

  export type ProductReportCreateWithoutReportInput = {
    productName?: string | null
    quantity?: number | null
    comment?: string | null
    createdAt?: Date | string
  }

  export type ProductReportUncheckedCreateWithoutReportInput = {
    productName?: string | null
    quantity?: number | null
    comment?: string | null
    createdAt?: Date | string
  }

  export type ProductReportCreateOrConnectWithoutReportInput = {
    where: ProductReportWhereUniqueInput
    create: XOR<ProductReportCreateWithoutReportInput, ProductReportUncheckedCreateWithoutReportInput>
  }

  export type JourneyPlanCreateWithoutReportsInput = {
    date: Date | string
    time: string
    status?: number
    checkInTime?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    imageUrl?: string | null
    notes?: string | null
    checkoutLatitude?: number | null
    checkoutLongitude?: number | null
    checkoutTime?: Date | string | null
    outlet: OutletCreateNestedOneWithoutJourneyPlansInput
    user?: UserCreateNestedOneWithoutJourneyPlansInput
  }

  export type JourneyPlanUncheckedCreateWithoutReportsInput = {
    id?: number
    date: Date | string
    time: string
    userId?: number | null
    outletId: number
    status?: number
    checkInTime?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    imageUrl?: string | null
    notes?: string | null
    checkoutLatitude?: number | null
    checkoutLongitude?: number | null
    checkoutTime?: Date | string | null
  }

  export type JourneyPlanCreateOrConnectWithoutReportsInput = {
    where: JourneyPlanWhereUniqueInput
    create: XOR<JourneyPlanCreateWithoutReportsInput, JourneyPlanUncheckedCreateWithoutReportsInput>
  }

  export type OrderCreateWithoutReportsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    outlet: OutletCreateNestedOneWithoutOrdersInput
    user: UserCreateNestedOneWithoutOrdersInput
    orderItems?: OrderItemCreateNestedManyWithoutOrderInput
  }

  export type OrderUncheckedCreateWithoutReportsInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    outletId: number
    orderItems?: OrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type OrderCreateOrConnectWithoutReportsInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutReportsInput, OrderUncheckedCreateWithoutReportsInput>
  }

  export type OutletCreateWithoutReportsInput = {
    name: string
    address: string
    latitude?: number | null
    longitude?: number | null
    balance?: string | null
    email?: string | null
    kraPin?: string | null
    phone?: string | null
    journeyPlans?: JourneyPlanCreateNestedManyWithoutOutletInput
    orders?: OrderCreateNestedManyWithoutOutletInput
    products?: ProductCreateNestedManyWithoutOutletInput
    checkins?: ManagerCheckinCreateNestedManyWithoutOutletInput
  }

  export type OutletUncheckedCreateWithoutReportsInput = {
    id?: number
    name: string
    address: string
    latitude?: number | null
    longitude?: number | null
    balance?: string | null
    email?: string | null
    kraPin?: string | null
    phone?: string | null
    journeyPlans?: JourneyPlanUncheckedCreateNestedManyWithoutOutletInput
    orders?: OrderUncheckedCreateNestedManyWithoutOutletInput
    products?: ProductUncheckedCreateNestedManyWithoutOutletInput
    checkins?: ManagerCheckinUncheckedCreateNestedManyWithoutOutletInput
  }

  export type OutletCreateOrConnectWithoutReportsInput = {
    where: OutletWhereUniqueInput
    create: XOR<OutletCreateWithoutReportsInput, OutletUncheckedCreateWithoutReportsInput>
  }

  export type UserCreateWithoutReportsInput = {
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photoUrl?: string | null
    journeyPlans?: JourneyPlanCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    tokens?: TokenCreateNestedManyWithoutUserInput
    leaves?: LeaveCreateNestedManyWithoutUserInput
    Manager?: ManagerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReportsInput = {
    id?: number
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photoUrl?: string | null
    journeyPlans?: JourneyPlanUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    leaves?: LeaveUncheckedCreateNestedManyWithoutUserInput
    Manager?: ManagerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
  }

  export type VisibilityReportCreateWithoutReportInput = {
    comment?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
  }

  export type VisibilityReportUncheckedCreateWithoutReportInput = {
    comment?: string | null
    imageUrl?: string | null
    createdAt?: Date | string
  }

  export type VisibilityReportCreateOrConnectWithoutReportInput = {
    where: VisibilityReportWhereUniqueInput
    create: XOR<VisibilityReportCreateWithoutReportInput, VisibilityReportUncheckedCreateWithoutReportInput>
  }

  export type FeedbackReportUpsertWithoutReportInput = {
    update: XOR<FeedbackReportUpdateWithoutReportInput, FeedbackReportUncheckedUpdateWithoutReportInput>
    create: XOR<FeedbackReportCreateWithoutReportInput, FeedbackReportUncheckedCreateWithoutReportInput>
    where?: FeedbackReportWhereInput
  }

  export type FeedbackReportUpdateToOneWithWhereWithoutReportInput = {
    where?: FeedbackReportWhereInput
    data: XOR<FeedbackReportUpdateWithoutReportInput, FeedbackReportUncheckedUpdateWithoutReportInput>
  }

  export type FeedbackReportUpdateWithoutReportInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackReportUncheckedUpdateWithoutReportInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductReportUpsertWithoutReportInput = {
    update: XOR<ProductReportUpdateWithoutReportInput, ProductReportUncheckedUpdateWithoutReportInput>
    create: XOR<ProductReportCreateWithoutReportInput, ProductReportUncheckedCreateWithoutReportInput>
    where?: ProductReportWhereInput
  }

  export type ProductReportUpdateToOneWithWhereWithoutReportInput = {
    where?: ProductReportWhereInput
    data: XOR<ProductReportUpdateWithoutReportInput, ProductReportUncheckedUpdateWithoutReportInput>
  }

  export type ProductReportUpdateWithoutReportInput = {
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductReportUncheckedUpdateWithoutReportInput = {
    productName?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JourneyPlanUpsertWithoutReportsInput = {
    update: XOR<JourneyPlanUpdateWithoutReportsInput, JourneyPlanUncheckedUpdateWithoutReportsInput>
    create: XOR<JourneyPlanCreateWithoutReportsInput, JourneyPlanUncheckedCreateWithoutReportsInput>
    where?: JourneyPlanWhereInput
  }

  export type JourneyPlanUpdateToOneWithWhereWithoutReportsInput = {
    where?: JourneyPlanWhereInput
    data: XOR<JourneyPlanUpdateWithoutReportsInput, JourneyPlanUncheckedUpdateWithoutReportsInput>
  }

  export type JourneyPlanUpdateWithoutReportsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    outlet?: OutletUpdateOneRequiredWithoutJourneyPlansNestedInput
    user?: UserUpdateOneWithoutJourneyPlansNestedInput
  }

  export type JourneyPlanUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    outletId?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderUpsertWithoutReportsInput = {
    update: XOR<OrderUpdateWithoutReportsInput, OrderUncheckedUpdateWithoutReportsInput>
    create: XOR<OrderCreateWithoutReportsInput, OrderUncheckedCreateWithoutReportsInput>
    where?: OrderWhereInput
  }

  export type OrderUpdateToOneWithWhereWithoutReportsInput = {
    where?: OrderWhereInput
    data: XOR<OrderUpdateWithoutReportsInput, OrderUncheckedUpdateWithoutReportsInput>
  }

  export type OrderUpdateWithoutReportsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    outlet?: OutletUpdateOneRequiredWithoutOrdersNestedInput
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    outletId?: IntFieldUpdateOperationsInput | number
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OutletUpsertWithoutReportsInput = {
    update: XOR<OutletUpdateWithoutReportsInput, OutletUncheckedUpdateWithoutReportsInput>
    create: XOR<OutletCreateWithoutReportsInput, OutletUncheckedCreateWithoutReportsInput>
    where?: OutletWhereInput
  }

  export type OutletUpdateToOneWithWhereWithoutReportsInput = {
    where?: OutletWhereInput
    data: XOR<OutletUpdateWithoutReportsInput, OutletUncheckedUpdateWithoutReportsInput>
  }

  export type OutletUpdateWithoutReportsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUpdateManyWithoutOutletNestedInput
    orders?: OrderUpdateManyWithoutOutletNestedInput
    products?: ProductUpdateManyWithoutOutletNestedInput
    checkins?: ManagerCheckinUpdateManyWithoutOutletNestedInput
  }

  export type OutletUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUncheckedUpdateManyWithoutOutletNestedInput
    orders?: OrderUncheckedUpdateManyWithoutOutletNestedInput
    products?: ProductUncheckedUpdateManyWithoutOutletNestedInput
    checkins?: ManagerCheckinUncheckedUpdateManyWithoutOutletNestedInput
  }

  export type UserUpsertWithoutReportsInput = {
    update: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateWithoutReportsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    tokens?: TokenUpdateManyWithoutUserNestedInput
    leaves?: LeaveUpdateManyWithoutUserNestedInput
    Manager?: ManagerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    leaves?: LeaveUncheckedUpdateManyWithoutUserNestedInput
    Manager?: ManagerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type VisibilityReportUpsertWithoutReportInput = {
    update: XOR<VisibilityReportUpdateWithoutReportInput, VisibilityReportUncheckedUpdateWithoutReportInput>
    create: XOR<VisibilityReportCreateWithoutReportInput, VisibilityReportUncheckedCreateWithoutReportInput>
    where?: VisibilityReportWhereInput
  }

  export type VisibilityReportUpdateToOneWithWhereWithoutReportInput = {
    where?: VisibilityReportWhereInput
    data: XOR<VisibilityReportUpdateWithoutReportInput, VisibilityReportUncheckedUpdateWithoutReportInput>
  }

  export type VisibilityReportUpdateWithoutReportInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VisibilityReportUncheckedUpdateWithoutReportInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCreateWithoutFeedbackReportInput = {
    createdAt?: Date | string
    type: $Enums.ReportType
    productReport?: ProductReportCreateNestedOneWithoutReportInput
    journeyPlan?: JourneyPlanCreateNestedOneWithoutReportsInput
    order?: OrderCreateNestedOneWithoutReportsInput
    outlet: OutletCreateNestedOneWithoutReportsInput
    user: UserCreateNestedOneWithoutReportsInput
    visibilityReport?: VisibilityReportCreateNestedOneWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutFeedbackReportInput = {
    id?: number
    orderId?: number | null
    outletId: number
    createdAt?: Date | string
    userId: number
    journeyPlanId?: number | null
    type: $Enums.ReportType
    productReport?: ProductReportUncheckedCreateNestedOneWithoutReportInput
    visibilityReport?: VisibilityReportUncheckedCreateNestedOneWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutFeedbackReportInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutFeedbackReportInput, ReportUncheckedCreateWithoutFeedbackReportInput>
  }

  export type ReportUpsertWithoutFeedbackReportInput = {
    update: XOR<ReportUpdateWithoutFeedbackReportInput, ReportUncheckedUpdateWithoutFeedbackReportInput>
    create: XOR<ReportCreateWithoutFeedbackReportInput, ReportUncheckedCreateWithoutFeedbackReportInput>
    where?: ReportWhereInput
  }

  export type ReportUpdateToOneWithWhereWithoutFeedbackReportInput = {
    where?: ReportWhereInput
    data: XOR<ReportUpdateWithoutFeedbackReportInput, ReportUncheckedUpdateWithoutFeedbackReportInput>
  }

  export type ReportUpdateWithoutFeedbackReportInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    productReport?: ProductReportUpdateOneWithoutReportNestedInput
    journeyPlan?: JourneyPlanUpdateOneWithoutReportsNestedInput
    order?: OrderUpdateOneWithoutReportsNestedInput
    outlet?: OutletUpdateOneRequiredWithoutReportsNestedInput
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
    visibilityReport?: VisibilityReportUpdateOneWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutFeedbackReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    outletId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    journeyPlanId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    productReport?: ProductReportUncheckedUpdateOneWithoutReportNestedInput
    visibilityReport?: VisibilityReportUncheckedUpdateOneWithoutReportNestedInput
  }

  export type ReportCreateWithoutProductReportInput = {
    createdAt?: Date | string
    type: $Enums.ReportType
    feedbackReport?: FeedbackReportCreateNestedOneWithoutReportInput
    journeyPlan?: JourneyPlanCreateNestedOneWithoutReportsInput
    order?: OrderCreateNestedOneWithoutReportsInput
    outlet: OutletCreateNestedOneWithoutReportsInput
    user: UserCreateNestedOneWithoutReportsInput
    visibilityReport?: VisibilityReportCreateNestedOneWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutProductReportInput = {
    id?: number
    orderId?: number | null
    outletId: number
    createdAt?: Date | string
    userId: number
    journeyPlanId?: number | null
    type: $Enums.ReportType
    feedbackReport?: FeedbackReportUncheckedCreateNestedOneWithoutReportInput
    visibilityReport?: VisibilityReportUncheckedCreateNestedOneWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutProductReportInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutProductReportInput, ReportUncheckedCreateWithoutProductReportInput>
  }

  export type ReportUpsertWithoutProductReportInput = {
    update: XOR<ReportUpdateWithoutProductReportInput, ReportUncheckedUpdateWithoutProductReportInput>
    create: XOR<ReportCreateWithoutProductReportInput, ReportUncheckedCreateWithoutProductReportInput>
    where?: ReportWhereInput
  }

  export type ReportUpdateToOneWithWhereWithoutProductReportInput = {
    where?: ReportWhereInput
    data: XOR<ReportUpdateWithoutProductReportInput, ReportUncheckedUpdateWithoutProductReportInput>
  }

  export type ReportUpdateWithoutProductReportInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    feedbackReport?: FeedbackReportUpdateOneWithoutReportNestedInput
    journeyPlan?: JourneyPlanUpdateOneWithoutReportsNestedInput
    order?: OrderUpdateOneWithoutReportsNestedInput
    outlet?: OutletUpdateOneRequiredWithoutReportsNestedInput
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
    visibilityReport?: VisibilityReportUpdateOneWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutProductReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    outletId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    journeyPlanId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    feedbackReport?: FeedbackReportUncheckedUpdateOneWithoutReportNestedInput
    visibilityReport?: VisibilityReportUncheckedUpdateOneWithoutReportNestedInput
  }

  export type ReportCreateWithoutVisibilityReportInput = {
    createdAt?: Date | string
    type: $Enums.ReportType
    feedbackReport?: FeedbackReportCreateNestedOneWithoutReportInput
    productReport?: ProductReportCreateNestedOneWithoutReportInput
    journeyPlan?: JourneyPlanCreateNestedOneWithoutReportsInput
    order?: OrderCreateNestedOneWithoutReportsInput
    outlet: OutletCreateNestedOneWithoutReportsInput
    user: UserCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateWithoutVisibilityReportInput = {
    id?: number
    orderId?: number | null
    outletId: number
    createdAt?: Date | string
    userId: number
    journeyPlanId?: number | null
    type: $Enums.ReportType
    feedbackReport?: FeedbackReportUncheckedCreateNestedOneWithoutReportInput
    productReport?: ProductReportUncheckedCreateNestedOneWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutVisibilityReportInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutVisibilityReportInput, ReportUncheckedCreateWithoutVisibilityReportInput>
  }

  export type ReportUpsertWithoutVisibilityReportInput = {
    update: XOR<ReportUpdateWithoutVisibilityReportInput, ReportUncheckedUpdateWithoutVisibilityReportInput>
    create: XOR<ReportCreateWithoutVisibilityReportInput, ReportUncheckedCreateWithoutVisibilityReportInput>
    where?: ReportWhereInput
  }

  export type ReportUpdateToOneWithWhereWithoutVisibilityReportInput = {
    where?: ReportWhereInput
    data: XOR<ReportUpdateWithoutVisibilityReportInput, ReportUncheckedUpdateWithoutVisibilityReportInput>
  }

  export type ReportUpdateWithoutVisibilityReportInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    feedbackReport?: FeedbackReportUpdateOneWithoutReportNestedInput
    productReport?: ProductReportUpdateOneWithoutReportNestedInput
    journeyPlan?: JourneyPlanUpdateOneWithoutReportsNestedInput
    order?: OrderUpdateOneWithoutReportsNestedInput
    outlet?: OutletUpdateOneRequiredWithoutReportsNestedInput
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateWithoutVisibilityReportInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    outletId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    journeyPlanId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    feedbackReport?: FeedbackReportUncheckedUpdateOneWithoutReportNestedInput
    productReport?: ProductReportUncheckedUpdateOneWithoutReportNestedInput
  }

  export type OrderItemCreateWithoutProductInput = {
    quantity: number
    order: OrderCreateNestedOneWithoutOrderItemsInput
  }

  export type OrderItemUncheckedCreateWithoutProductInput = {
    id?: number
    orderId: number
    quantity: number
  }

  export type OrderItemCreateOrConnectWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemCreateManyProductInputEnvelope = {
    data: OrderItemCreateManyProductInput | OrderItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type OutletCreateWithoutProductsInput = {
    name: string
    address: string
    latitude?: number | null
    longitude?: number | null
    balance?: string | null
    email?: string | null
    kraPin?: string | null
    phone?: string | null
    journeyPlans?: JourneyPlanCreateNestedManyWithoutOutletInput
    orders?: OrderCreateNestedManyWithoutOutletInput
    reports?: ReportCreateNestedManyWithoutOutletInput
    checkins?: ManagerCheckinCreateNestedManyWithoutOutletInput
  }

  export type OutletUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
    address: string
    latitude?: number | null
    longitude?: number | null
    balance?: string | null
    email?: string | null
    kraPin?: string | null
    phone?: string | null
    journeyPlans?: JourneyPlanUncheckedCreateNestedManyWithoutOutletInput
    orders?: OrderUncheckedCreateNestedManyWithoutOutletInput
    reports?: ReportUncheckedCreateNestedManyWithoutOutletInput
    checkins?: ManagerCheckinUncheckedCreateNestedManyWithoutOutletInput
  }

  export type OutletCreateOrConnectWithoutProductsInput = {
    where: OutletWhereUniqueInput
    create: XOR<OutletCreateWithoutProductsInput, OutletUncheckedCreateWithoutProductsInput>
  }

  export type OrderItemUpsertWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    update: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
    create: XOR<OrderItemCreateWithoutProductInput, OrderItemUncheckedCreateWithoutProductInput>
  }

  export type OrderItemUpdateWithWhereUniqueWithoutProductInput = {
    where: OrderItemWhereUniqueInput
    data: XOR<OrderItemUpdateWithoutProductInput, OrderItemUncheckedUpdateWithoutProductInput>
  }

  export type OrderItemUpdateManyWithWhereWithoutProductInput = {
    where: OrderItemScalarWhereInput
    data: XOR<OrderItemUpdateManyMutationInput, OrderItemUncheckedUpdateManyWithoutProductInput>
  }

  export type OutletUpsertWithoutProductsInput = {
    update: XOR<OutletUpdateWithoutProductsInput, OutletUncheckedUpdateWithoutProductsInput>
    create: XOR<OutletCreateWithoutProductsInput, OutletUncheckedCreateWithoutProductsInput>
    where?: OutletWhereInput
  }

  export type OutletUpdateToOneWithWhereWithoutProductsInput = {
    where?: OutletWhereInput
    data: XOR<OutletUpdateWithoutProductsInput, OutletUncheckedUpdateWithoutProductsInput>
  }

  export type OutletUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUpdateManyWithoutOutletNestedInput
    orders?: OrderUpdateManyWithoutOutletNestedInput
    reports?: ReportUpdateManyWithoutOutletNestedInput
    checkins?: ManagerCheckinUpdateManyWithoutOutletNestedInput
  }

  export type OutletUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    kraPin?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUncheckedUpdateManyWithoutOutletNestedInput
    orders?: OrderUncheckedUpdateManyWithoutOutletNestedInput
    reports?: ReportUncheckedUpdateManyWithoutOutletNestedInput
    checkins?: ManagerCheckinUncheckedUpdateManyWithoutOutletNestedInput
  }

  export type UserCreateWithoutLeavesInput = {
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photoUrl?: string | null
    journeyPlans?: JourneyPlanCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    reports?: ReportCreateNestedManyWithoutUserInput
    tokens?: TokenCreateNestedManyWithoutUserInput
    Manager?: ManagerCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLeavesInput = {
    id?: number
    name: string
    email: string
    phoneNumber: string
    password: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photoUrl?: string | null
    journeyPlans?: JourneyPlanUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    tokens?: TokenUncheckedCreateNestedManyWithoutUserInput
    Manager?: ManagerUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLeavesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLeavesInput, UserUncheckedCreateWithoutLeavesInput>
  }

  export type UserUpsertWithoutLeavesInput = {
    update: XOR<UserUpdateWithoutLeavesInput, UserUncheckedUpdateWithoutLeavesInput>
    create: XOR<UserCreateWithoutLeavesInput, UserUncheckedCreateWithoutLeavesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLeavesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLeavesInput, UserUncheckedUpdateWithoutLeavesInput>
  }

  export type UserUpdateWithoutLeavesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    tokens?: TokenUpdateManyWithoutUserNestedInput
    Manager?: ManagerUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLeavesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    journeyPlans?: JourneyPlanUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    tokens?: TokenUncheckedUpdateManyWithoutUserNestedInput
    Manager?: ManagerUncheckedUpdateOneWithoutUserNestedInput
  }

  export type JourneyPlanCreateManyUserInput = {
    id?: number
    date: Date | string
    time: string
    outletId: number
    status?: number
    checkInTime?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    imageUrl?: string | null
    notes?: string | null
    checkoutLatitude?: number | null
    checkoutLongitude?: number | null
    checkoutTime?: Date | string | null
  }

  export type OrderCreateManyUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    outletId: number
  }

  export type ReportCreateManyUserInput = {
    id?: number
    orderId?: number | null
    outletId: number
    createdAt?: Date | string
    journeyPlanId?: number | null
    type: $Enums.ReportType
  }

  export type TokenCreateManyUserInput = {
    id?: number
    token: string
    createdAt?: Date | string
    expiresAt: Date | string
  }

  export type LeaveCreateManyUserInput = {
    id?: number
    leaveType: string
    startDate: Date | string
    endDate: Date | string
    reason: string
    attachment?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JourneyPlanUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    outlet?: OutletUpdateOneRequiredWithoutJourneyPlansNestedInput
    reports?: ReportUpdateManyWithoutJourneyPlanNestedInput
  }

  export type JourneyPlanUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    outletId?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reports?: ReportUncheckedUpdateManyWithoutJourneyPlanNestedInput
  }

  export type JourneyPlanUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    outletId?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    outlet?: OutletUpdateOneRequiredWithoutOrdersNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    reports?: ReportUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    outletId?: IntFieldUpdateOperationsInput | number
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    reports?: ReportUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    outletId?: IntFieldUpdateOperationsInput | number
  }

  export type ReportUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    feedbackReport?: FeedbackReportUpdateOneWithoutReportNestedInput
    productReport?: ProductReportUpdateOneWithoutReportNestedInput
    journeyPlan?: JourneyPlanUpdateOneWithoutReportsNestedInput
    order?: OrderUpdateOneWithoutReportsNestedInput
    outlet?: OutletUpdateOneRequiredWithoutReportsNestedInput
    visibilityReport?: VisibilityReportUpdateOneWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    outletId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    journeyPlanId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    feedbackReport?: FeedbackReportUncheckedUpdateOneWithoutReportNestedInput
    productReport?: ProductReportUncheckedUpdateOneWithoutReportNestedInput
    visibilityReport?: VisibilityReportUncheckedUpdateOneWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    outletId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    journeyPlanId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
  }

  export type TokenUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveUpdateWithoutUserInput = {
    leaveType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    leaveType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LeaveUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    leaveType?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: StringFieldUpdateOperationsInput | string
    attachment?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ManagerCheckinCreateManyManagerInput = {
    id?: number
    outletId: number
    date: Date | string
    checkInAt?: Date | string | null
    checkOutAt?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    notes?: string | null
  }

  export type ManagerCheckinUpdateWithoutManagerInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    outlet?: OutletUpdateOneRequiredWithoutCheckinsNestedInput
  }

  export type ManagerCheckinUncheckedUpdateWithoutManagerInput = {
    id?: IntFieldUpdateOperationsInput | number
    outletId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ManagerCheckinUncheckedUpdateManyWithoutManagerInput = {
    id?: IntFieldUpdateOperationsInput | number
    outletId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JourneyPlanCreateManyOutletInput = {
    id?: number
    date: Date | string
    time: string
    userId?: number | null
    status?: number
    checkInTime?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    imageUrl?: string | null
    notes?: string | null
    checkoutLatitude?: number | null
    checkoutLongitude?: number | null
    checkoutTime?: Date | string | null
  }

  export type OrderCreateManyOutletInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductCreateManyOutletInput = {
    id?: number
    name: string
    description?: string | null
    price: number
    currentStock: number
    reorderPoint: number
    orderQuantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    imageUrl?: string | null
  }

  export type ReportCreateManyOutletInput = {
    id?: number
    orderId?: number | null
    createdAt?: Date | string
    userId: number
    journeyPlanId?: number | null
    type: $Enums.ReportType
  }

  export type ManagerCheckinCreateManyOutletInput = {
    id?: number
    managerId: number
    date: Date | string
    checkInAt?: Date | string | null
    checkOutAt?: Date | string | null
    latitude?: number | null
    longitude?: number | null
    notes?: string | null
  }

  export type JourneyPlanUpdateWithoutOutletInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    status?: IntFieldUpdateOperationsInput | number
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutJourneyPlansNestedInput
    reports?: ReportUpdateManyWithoutJourneyPlanNestedInput
  }

  export type JourneyPlanUncheckedUpdateWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: IntFieldUpdateOperationsInput | number
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reports?: ReportUncheckedUpdateManyWithoutJourneyPlanNestedInput
  }

  export type JourneyPlanUncheckedUpdateManyWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    time?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: IntFieldUpdateOperationsInput | number
    checkInTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    checkoutLatitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutLongitude?: NullableFloatFieldUpdateOperationsInput | number | null
    checkoutTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type OrderUpdateWithoutOutletInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
    orderItems?: OrderItemUpdateManyWithoutOrderNestedInput
    reports?: ReportUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    orderItems?: OrderItemUncheckedUpdateManyWithoutOrderNestedInput
    reports?: ReportUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type OrderUncheckedUpdateManyWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUpdateWithoutOutletInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    orderQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    OrderItem?: OrderItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    orderQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    OrderItem?: OrderItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    currentStock?: IntFieldUpdateOperationsInput | number
    reorderPoint?: IntFieldUpdateOperationsInput | number
    orderQuantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportUpdateWithoutOutletInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    feedbackReport?: FeedbackReportUpdateOneWithoutReportNestedInput
    productReport?: ProductReportUpdateOneWithoutReportNestedInput
    journeyPlan?: JourneyPlanUpdateOneWithoutReportsNestedInput
    order?: OrderUpdateOneWithoutReportsNestedInput
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
    visibilityReport?: VisibilityReportUpdateOneWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    journeyPlanId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    feedbackReport?: FeedbackReportUncheckedUpdateOneWithoutReportNestedInput
    productReport?: ProductReportUncheckedUpdateOneWithoutReportNestedInput
    visibilityReport?: VisibilityReportUncheckedUpdateOneWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    journeyPlanId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
  }

  export type ManagerCheckinUpdateWithoutOutletInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    manager?: ManagerUpdateOneRequiredWithoutCheckinsNestedInput
  }

  export type ManagerCheckinUncheckedUpdateWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    managerId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ManagerCheckinUncheckedUpdateManyWithoutOutletInput = {
    id?: IntFieldUpdateOperationsInput | number
    managerId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    checkInAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    checkOutAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrderItemCreateManyOrderInput = {
    id?: number
    productId: number
    quantity: number
  }

  export type ReportCreateManyOrderInput = {
    id?: number
    outletId: number
    createdAt?: Date | string
    userId: number
    journeyPlanId?: number | null
    type: $Enums.ReportType
  }

  export type OrderItemUpdateWithoutOrderInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutOrderItemNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type ReportUpdateWithoutOrderInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    feedbackReport?: FeedbackReportUpdateOneWithoutReportNestedInput
    productReport?: ProductReportUpdateOneWithoutReportNestedInput
    journeyPlan?: JourneyPlanUpdateOneWithoutReportsNestedInput
    outlet?: OutletUpdateOneRequiredWithoutReportsNestedInput
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
    visibilityReport?: VisibilityReportUpdateOneWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    outletId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    journeyPlanId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    feedbackReport?: FeedbackReportUncheckedUpdateOneWithoutReportNestedInput
    productReport?: ProductReportUncheckedUpdateOneWithoutReportNestedInput
    visibilityReport?: VisibilityReportUncheckedUpdateOneWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    outletId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    journeyPlanId?: NullableIntFieldUpdateOperationsInput | number | null
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
  }

  export type ReportCreateManyJourneyPlanInput = {
    id?: number
    orderId?: number | null
    outletId: number
    createdAt?: Date | string
    userId: number
    type: $Enums.ReportType
  }

  export type ReportUpdateWithoutJourneyPlanInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    feedbackReport?: FeedbackReportUpdateOneWithoutReportNestedInput
    productReport?: ProductReportUpdateOneWithoutReportNestedInput
    order?: OrderUpdateOneWithoutReportsNestedInput
    outlet?: OutletUpdateOneRequiredWithoutReportsNestedInput
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
    visibilityReport?: VisibilityReportUpdateOneWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutJourneyPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    outletId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
    feedbackReport?: FeedbackReportUncheckedUpdateOneWithoutReportNestedInput
    productReport?: ProductReportUncheckedUpdateOneWithoutReportNestedInput
    visibilityReport?: VisibilityReportUncheckedUpdateOneWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutJourneyPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    outletId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    type?: EnumReportTypeFieldUpdateOperationsInput | $Enums.ReportType
  }

  export type OrderItemCreateManyProductInput = {
    id?: number
    orderId: number
    quantity: number
  }

  export type OrderItemUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    order?: OrderUpdateOneRequiredWithoutOrderItemsNestedInput
  }

  export type OrderItemUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type OrderItemUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ManagerCountOutputTypeDefaultArgs instead
     */
    export type ManagerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ManagerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OutletCountOutputTypeDefaultArgs instead
     */
    export type OutletCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OutletCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderCountOutputTypeDefaultArgs instead
     */
    export type OrderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JourneyPlanCountOutputTypeDefaultArgs instead
     */
    export type JourneyPlanCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JourneyPlanCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ManagerDefaultArgs instead
     */
    export type ManagerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ManagerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TokenDefaultArgs instead
     */
    export type TokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OutletDefaultArgs instead
     */
    export type OutletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OutletDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ManagerCheckinDefaultArgs instead
     */
    export type ManagerCheckinArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ManagerCheckinDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderDefaultArgs instead
     */
    export type OrderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrderItemDefaultArgs instead
     */
    export type OrderItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrderItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JourneyPlanDefaultArgs instead
     */
    export type JourneyPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JourneyPlanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NoticeBoardDefaultArgs instead
     */
    export type NoticeBoardArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NoticeBoardDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportDefaultArgs instead
     */
    export type ReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedbackReportDefaultArgs instead
     */
    export type FeedbackReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeedbackReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductReportDefaultArgs instead
     */
    export type ProductReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VisibilityReportDefaultArgs instead
     */
    export type VisibilityReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VisibilityReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeaveDefaultArgs instead
     */
    export type LeaveArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeaveDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}